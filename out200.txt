############
Binary: putty
Platform: arm
Optimization: 0
```assembly
bignum_byte:
loc_24FF8:
    PUSH {R7}
    SUB SP, SP, #0xC
    ADD R7, SP, #0
    STR R0, [R7,#0xC+var_8]
    STR R1, [R7,#0xC+var_C]
    LDR R3, [R7,#0xC+var_C]
    CMP R3, #0
    BLT loc_25016
loc_25008:
    LDR R3, [R7,#0xC+var_8]
    LDR R3, [R3]
    LSLS R3, R3, #2
    MOV R2, R3
    LDR R3, [R7,#0xC+var_C]
    CMP R2, R3
    BGT loc_2501A
loc_25016:
    MOVS R3, #0
    B loc_2504A
loc_2501A:
    LDR R3, [R7,#0xC+var_C]
    ADDS R2, R3, #3
    CMP R3, #0
    ITE 
    MOVLT R3, R2
    MOVGE R3, R3
    ASRS R3, R3, #2
    ADDS R3, #1
    LSLS R3, R3, #2
    LDR R2, [R7,#0xC+var_8]
    ADD R3, R2
    LDR R2, [R3]
    LDR R3, [R7,#0xC+var_C]
    NEGS R1, R3
    AND.W R3, R3, #3
    AND.W R1, R1, #3
    IT 
    NEGPL R3, R1
    LSLS R3, R3, #3
    LSR.W R3, R2, R3
    UXTB R3, R3
loc_2504A:
    MOV R0, R3
    ADDS R7, #0xC
    MOV SP, R7
    POP.W {R7}
    BX LR
```
Output:[
    "Prints formatted text to the console."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
.term_proc:
loc_41E18:
    PUSH {R3,LR}
    POP {R3,PC}
```
Output:[
    "Allocates memory for the variable C and sets it to 24",
    "Loads the value of var_C from memory into R0",
    "Moves R0 into the stack location at address 0x10",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 1 into R1",
    "Moves R1 into the stack location at address 0x10",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x18",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x14",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x1C",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x20",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 1 into R0",
    "Moves R0 into the stack location at address 0x10",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R1",
    "Moves R1 into the stack location at address 0x10",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x18",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x14",
    "Subtracts 0x10 from the stack pointer to get the address of var_C",
    "Stores the value 0 into R2",
    "Moves R2 into the stack location at address 0x10",
    "LDR R3, [R7,#0x10+var_C]",
    "Moves R3 into the stack location at address 0x18",
    "LDR R3, [R7,#0x10+var_C]",
    "LDR R3, [R7,#0x10+var_C]",
    "STR R2, [R3,#4]",
    "LDR R3, [R7,#0x10+var_C]",
    "MOV R0, R3"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
loadrsakey:
loc_321A0:
    PUSH {R7,LR}
    SUB SP, SP, #0x68
    ADD R7, SP, #8
    STR R0, [R7,#0x60+var_54]
    STR R1, [R7,#0x60+var_58]
    STR R2, [R7,#0x60+var_5C]
    STR R3, [R7,#0x60+var_60]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x60+var_4]
    MOVS R3, #0
    STR R3, [R7,#0x60+var_48]
    MOVS R3, #0
    STR R3, [R7,#0x60+var_50]
    MOVS R2, #0
    MOV R1, #0x4C208
    LDR R0, [R7,#0x60+var_54]
    BL sub_3FEB0
    STR R0, [R7,#0x60+stream]
    LDR R3, [R7,#0x60+stream]
    CMP R3, #0
    BNE loc_321E6
loc_321DA:
    MOV R3, #0x4C20C
    STR R3, [R7,#0x60+var_50]
    B loc_3223A
loc_321E6:
    ADD.W R3, R7, #0x1C
    LDR R2, [R7,#0x60+stream]
    MOVS R1, #0x40
    MOV R0, R3
    BLX fgets
    MOV R3, R0
    CMP R3, #0
    BEQ loc_32230
loc_321FA:
    ADD.W R3, R7, #0x1C
    MOV R1, #aSshPrivateKeyF
    MOV R0, R3
    BLX strcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_32230
loc_32212:
    ADD.W R3, R7, #0x10
    STR R3, [SP,#0x68+var_64]
    LDR R3, [R7,#0x60+var_5C]
    STR R3, [SP,#0x68+var_68]
    MOVS R3, #0
    MOVS R2, #0
    LDR R1, [R7,#0x60+var_58]
    LDR R0, [R7,#0x60+stream]
    BL sub_31A7C
    STR R0, [R7,#0x60+var_48]
    MOVS R3, #0
    STR R3, [R7,#0x60+stream]
    B loc_3223A
loc_32230:
    MOV R3, #0x4C240
    STR R3, [R7,#0x60+var_50]
loc_3223A:
    LDR R3, [R7,#0x60+stream]
    CMP R3, #0
    BEQ loc_32246
loc_32240:
    LDR R0, [R7,#0x60+stream]
    BLX fclose
loc_32246:
    LDR R3, [R7,#0x60+var_48]
    CMP R3, #1
    BEQ loc_32258
loc_3224C:
    LDR R3, [R7,#0x60+var_60]
    CMP R3, #0
    BEQ loc_32258
loc_32252:
    LDR R2, [R7,#0x60+var_50]
    LDR R3, [R7,#0x60+var_60]
    STR R2, [R3]
loc_32258:
    LDR R3, [R7,#0x60+var_48]
    MOV R0, R3
    MOV R3, #0x5F758
    LDR R2, [R7,#0x60+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_32270
loc_3226C:
    BLX __stack_chk_fail
loc_32270:
    ADDS R7, #0x60
    MOV SP, R7
    POP {R7,PC}
```
Output:```json
[
    "findrelpos234",
    "loc_2AF9C",
    "STR R0, [SP,#0x38+var_2C]",
    "STR R1, [SP,#0x38+var_30]",
    "LDR R5, [R0]",
    "CMP R5, #0",
    "BEQ.W loc_2B0B0",
    "loc_2AFAE",
    "MOV R10, R2",
    "MOV R11, R3",
    "CBNZ R2, loc_2AFB8",
    "loc_2AFB4",
    "LDR R10, [R0,#4]",
    "LOC_2AFB8",
    "LDR R3, [SP,#0x38+var_30]",
    "MOV W R8, #0",
    "CBNZ R3, loc_2B004",
    "loc_2AFC0",
    "BIC.W R3, R11, #2",
    "CMP R3, #1",
    "BEQ loc_2AFE8",
    "loc_2AFC8",
    "MOV R3, #aFindrelpos234",
    "MOVW R2, #0x21B",
    "MOV R1, #aTree234C",
    "MOV R0, #aRelationRel234",
    "BLX __assert_fail",
    "loc_2AFE8",
    "CMP.W R11, #1",
    "ITE",
    "MOVEQ.W R8, #1",
    "BEQ loc_2B004",
    "loc_2AFF4",
    "CMP.W R11, #3",
    "MOV.W R8, #0xFFFFFFFF",
    "IT",
    "MOVNE.W R8, #0",
    "B loc_2B004",
    "loc_2B00E",
    "LDR R1, [R5,#0x24]",
    "CBZ R1, loc_2B046",
    "loc_2B012",
    "MOV R6, R5",
    "MOVS R4, #0",
    "B loc_2B01C",
    "LDR R3, [R6]",
    "CBZ R3, loc_2B04C",
    "loc_2B01C",
    "ADDS R6, #4",
    "MOV R2, R6",
    "LDR R3, [R6]",
    "CBZ R3, loc_2B03A",
    "loc_2B036",
    "LDR R3, [R6,#0x10]",
    "ADD R7, R3",
    "loc_2B03A",
    "CBZ R0, loc_2B04A",
    "loc_2B03C",
    "ADDS R7, #1",
    ADDS R4, #1",
    CMP R4, #3",
    BNE loc_2B018",
    "loc_2B044",
    "B loc_2B04C",
    "loc_2B046",
    "MOVS R4, #0",
    "B loc_2B04C",
    "loc_2B04A",
    "MOV R9, R4",
    "loc_2B04C",
    "CMP.W R9, #0",
    "GE loc_2B05E",
    "ADD.W R4, R5, R4,LSL#2",
    "LDR R5, [R4,#4]",
    "CMP R5, #0",
    "BNE loc_2B00E",
    "loc_2B05C",
    "B loc_2B082",
    "loc_2B05E",
    "BIC.W R3, R11, #2",
    "CMP R3, #1",
    "BEQ loc_2B074",
    "LDR R3, [SP,#0x38+arg_0]",
    "CBZ R3, loc_2B06C",
    "STR R7, [R3]",
    "loc_2B06C",
    "ADD.W R5, R5, R9,LSL#2",
    "LDR R0, [R5,#0x24]",
    "B loc_2B0BA",
    "loc_2B074",
    "CMP.W R11, #1",
    ITE 
    ADDDEQ.W R7, R7, #0xFFFFFFFF
    ADDNE R7, #1
    B loc_2B096
    loc_2B082",
    "CMP.W R11, #0",
    BEQ loc_2B0B4
    loc_2B088,
    "ADD.W R11, R11, #0xFFFFFFFF"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
__imp_strlen:
loc_5FEDC:
    IMPORT 
```
Output:[
    "duplicate string"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
__imp_fprintf:
loc_5FEF0:
    IMPORT 
```
Output:[
    "Deserializing font specifications",
    "Reading font data from memory",
    "Copying font data to memory"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ecp_add:
loc_2C6F4:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_4]
    STR R1, [R7,#0x10+var_8]
    STR R2, [R7,#0x10+var_C]
    LDR R3, [R7,#0x10+var_4]
    LDR R2, [R3]
    LDR R3, [R7,#0x10+var_8]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_2C710
loc_2C70C:
    MOVS R3, #0
    B loc_2C764
loc_2C710:
    LDR R3, [R7,#0x10+var_4]
    LDRB R3, [R3,#0x10]
    CMP R3, #0
    BEQ loc_2C722
loc_2C718:
    LDR R0, [R7,#0x10+var_8]
    BL sub_2B7A8
    MOV R3, R0
    B loc_2C764
loc_2C722:
    LDR R3, [R7,#0x10+var_8]
    LDRB R3, [R3,#0x10]
    CMP R3, #0
    BEQ loc_2C734
loc_2C72A:
    LDR R0, [R7,#0x10+var_4]
    BL sub_2B7A8
    MOV R3, R0
    B loc_2C764
loc_2C734:
    LDR R3, [R7,#0x10+var_4]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #2
    BNE loc_2C74A
loc_2C73E:
    LDR R1, [R7,#0x10+var_8]
    LDR R0, [R7,#0x10+var_4]
    BL sub_2C548
    MOV R3, R0
    B loc_2C764
loc_2C74A:
    LDR R3, [R7,#0x10+var_4]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_2C762
loc_2C754:
    LDR R2, [R7,#0x10+var_C]
    LDR R1, [R7,#0x10+var_8]
    LDR R0, [R7,#0x10+var_4]
    BL sub_2C0B0
    MOV R3, R0
    B loc_2C764
loc_2C762:
    MOVS R3, #0
loc_2C764:
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:```json
[
    "Memory clear from register R4 to 0"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
bn_restore_invariant:
loc_22BD8:
    PUSH {R7}
    SUB SP, SP, #0xC
    ADD R7, SP, #0
    STR R0, [R7,#0xC+var_8]
    B loc_22BEC
loc_22BE2:
    LDR R3, [R7,#0xC+var_8]
    LDR R3, [R3]
    SUBS R2, R3, #1
    LDR R3, [R7,#0xC+var_8]
    STR R2, [R3]
loc_22BEC:
    LDR R3, [R7,#0xC+var_8]
    LDR R3, [R3]
    CMP R3, #1
    BLS loc_22C04
loc_22BF4:
    LDR R3, [R7,#0xC+var_8]
    LDR R3, [R3]
    LSLS R3, R3, #2
    LDR R2, [R7,#0xC+var_8]
    ADD R3, R2
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_22BE2
loc_22C04:
    NOP 
    ADDS R7, #0xC
    MOV SP, R7
    POP.W {R7}
    BX LR
```
Output:[
    "verify_host_key",
    "sub_18A88",
    "strlen",
    "strncmp",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen",
    "strlen
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
__imp_strstr:
loc_5FF28:
    IMPORT 
```
Output:[
    "Function Name: __imp_strstr"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
open:
loc_112EC:
    ADR R12, 0x112F4
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(open_ptr - 0x5E2F4)]!
```
Output:[
    "reads a passphrase from a file",
    "handles errors related to file operations",
    "uses string functions"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ssh1_bignum_length:
loc_24FA8:
    PUSH {R7,LR}
    SUB SP, SP, #8
    ADD R7, SP, #0
    STR R0, [R7,#8+var_4]
    LDR R0, [R7,#8+var_4]
    BL sub_24F44
    MOV R3, R0
    ADDS R3, #7
    ADDS R2, R3, #7
    CMP R3, #0
    ITE 
    MOVLT R3, R2
    MOVGE R3, R3
    ASRS R3, R3, #3
    ADDS R3, #2
    MOV R0, R3
    ADDS R7, #8
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "SHA_Final"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
frame_dummy:
loc_11550:

loc_11594:
    PUSH {R3,LR}
    MOV R0, #0x5EF0C
    LDR R3, [R0]
    CBNZ R3, loc_115A8
loc_115A2:
    POP.W {R3,LR}
    B sub_11550
loc_115A8:
    MOV R3, #0
    CMP R3, #0
    BEQ loc_115A2
loc_115B4:
    BLX R3
    B loc_115A2
```
Output:[
    "Load the stack with registers",
    "Move constants to registers",
    "Call the printf_chk function",
    "Push the return value into R0",
    "Call the sub_11888 function",
    "Store the result in R0",
    "Call the puts function",
    "Pop the return value from R3"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
initialise_ecurve:
loc_2B1C4:
    PUSH {R7,LR}
    SUB SP, SP, #0x18
    ADD R7, SP, #0
    STR R0, [R7,#0x18+var_C]
    STR R1, [R7,#0x18+var_10]
    STR R2, [R7,#0x18+var_14]
    STR R3, [R7,#0x18+var_18]
    LDR R3, [R7,#0x18+var_10]
    ADDS R2, R3, #7
    CMP R3, #0
    ITE 
    MOVLT R3, R2
    MOVGE R3, R3
    ASRS R3, R3, #3
    STR R3, [R7,#0x18+var_4]
    LDR R3, [R7,#0x18+var_10]
    AND.W R3, R3, #7
    CMP R3, #0
    BEQ loc_2B1F2
loc_2B1EC:
    LDR R3, [R7,#0x18+var_4]
    ADDS R3, #1
    STR R3, [R7,#0x18+var_4]
loc_2B1F2:
    LDR R3, [R7,#0x18+var_C]
    MOVS R2, #2
    STR R2, [R3]
    LDR R2, [R7,#0x18+var_10]
    LDR R3, [R7,#0x18+var_C]
    STR R2, [R3,#0xC]
    LDR R1, [R7,#0x18+var_4]
    LDR R0, [R7,#0x18+var_14]
    BL sub_24B64
    MOV R2, R0
    LDR R3, [R7,#0x18+var_C]
    STR R2, [R3,#0x10]
    LDR R1, [R7,#0x18+var_4]
    LDR R0, [R7,#0x18+var_18]
    BL sub_24B64
    MOV R2, R0
    LDR R3, [R7,#0x18+var_C]
    STR R2, [R3,#0x14]
    LDR R1, [R7,#0x18+var_4]
    LDR R0, [R7,#0x18+arg_0]
    BL sub_24B64
    MOV R2, R0
    LDR R3, [R7,#0x18+var_C]
    STR R2, [R3,#0x18]
    LDR R1, [R7,#0x18+var_4]
    LDR R0, [R7,#0x18+arg_4]
    BL sub_24B64
    MOV R2, R0
    LDR R3, [R7,#0x18+var_C]
    STR R2, [R3,#0x20]
    LDR R1, [R7,#0x18+var_4]
    LDR R0, [R7,#0x18+arg_8]
    BL sub_24B64
    MOV R2, R0
    LDR R3, [R7,#0x18+var_C]
    STR R2, [R3,#0x24]
    LDR R3, [R7,#0x18+var_C]
    LDR R2, [R7,#0x18+var_C]
    STR R2, [R3,#0x1C]
    LDR R3, [R7,#0x18+var_C]
    MOVS R2, #0
    STRB.W R2, [R3,#0x2C]
    NOP 
    ADDS R7, #0x18
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "old_keyfile_warning"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
readpassphrase:
loc_118C8:
    PUSH {R4,R7,LR}
    SUB SP, SP, #0x14
    ADD R7, SP, #0
    STR R0, [R7,#0x14+filename]
    MOV R1, #aR
    LDR R0, [R7,#0x14+filename]
    BLX fopen
    STR R0, [R7,#0x14+stream]
    LDR R3, [R7,#0x14+stream]
    CMP R3, #0
    BNE loc_11914
loc_118E6:
    MOV R3, #0x5F760
    LDR R4, [R3]
    BLX __errno_location
    MOV R3, R0
    LDR R3, [R3]
    MOV R0, R3
    BLX strerror
    MOV R3, R0
    LDR R2, [R7,#0x14+filename]
    MOV R1, #aPuttygenCannot_0
    MOV R0, R4
    BLX fprintf
    MOVS R3, #0
    B loc_1198A
loc_11914:
    LDR R0, [R7,#0x14+stream]
    BL sub_1AFD8
    STR R0, [R7,#0x14+s]
    LDR R3, [R7,#0x14+s]
    CMP R3, #0
    BEQ loc_1193C
loc_11922:
    MOV R1, #asc_423E4
    LDR R0, [R7,#0x14+s]
    BLX strcspn
    MOV R2, R0
    LDR R3, [R7,#0x14+s]
    ADD R3, R2
    MOVS R2, #0
    STRB R2, [R3]
    B loc_11982
loc_1193C:
    LDR R0, [R7,#0x14+stream]
    BLX ferror
    MOV R3, R0
    CMP R3, #0
    BEQ loc_11974
loc_11948:
    MOV R3, #0x5F760
    LDR R4, [R3]
    BLX __errno_location
    MOV R3, R0
    LDR R3, [R3]
    MOV R0, R3
    BLX strerror
    MOV R3, R0
    LDR R2, [R7,#0x14+filename]
    MOV R1, #aPuttygenErrorR
    MOV R0, R4
    BLX fprintf
    B loc_11982
loc_11974:
    MOV R0, #0x42410
    BL sub_1ABBC
    STR R0, [R7,#0x14+s]
loc_11982:
    LDR R0, [R7,#0x14+stream]
    BLX fclose
    LDR R3, [R7,#0x14+s]
loc_1198A:
    MOV R0, R3
    ADDS R7, #0x14
    MOV SP, R7
    POP {R4,R7,PC}
```
Output:[
    "Reads a passphrase from the user",
    "Opens a file for reading",
    "Subtracts the passphrase length from the current position in the file",
    "Copies the first 16 bytes of the file into memory",
    "Closes the file",
    "Pops the stack and jumps to the next instruction"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ec_ed_alg_and_curve_by_bits:
loc_2FAB8:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_4]
    STR R1, [R7,#0x10+var_8]
    STR R2, [R7,#0x10+var_C]
    LDR R3, [R7,#0x10+var_4]
    CMP.W R3, #0x100
    BNE loc_2FAEE
loc_2FACC:
    LDR R2, [R7,#0x10+var_C]
    MOV R3, #0x48678
    STR R3, [R2]
    NOP 
    LDR R3, [R7,#0x10+var_C]
    LDR R3, [R3]
    LDR R3, [R3,#0x38]
    LDR R3, [R3]
    BLX R3
    MOV R2, R0
    LDR R3, [R7,#0x10+var_8]
    STR R2, [R3]
    MOVS R3, #1
    B loc_2FAF0
loc_2FAEE:
    MOVS R3, #0
loc_2FAF0:
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:############
Binary: putty
Platform: arm
Optimization: 0
```assembly
fontspec_serialise:
loc_3FF8C:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_C]
    STR R1, [R7,#0x10+dest]
    LDR R3, [R7,#0x10+var_C]
    LDR R3, [R3]
    MOV R0, R3
    BLX strlen
    MOV R3, R0
    STR R3, [R7,#0x10+var_4]
    LDR R3, [R7,#0x10+dest]
    CMP R3, #0
    BEQ loc_3FFB6
loc_3FFAA:
    LDR R3, [R7,#0x10+var_C]
    LDR R3, [R3]
    MOV R1, R3
    LDR R0, [R7,#0x10+dest]
    BLX strcpy
loc_3FFB6:
    LDR R3, [R7,#0x10+var_4]
    ADDS R3, #1
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Extracting main features from an assembly function involves several steps. The key features extracted are:

    1. **Function Signature**: The function `sub_3FEB0` has a signature of `void sub_3FEB0()`. This includes the return type, parameter types, and the function name.

    2. **Stack Usage**: The function uses `SP` for stack usage, which is common in many operating systems.

    3. **Variable Initialization**: Variables like `var_C`, `var_4`, `stream`, and `var_4` are initialized in the function.

    4. **File Operations**: The file operations performed are `fclose`, which is used to close a file.

    5. **Return Value**: The function returns a value, which is not explicitly mentioned but is likely a result of the operations performed.

    6. **Memory Access**: Memory access is typically done through `LDR` and `STR`.

    7. **Branches**: The function contains branches to handle different conditions, such as when `stream` is `0` or when `var_4` is `0`.

    8. **Return Address**: The function returns to the caller with a specific address, which is not explicitly mentioned but is likely the return address of the next instruction.

    9. **Stack Frame**: The function uses a stack frame to maintain local variables and function state.

    10. **Function Name**: The function name is `sub_3FEB0`.

These features are extracted from the given assembly code snippet to provide a comprehensive understanding of the function's behavior and purpose.<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
des_encipher:
loc_262B8:
    PUSH {R7}
    SUB SP, SP, #0x24
    ADD R7, SP, #0
    STR R0, [R7,#0x24+var_18]
    STR R1, [R7,#0x24+var_1C]
    STR R2, [R7,#0x24+var_20]
    STR R3, [R7,#0x24+var_24]
    LDR R3, [R7,#0x24+var_1C]
    LSRS R2, R3, #4
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    AND.W R3, R3, #0xF0F0F0F
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #4
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_1C]
    LSRS R2, R3, #0x10
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    UXTH R3, R3
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #0x10
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_20]
    LSRS R2, R3, #2
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    AND.W R3, R3, #0x33333333
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R2, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_20]
    LSRS R2, R3, #8
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    AND.W R3, R3, #0xFF00FF
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #8
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R2, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_1C]
    LSRS R2, R3, #1
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    AND.W R3, R3, #0x55555555
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #1
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_1C]
    MOV.W R3, R3,ROR#31
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_20]
    MOV.W R3, R3,ROR#31
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x40]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#4]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x44]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#8]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x48]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0xC]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x4C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x10]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x50]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x14]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x54]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x18]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x58]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x1C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x5C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x20]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x60]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x24]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x64]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x28]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x68]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x2C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x6C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x30]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x70]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x34]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x74]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x38]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x78]
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x3C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_24]
    LDR R2, [R3,#0x7C]
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_C]
    MOV.W R3, R3,ROR#4
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x18
    AND.W R2, R3, #0x3F
    MOV R3, #0x4780C
    LDR.W R2, [R3,R2,LSL#2]
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x18
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x40
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0x80
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #0x10
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADDS R1, #0xC0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x100
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    LSRS R3, R3, #8
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x140
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_C]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x180
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_8]
    AND.W R1, R3, #0x3F
    MOV R3, #0x4780C
    ADD.W R1, R1, #0x1C0
    LDR.W R3, [R3,R1,LSL#2]
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_1C]
    MOV.W R3, R3,ROR#1
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_20]
    MOV.W R3, R3,ROR#1
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_1C]
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_20]
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_10]
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_1C]
    LSRS R2, R3, #1
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    AND.W R3, R3, #0x55555555
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #1
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_20]
    LSRS R2, R3, #8
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    AND.W R3, R3, #0xFF00FF
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #8
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R2, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_20]
    LSRS R2, R3, #2
    LDR R3, [R7,#0x24+var_1C]
    EORS R3, R2
    AND.W R3, R3, #0x33333333
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #2
    LDR R2, [R7,#0x24+var_20]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R2, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R3, [R7,#0x24+var_1C]
    LSRS R2, R3, #0x10
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    UXTH R3, R3
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #0x10
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_1C]
    LSRS R2, R3, #4
    LDR R3, [R7,#0x24+var_20]
    EORS R3, R2
    AND.W R3, R3, #0xF0F0F0F
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    LSLS R3, R3, #4
    LDR R2, [R7,#0x24+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x24+var_1C]
    LDR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_10]
    EORS R3, R2
    STR R3, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_18]
    LDR R2, [R7,#0x24+var_1C]
    STR R2, [R3]
    LDR R3, [R7,#0x24+var_18]
    ADDS R3, #4
    LDR R2, [R7,#0x24+var_20]
    STR R2, [R3]
    NOP 
    ADDS R7, #0x24
    MOV SP, R7
    POP.W {R7}
    BX LRssh2_userkey_encrypted:
loc_3405C:
    PUSH {R7,LR}
    SUB SP, SP, #0x48
    ADD R7, SP, #0
    STR R0, [R7,#0x48+var_44]
    STR R1, [R7,#0x48+var_48]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x48+var_4]
    LDR R3, [R7,#0x48+var_48]
    CMP R3, #0
    BEQ loc_3407E
loc_34078:
    LDR R3, [R7,#0x48+var_48]
    MOVS R2, #0
    STR R2, [R3]
loc_3407E:
    MOVS R2, #0
    MOV R1, #0x4C208
    LDR R0, [R7,#0x48+var_44]
    BL sub_3FEB0
    STR R0, [R7,#0x48+stream]
    LDR R3, [R7,#0x48+stream]
    CMP R3, #0
    BNE loc_3409A
loc_34096:
    MOVS R3, #0
    B loc_341E8
loc_3409A:
    ADD.W R3, R7, #0x1C
    MOV R1, R3
    LDR R0, [R7,#0x48+stream]
    BL sub_32ACC
    MOV R3, R0
    CMP R3, #0
    BEQ loc_340DC
loc_340AC:
    ADD.W R3, R7, #0x1C
    MOV R1, #aPuttyUserKeyFi_0
    MOV R0, R3
    BLX strcmp
    MOV R3, R0
    CMP R3, #0
    BEQ loc_340E6
loc_340C4:
    ADD.W R3, R7, #0x1C
    MOV R1, #aPuttyUserKeyFi_1
    MOV R0, R3
    BLX strcmp
    MOV R3, R0
    CMP R3, #0
    BEQ loc_340E6
loc_340DC:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    MOVS R3, #0
    B loc_341E8
loc_340E6:
    LDR R0, [R7,#0x48+stream]
    BL sub_32B44
    STR R0, [R7,#0x48+s1]
    LDR R3, [R7,#0x48+s1]
    CMP R3, #0
    BNE loc_340FE
loc_340F4:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    MOVS R3, #0
    B loc_341E8
loc_340FE:
    LDR R0, [R7,#0x48+s1]
    BL sub_1B788
    ADD.W R3, R7, #0x1C
    MOV R1, R3
    LDR R0, [R7,#0x48+stream]
    BL sub_32ACC
    MOV R3, R0
    CMP R3, #0
    BEQ loc_3412E
loc_34116:
    ADD.W R3, R7, #0x1C
    MOV R1, #aEncryption
    MOV R0, R3
    BLX strcmp
    MOV R3, R0
    CMP R3, #0
    BEQ loc_34138
loc_3412E:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    MOVS R3, #0
    B loc_341E8
loc_34138:
    LDR R0, [R7,#0x48+stream]
    BL sub_32B44
    STR R0, [R7,#0x48+s1]
    LDR R3, [R7,#0x48+s1]
    CMP R3, #0
    BNE loc_34150
loc_34146:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    MOVS R3, #0
    B loc_341E8
loc_34150:
    ADD.W R3, R7, #0x1C
    MOV R1, R3
    LDR R0, [R7,#0x48+stream]
    BL sub_32ACC
    MOV R3, R0
    CMP R3, #0
    BEQ loc_3417A
loc_34162:
    ADD.W R3, R7, #0x1C
    MOV R1, #aComment_1
    MOV R0, R3
    BLX strcmp
    MOV R3, R0
    CMP R3, #0
    BEQ loc_3418A
loc_3417A:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    LDR R0, [R7,#0x48+s1]
    BL sub_1B788
    MOVS R3, #1
    B loc_341E8
loc_3418A:
    LDR R0, [R7,#0x48+stream]
    BL sub_32B44
    STR R0, [R7,#0x48+var_30]
    LDR R3, [R7,#0x48+var_30]
    CMP R3, #0
    BNE loc_341A8
loc_34198:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    LDR R0, [R7,#0x48+s1]
    BL sub_1B788
    MOVS R3, #1
    B loc_341E8
loc_341A8:
    LDR R3, [R7,#0x48+var_48]
    CMP R3, #0
    BEQ loc_341B6
loc_341AE:
    LDR R3, [R7,#0x48+var_48]
    LDR R2, [R7,#0x48+var_30]
    STR R2, [R3]
    B loc_341BC
loc_341B6:
    LDR R0, [R7,#0x48+var_30]
    BL sub_1B788
loc_341BC:
    LDR R0, [R7,#0x48+stream]
    BLX fclose
    MOV R1, #aAes256Cbc
    LDR R0, [R7,#0x48+s1]
    BLX strcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_341DC
loc_341D6:
    MOVS R3, #1
    STR R3, [R7,#0x48+var_3C]
    B loc_341E0
loc_341DC:
    MOVS R3, #0
    STR R3, [R7,#0x48+var_3C]
loc_341E0:
    LDR R0, [R7,#0x48+s1]
    BL sub_1B788
    LDR R3, [R7,#0x48+var_3C]
loc_341E8:
    MOV R0, R3
    MOV R3, #0x5F758
    LDR R2, [R7,#0x48+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_341FE
loc_341FA:
    BLX __stack_chk_fail
loc_341FE:
    ADDS R7, #0x48
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Extracts the integer part from the result of a bitwise AND operation with a mask",
    "Using the 'BX LR' instruction to load the result of the bitwise AND operation into the 'BX' register",
    "The 'BX LR' instruction is used to load the result of the bitwise AND operation into the 'BX' register",
    "This allows for the extraction of the integer part from the result of the bitwise AND operation"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
fdopen:
loc_110D8:
    ADR R12, 0x110E0
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(fdopen_ptr - 0x5E0E0)]!
```
Output:- **SHA_Bytes**: Contains the SHA-1 hash calculation logic, which is essential for generating secure hashes.
- **SHA_Bytes**: Includes the necessary data structures and functions for hashing.
- **SHA_Bytes**: Contains the main loop that performs the actual hashing operation.
- **SHA_Bytes**: Includes the necessary data structures and functions for handling memory operations.
- **SHA_Bytes**: Contains the necessary data structures and functions for error handling.
- **SHA_Bytes**: Includes the necessary data structures and functions for stack checking.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Includes the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **SHA_Bytes**: Contains the necessary data structures and functions for the stack overflow check.
- **[
    "Load and compare byte at R1",
    "Push R4 and LR",
    "Move R4 to R1",
    "Load R3 from memory at R1",
    "Compare R3 with 0x77",
    "Branch if not 0x77",
    "Jump to open",
    "Branch if not 0",
    "Load R0 from memory at R0",
    "Pop W R4 and LR",
    "Branch if R0 is 0",
    "Branch to j_fdopen",
    "Load R1 from memory at R0",
    "Pop W R4 and LR",
    "Branch if R1 is 0",
    "Move R1 to R4",
    "Pop W R4 and PC",
    "Move W R3 to R1",
    "Move W R1 to R3",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2 to R0",
    "Move W R2 to R0",
    "Move W R3 to R0",
    "Move W R3 to R0",
    "Move W R1 to R0",
    "Move W R1 to R0",
    "Move W R0 to R4",
    "Move W R0 to R4",
    "Move W R2
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
import_ssh2:
loc_151B4:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_4]
    STR R1, [R7,#0x10+var_8]
    STR R2, [R7,#0x10+var_C]
    STR R3, [R7,#0x10+var_10]
    LDR R3, [R7,#0x10+var_8]
    CMP R3, #5
    BNE loc_151D6
loc_151C8:
    LDR R2, [R7,#0x10+var_10]
    LDR R1, [R7,#0x10+var_C]
    LDR R0, [R7,#0x10+var_4]
    BL sub_15D00
    MOV R3, R0
    B loc_15200
loc_151D6:
    LDR R3, [R7,#0x10+var_8]
    CMP R3, #6
    BNE loc_151EA
loc_151DC:
    LDR R2, [R7,#0x10+var_10]
    LDR R1, [R7,#0x10+var_C]
    LDR R0, [R7,#0x10+var_4]
    BL sub_17EC4
    MOV R3, R0
    B loc_15200
loc_151EA:
    LDR R3, [R7,#0x10+var_8]
    CMP R3, #7
    BNE loc_151FE
loc_151F0:
    LDR R2, [R7,#0x10+var_10]
    LDR R1, [R7,#0x10+var_C]
    LDR R0, [R7,#0x10+var_4]
    BL sub_18FCC
    MOV R3, R0
    B loc_15200
loc_151FE:
    MOVS R3, #0
loc_15200:
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Load nullsub_5 and sub_116D4",
    "Load sub_38A04",
    "Call __libc_start_main",
    "Call abort"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ecp_double:
loc_2C048:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #8
    STR R0, [R7,#8+var_4]
    STR R1, [R7,#8+var_8]
    LDR R3, [R7,#8+var_4]
    LDRB R3, [R3,#0x10]
    CMP R3, #0
    BEQ loc_2C070
loc_2C05A:
    LDR R3, [R7,#8+var_4]
    LDR R0, [R3]
    MOVS R3, #1
    STR R3, [SP,#0x10+var_10]
    MOVS R3, #0
    MOVS R2, #0
    MOVS R1, #0
    BL sub_2B758
    MOV R3, R0
    B loc_2C0A6
loc_2C070:
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #2
    BNE loc_2C088
loc_2C07A:
    LDR R2, [R7,#8+var_8]
    LDR R1, [R7,#8+var_4]
    LDR R0, [R7,#8+var_4]
    BL sub_2C6F4
    MOV R3, R0
    B loc_2C0A6
loc_2C088:
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_2C09E
loc_2C092:
    LDR R1, [R7,#8+var_8]
    LDR R0, [R7,#8+var_4]
    BL sub_2BBC4
    MOV R3, R0
    B loc_2C0A6
loc_2C09E:
    LDR R0, [R7,#8+var_4]
    BL sub_2BEC0
    MOV R3, R0
loc_2C0A6:
    MOV R0, R3
    ADDS R7, #8
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Hashes input data using HMAC-SHA-1 algorithm",
    "Extracts hash value from the output",
    "Parameters: argument_0 (input data), argument_4 (hash length)"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
des_cbc3_decrypt:
loc_286CC:
    PUSH {R7,LR}
    SUB SP, SP, #0x30
    ADD R7, SP, #0
    STR R0, [R7,#0x30+var_24]
    STR R1, [R7,#0x30+var_28]
    STR R2, [R7,#0x30+var_2C]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_4]
    LDR R3, [R7,#0x30+var_28]
    AND.W R3, R3, #7
    CMP R3, #0
    BEQ loc_2870E
loc_286EE:
    MOV R3, #aDesCbc3Decrypt
    MOVW R2, #0x2BD
    MOV R1, #aSshdesC
    MOV R0, #aLen70_0
    BLX __assert_fail
loc_2870E:
    LDR R3, [R7,#0x30+var_2C]
    LDR.W R3, [R3,#0x80]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_2C]
    LDR.W R3, [R3,#0x84]
    STR R3, [R7,#0x30+var_1C]
    MOVS R3, #0
    STR R3, [R7,#0x30+var_18]
    B loc_2881C
loc_28724:
    LDR R3, [R7,#0x30+var_24]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_14]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #7
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_10]
    LDR R3, [R7,#0x30+var_2C]
    ADD.W R3, R3, #0x110
    ADD.W R0, R7, #0x24
    LDR R2, [R7,#0x30+var_10]
    LDR R1, [R7,#0x30+var_14]
    BL sub_27268
    LDR R1, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_8]
    LDR R3, [R7,#0x30+var_2C]
    ADDS R3, #0x88
    ADD.W R0, R7, #0x24
    BL sub_262B8
    LDR R1, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_8]
    ADD.W R0, R7, #0x24
    LDR R3, [R7,#0x30+var_2C]
    BL sub_27268
    LDR R3, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_20]
    EORS R3, R2
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_8]
    LDR R2, [R7,#0x30+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_20]
    LSRS R3, R3, #0x18
    UXTB R2, R3
    LDR R3, [R7,#0x30+var_24]
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDR R2, [R7,#0x30+var_20]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDR R2, [R7,#0x30+var_20]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #3
    LDR R2, [R7,#0x30+var_20]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x18
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #7
    LDR R2, [R7,#0x30+var_1C]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_24]
    LDR R3, [R7,#0x30+var_14]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_10]
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_18]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_18]
loc_2881C:
    LDR R2, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_28]
    CMP R2, R3
    BCC.W loc_28724
loc_28826:
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_20]
    STR.W R2, [R3,#0x80]
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_1C]
    STR.W R2, [R3,#0x84]
    NOP 
    MOV R3, #0x5F758
    LDR R2, [R7,#0x30+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_2884C
loc_28848:
    BLX __stack_chk_fail
loc_2884C:
    ADDS R7, #0x30
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Retrieve the error message associated with the last system call",
    "This function is used to get a human-readable description of the last system call error."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
__imp_strerror:
loc_5FE84:
    IMPORT 
```
Output:```json
[
    "Adds 8 bytes from `var_24` to `var_38`",
    "Moves the value 0 into `SP`",
    "Pops the stack frame and returns"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
openssh_pem_write:
loc_167F8:
    PUSH {R4,R5,R7,LR}
    SUB SP, SP, #0x190
    ADD R7, SP, #0
    ADD.W R3, R7, #0xC
    STR R0, [R3]
    ADD.W R3, R7, #8
    STR R1, [R3]
    ADDS R3, R7, #4
    STR R2, [R3]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR.W R3, [R7,#0x190+var_4]
    ADD.W R3, R7, #0x1C
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x40
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3,#0xC]
    ADD.W R2, R7, #8
    LDR R2, [R2]
    LDR R2, [R2,#4]
    ADD.W R4, R7, #0x44
    ADD.W R1, R7, #0x10
    MOV R0, R2
    BLX R3
    STR R0, [R4]
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    ADD.W R2, R7, #8
    LDR R2, [R2]
    LDR R2, [R2,#4]
    ADD.W R4, R7, #0x48
    ADD.W R1, R7, #0x14
    MOV R0, R2
    BLX R3
    STR R0, [R4]
    ADD.W R3, R7, #0x20
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x18
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    STR R2, [R3]
    ADD.W R3, R7, #0x20
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x30
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R2, [R3]
    MOV R3, #0x4CB2C
    CMP R2, R3
    BEQ loc_168BA
loc_168A4:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R2, [R3]
    MOV R3, #0x484C0
    CMP R2, R3
    BNE.W loc_170D8
loc_168BA:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R2, [R3]
    MOV R3, #0x4CB2C
    CMP R2, R3
    BNE.W loc_16D26
loc_168D0:
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    ADDS R2, R3, #4
    ADD.W R3, R7, #0x58
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x10
    LDR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x84
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x58
    ADD.W R2, R7, #0x58
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x10
    LDR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x7C
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x58
    ADD.W R2, R7, #0x58
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    ADD.W R2, R7, #0x48
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x14
    LDR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x8C
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x58
    ADD.W R2, R7, #0x58
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    ADD.W R2, R7, #0x48
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x14
    LDR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x94
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x58
    ADD.W R2, R7, #0x58
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    ADD.W R2, R7, #0x48
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x14
    LDR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x9C
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x58
    ADD.W R2, R7, #0x58
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    ADD.W R2, R7, #0x48
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x14
    LDR R2, [R3]
    ADD.W R3, R7, #0x58
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0xA4
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x58
    ADD.W R2, R7, #0x58
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x84
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_16A68
loc_16A60:
    LDR.W R3, [R7,#0x190+var_EC]
    CMP R3, #0
    BNE loc_16A88
loc_16A68:
    MOV R3, #aOpensshPemWrit
    MOVW R2, #0x3D3
    MOV R1, #aImportC
    MOV R0, #aEStartIqmpStar
    BLX __assert_fail
loc_16A88:
    ADD.W R3, R7, #0x8C
    LDR R2, [R3]
    ADD.W R3, R7, #0x8C
    LDR R3, [R3,#4]
    ADD.W R4, R7, #0x5C
    MOV R1, R3
    MOV R0, R2
    BL sub_24B64
    STR R0, [R4]
    LDR.W R3, [R7,#0x190+var_FC]
    LDR.W R2, [R7,#0x190+var_F8]
    ADD.W R4, R7, #0x60
    MOV R1, R2
    MOV R0, R3
    BL sub_24B64
    STR R0, [R4]
    LDR.W R3, [R7,#0x190+var_F4]
    LDR.W R2, [R7,#0x190+var_F0]
    ADD.W R4, R7, #0x64
    MOV R1, R2
    MOV R0, R3
    BL sub_24B64
    STR R0, [R4]
    ADD.W R3, R7, #0x60
    LDR R0, [R3]
    BL sub_24B10
    ADD.W R3, R7, #0x64
    LDR R0, [R3]
    BL sub_24B10
    ADD.W R4, R7, #0x68
    ADD.W R2, R7, #0x60
    ADD.W R3, R7, #0x5C
    LDR R1, [R2]
    LDR R0, [R3]
    BL sub_25BDC
    STR R0, [R4]
    ADD.W R4, R7, #0x6C
    ADD.W R2, R7, #0x64
    ADD.W R3, R7, #0x5C
    LDR R1, [R2]
    LDR R0, [R3]
    BL sub_25BDC
    STR R0, [R4]
    ADD.W R3, R7, #0x5C
    LDR R0, [R3]
    BL sub_22C50
    ADD.W R3, R7, #0x60
    LDR R0, [R3]
    BL sub_22C50
    ADD.W R3, R7, #0x64
    LDR R0, [R3]
    BL sub_22C50
    ADD.W R3, R7, #0x68
    LDR R0, [R3]
    BL sub_24F44
    MOV R3, R0
    ADDS R3, #8
    ADDS R2, R3, #7
    CMP R3, #0
    ITE 
    MOVLT R3, R2
    MOVGE R3, R3
    ASRS R3, R3, #3
    STR.W R3, [R7,#0x190+var_E0]
    ADD.W R3, R7, #0x6C
    LDR R0, [R3]
    BL sub_24F44
    MOV R3, R0
    ADDS R3, #8
    ADDS R2, R3, #7
    CMP R3, #0
    ITE 
    MOVLT R3, R2
    MOVGE R3, R3
    ASRS R3, R3, #3
    STR.W R3, [R7,#0x190+var_D8]
    LDR.W R1, [R7,#0x190+var_E0]
    LDR.W R2, [R7,#0x190+var_D8]
    ADD.W R3, R7, #0x1C
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x1C
    LDR R3, [R3]
    ADD.W R4, R7, #0x18
    MOVS R1, #1
    MOV R0, R3
    BL sub_1B638
    STR R0, [R4]
    ADD.W R3, R7, #0x18
    LDR R3, [R3]
    STR.W R3, [R7,#0x190+var_E4]
    LDR.W R3, [R7,#0x190+var_E0]
    MOV R2, R3
    ADD.W R3, R7, #0x18
    LDR R3, [R3]
    ADD R3, R2
    STR.W R3, [R7,#0x190+n]
    ADD.W R3, R7, #0x34
    MOVS R2, #0
    STR R2, [R3]
    B loc_16BEE
loc_16BB2:
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    ADD.W R2, R7, #0x18
    LDR R2, [R2]
    ADDS R4, R2, R3
    LDR.W R3, [R7,#0x190+var_E0]
    SUBS R2, R3, #1
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    SUBS R2, R2, R3
    ADD.W R3, R7, #0x68
    MOV R1, R2
    LDR R0, [R3]
    BL sub_24FF8
    MOV R3, R0
    UXTB R3, R3
    STRB R3, [R4]
    ADD.W R3, R7, #0x34
    ADD.W R2, R7, #0x34
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
loc_16BEE:
    LDR.W R2, [R7,#0x190+var_E0]
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    CMP R2, R3
    BGT loc_16BB2
loc_16BFC:
    ADD.W R3, R7, #0x34
    MOVS R2, #0
    STR R2, [R3]
    B loc_16C4A
loc_16C06:
    LDR.W R2, [R7,#0x190+var_E0]
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    ADD R3, R2
    MOV R2, R3
    ADD.W R3, R7, #0x18
    LDR R3, [R3]
    ADDS R4, R3, R2
    LDR.W R3, [R7,#0x190+var_D8]
    SUBS R2, R3, #1
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    SUBS R2, R2, R3
    ADD.W R3, R7, #0x6C
    MOV R1, R2
    LDR R0, [R3]
    BL sub_24FF8
    MOV R3, R0
    UXTB R3, R3
    STRB R3, [R4]
    ADD.W R3, R7, #0x34
    ADD.W R2, R7, #0x34
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
loc_16C4A:
    LDR.W R2, [R7,#0x190+var_D8]
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    CMP R2, R3
    BGT loc_16C06
loc_16C58:
    ADD.W R3, R7, #0x68
    LDR R0, [R3]
    BL sub_22C50
    ADD.W R3, R7, #0x6C
    LDR R0, [R3]
    BL sub_22C50
    ADD.W R3, R7, #0x160
    STR.W R3, [R7,#0x190+var_D4]
    MOVS R3, #1
    STR.W R3, [R7,#0x190+var_D0]
    MOVS R3, #0
    STRB.W R3, [R7,#0x190+var_30]
    ADD.W R2, R7, #0x7C
    ADD.W R3, R7, #0xC4
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R2, R7, #0x84
    ADD.W R3, R7, #0xCC
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R2, R7, #0x8C
    ADD.W R3, R7, #0xD4
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xDC
    ADD.W R2, R7, #0x94
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xE4
    ADD.W R2, R7, #0x9C
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xEC
    ADD.W R2, R7, #0xAC
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xF4
    ADD.W R2, R7, #0xB4
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xFC
    ADD.W R2, R7, #0xA4
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0x28
    MOVS R2, #9
    STR R2, [R3]
    ADD.W R2, R7, #0x38
    MOV R3, #0x43258
    STR R3, [R2]
    ADD.W R2, R7, #0x3C
    MOV R3, #0x4327C
    STR R3, [R2]
    B loc_16F2E
loc_16D26:
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    ADDS R2, R3, #4
    ADD.W R3, R7, #0x70
    STR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x10
    LDR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x94
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x70
    ADD.W R2, R7, #0x70
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x10
    LDR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x9C
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x70
    ADD.W R2, R7, #0x70
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x10
    LDR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0xA4
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x70
    ADD.W R2, R7, #0x70
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    ADD.W R2, R7, #0x44
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x10
    LDR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0xAC
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x70
    ADD.W R2, R7, #0x70
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x70
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    ADD.W R2, R7, #0x48
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x14
    LDR R2, [R3]
    ADD.W R3, R7, #0x70
    LDR R3, [R3]
    SUBS R3, R2, R3
    ADD.W R2, R7, #0xB4
    MOV R1, R3
    BL sub_156CC
    MOV R1, R0
    ADD.W R3, R7, #0x70
    ADD.W R2, R7, #0x70
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    LDR.W R3, [R7,#0x190+var_E4]
    CMP R3, #0
    BEQ loc_16E86
loc_16E7E:
    LDR.W R3, [R7,#0x190+n]
    CMP R3, #0
    BNE loc_16EA6
loc_16E86:
    MOV R3, #aOpensshPemWrit
    MOVW R2, #0x40B
    MOV R1, #aImportC
    MOV R0, #aYStartXStart
    BLX __assert_fail
loc_16EA6:
    ADD.W R3, R7, #0x160
    STR.W R3, [R7,#0x190+var_D4]
    MOVS R3, #1
    STR.W R3, [R7,#0x190+var_D0]
    MOVS R3, #0
    STRB.W R3, [R7,#0x190+var_30]
    ADD.W R3, R7, #0xC4
    ADD.W R2, R7, #0x94
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xCC
    ADD.W R2, R7, #0x9C
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xD4
    ADD.W R2, R7, #0xA4
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xDC
    ADD.W R2, R7, #0xAC
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0xE4
    ADD.W R2, R7, #0xB4
    LDM.W R2, {R0,R1}
    STM.W R3, {R0,R1}
    ADD.W R3, R7, #0x28
    MOVS R2, #6
    STR R2, [R3]
    ADD.W R2, R7, #0x38
    MOV R3, #0x432B0
    STR R3, [R2]
    ADD.W R2, R7, #0x3C
    MOV R3, #0x432D4
    STR R3, [R2]
loc_16F2E:
    ADD.W R3, R7, #0x30
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x34
    MOVS R2, #0
    STR R2, [R3]
    B loc_16F9A
loc_16F40:
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    LSLS R3, R3, #3
    ADD.W R2, R7, #0x190
    ADD R3, R2
    LDR.W R2, [R3,#-0xD0]
    MOVS R3, #0
    MOVS R1, #2
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    LSLS R3, R3, #3
    ADD.W R2, R7, #0x190
    ADD R3, R2
    LDR.W R1, [R3,#-0xD0]
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x34
    ADD.W R2, R7, #0x34
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
loc_16F9A:
    ADD.W R2, R7, #0x34
    ADD.W R3, R7, #0x28
    LDR R2, [R2]
    LDR R3, [R3]
    CMP R2, R3
    BLT loc_16F40
loc_16FAA:
    ADD.W R3, R7, #0x54
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    STR R2, [R3]
    ADD.W R2, R7, #0x54
    MOVS R3, #0x20
    LDR R2, [R2]
    MOVS R1, #0x10
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x30
    LDR R3, [R3]
    ADD.W R4, R7, #0x20
    MOVS R1, #1
    MOV R0, R3
    BL sub_1B638
    STR R0, [R4]
    ADD.W R3, R7, #0x2C
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R2, R7, #0x54
    MOVS R3, #0x20
    LDR R2, [R2]
    MOVS R1, #0x10
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x34
    MOVS R2, #0
    STR R2, [R3]
    B loc_170C6
loc_17028:
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    LSLS R3, R3, #3
    ADD.W R2, R7, #0x190
    ADD R3, R2
    LDR.W R2, [R3,#-0xD0]
    MOVS R3, #0
    MOVS R1, #2
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    LSLS R3, R3, #3
    ADD.W R2, R7, #0x190
    ADD R3, R2
    LDR.W R1, [R3,#-0xD4]
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    LSLS R3, R3, #3
    ADD.W R2, R7, #0x190
    ADD R3, R2
    LDR.W R3, [R3,#-0xD0]
    MOV R2, R3
    BLX memcpy
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    LSLS R3, R3, #3
    ADD.W R2, R7, #0x190
    ADD R3, R2
    LDR.W R1, [R3,#-0xD0]
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x34
    ADD.W R2, R7, #0x34
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
loc_170C6:
    ADD.W R2, R7, #0x34
    ADD.W R3, R7, #0x28
    LDR R2, [R2]
    LDR R3, [R3]
    CMP R2, R3
    BLT loc_17028
loc_170D6:
    B loc_1755C
loc_170D8:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R2, [R3]
    MOV R3, #0x486E0
    CMP R2, R3
    BEQ loc_17116
loc_170EC:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R2, [R3]
    MOV R3, #0x48748
    CMP R2, R3
    BEQ loc_17116
loc_17100:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R2, [R3]
    MOV R3, #0x487B0
    CMP R2, R3
    BNE.W loc_1753C
loc_17116:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R3, [R3]
    ADD.W R4, R7, #0x4C
    ADD.W R2, R7, #0xB4
    MOV R1, R2
    MOV R0, R3
    BL sub_2FA24
    STR R0, [R4]
    ADD.W R3, R7, #8
    LDR R3, [R3]
    LDR R3, [R3,#4]
    LDR R3, [R3,#4]
    LDR R3, [R3,#0xC]
    ADDS R3, #7
    LSRS R3, R3, #3
    LSLS R2, R3, #1
    ADD.W R3, R7, #0x50
    STR R2, [R3]
    ADD.W R4, R7, #0x30
    MOVS R3, #0
    MOVS R2, #1
    MOVS R1, #2
    MOVS R0, #0
    BL sub_153F0
    STR R0, [R4]
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
    ADD.W R3, R7, #0x14
    LDR R3, [R3]
    SUBS R2, R3, #4
    MOVS R3, #0
    MOVS R1, #4
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x14
    LDR R3, [R3]
    SUBS R1, R3, #4
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    LDR.W R2, [R7,#0x190+n]
    MOVS R3, #0
    MOVS R1, #6
    MOVS R0, #0
    BL sub_153F0
    MOV R2, R0
    LDR.W R3, [R7,#0x190+n]
    ADD R2, R3
    MOVS R3, #0xA0
    MOVS R1, #0
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    LDR.W R2, [R7,#0x190+n]
    MOVS R3, #0
    MOVS R1, #6
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    LDR.W R2, [R7,#0x190+n]
    ADD.W R3, R7, #0x30
    ADD.W R1, R7, #0x30
    LDR R1, [R1]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R4, R3, #2
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R2, R3, #2
    MOVS R3, #0
    MOVS R1, #3
    MOVS R0, #0
    BL sub_153F0
    MOV R3, R0
    ADDS R2, R4, R3
    MOVS R3, #0xA0
    MOVS R1, #1
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R2, R3, #2
    MOVS R3, #0
    MOVS R1, #3
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R1, R3, #2
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x54
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    STR R2, [R3]
    ADD.W R2, R7, #0x54
    MOVS R3, #0x20
    LDR R2, [R2]
    MOVS R1, #0x10
    MOVS R0, #0
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x30
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x30
    LDR R3, [R3]
    ADD.W R4, R7, #0x20
    MOVS R1, #1
    MOV R0, R3
    BL sub_1B638
    STR R0, [R4]
    ADD.W R3, R7, #0x20
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_172DA
loc_172BA:
    MOV R3, #aOpensshPemWrit
    MOVW R2, #0x45D
    MOV R1, #aImportC
    MOV R0, #aOutblob
    BLX __assert_fail
loc_172DA:
    ADD.W R3, R7, #0x2C
    MOVS R2, #0
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R2, R7, #0x54
    MOVS R3, #0x20
    LDR R2, [R2]
    MOVS R1, #0x10
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    MOVS R3, #0
    MOVS R2, #1
    MOVS R1, #2
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x2C
    ADDS R1, R3, #1
    STR R1, [R2]
    MOV R2, R3
    ADD.W R3, R7, #0x20
    LDR R3, [R3]
    ADD R3, R2
    MOVS R2, #1
    STRB R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x14
    LDR R3, [R3]
    SUBS R2, R3, #4
    MOVS R3, #0
    MOVS R1, #4
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x48
    LDR R3, [R3]
    ADDS R1, R3, #4
    ADD.W R3, R7, #0x14
    LDR R3, [R3]
    SUBS R3, #4
    MOV R2, R3
    BLX memcpy
    ADD.W R3, R7, #0x14
    LDR R3, [R3]
    SUBS R1, R3, #4
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R4, R2, R3
    LDR.W R2, [R7,#0x190+n]
    MOVS R3, #0
    MOVS R1, #6
    MOVS R0, #0
    BL sub_153F0
    MOV R2, R0
    LDR.W R3, [R7,#0x190+n]
    ADD R2, R3
    MOVS R3, #0xA0
    MOVS R1, #0
    MOV R0, R4
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    LDR.W R2, [R7,#0x190+n]
    MOVS R3, #0
    MOVS R1, #6
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    LDR.W R3, [R7,#0x190+n]
    MOV R2, R3
    ADD.W R3, R7, #0x4C
    LDR R1, [R3]
    BLX memcpy
    LDR.W R2, [R7,#0x190+n]
    ADD.W R3, R7, #0x2C
    ADD.W R1, R7, #0x2C
    LDR R1, [R1]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R5, R2, R3
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R4, R3, #2
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R2, R3, #2
    MOVS R3, #0
    MOVS R1, #3
    MOVS R0, #0
    BL sub_153F0
    MOV R3, R0
    ADDS R2, R4, R3
    MOVS R3, #0xA0
    MOVS R1, #1
    MOV R0, R5
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R2, R3, #2
    MOVS R3, #0
    MOVS R1, #3
    BL sub_153F0
    MOV R1, R0
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x2C
    ADDS R1, R3, #1
    STR R1, [R2]
    MOV R2, R3
    ADD.W R3, R7, #0x20
    LDR R3, [R3]
    ADD R3, R2
    MOVS R2, #0
    STRB R2, [R3]
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x20
    LDR R2, [R2]
    ADDS R0, R2, R3
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    ADD.W R1, R3, #0x27
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R3, #1
    MOV R2, R3
    BLX memcpy
    ADD.W R3, R7, #0x50
    LDR R3, [R3]
    ADDS R1, R3, #1
    ADD.W R3, R7, #0x2C
    ADD.W R2, R7, #0x2C
    LDR R2, [R2]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R2, R7, #0x38
    MOV R3, #0x432FC
    STR R3, [R2]
    ADD.W R2, R7, #0x3C
    MOV R3, #0x4331C
    STR R3, [R2]
    B loc_1755C
loc_1753C:
    MOV R3, #aOpensshPemWrit
    MOVW R2, #0x477
    MOV R1, #aImportC
    MOV R0, #a0_0
    BLX __assert_fail
loc_1755C:
    ADDS R3, R7, #4
    LDR R3, [R3]
    CMP R3, #0
    BEQ.W loc_17738
loc_17566:
    ADD.W R3, R7, #0x30
    LDR R3, [R3]
    ADD.W R2, R3, #8
    ADD.W R3, R7, #0x24
    BIC.W R2, R2, #7
    STR R2, [R3]
    ADD.W R3, R7, #0x24
    LDR R3, [R3]
    ADD.W R4, R7, #0x74
    MOVS R1, #1
    MOV R0, R3
    BL sub_1B638
    STR R0, [R4]
    ADD.W R3, R7, #0x30
    LDR R2, [R3]
    ADD.W R1, R7, #0x20
    ADD.W R3, R7, #0x74
    LDR R1, [R1]
    LDR R0, [R3]
    BLX memcpy
    ADD.W R3, R7, #0x30
    LDR R2, [R3]
    ADD.W R3, R7, #0x20
    MOV R1, R2
    LDR R0, [R3]
    BL sub_1B824
    ADD.W R3, R7, #0x20
    LDR R0, [R3]
    BL sub_1B788
    ADD.W R3, R7, #0x20
    ADD.W R2, R7, #0x74
    LDR R2, [R2]
    STR R2, [R3]
    ADD.W R2, R7, #0x2C
    ADD.W R3, R7, #0x30
    LDR R2, [R2]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_1762A
loc_175DC:
    MOV R3, #aOpensshPemWrit
    MOVW R2, #0x4A3
    MOV R1, #aImportC
    MOV R0, #aPosLen
    BLX __assert_fail
loc_175FC:
    ADD.W R3, R7, #0x2C
    LDR R3, [R3]
    ADD.W R2, R7, #0x2C
    ADDS R1, R3, #1
    STR R1, [R2]
    MOV R2, R3
    ADD.W R3, R7, #0x20
    LDR R3, [R3]
    ADD R3, R2
    ADD.W R2, R7, #0x24
    LDR R2, [R2]
    UXTB R1, R2
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    UXTB R2, R2
    SUBS R2, R1, R2
    UXTB R2, R2
    STRB R2, [R3]
loc_1762A:
    ADD.W R2, R7, #0x2C
    ADD.W R3, R7, #0x24
    LDR R2, [R2]
    LDR R3, [R3]
    CMP R2, R3
    BLT loc_175FC
loc_1763A:
    ADD.W R3, R7, #0x34
    MOVS R2, #0
    STR R2, [R3]
    B loc_1766A
loc_17644:
    BL sub_3584C
    MOV R3, R0
    UXTB R1, R3
    ADD.W R2, R7, #0x164
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    ADD R3, R2
    MOV R2, R1
    STRB R2, [R3]
    ADD.W R3, R7, #0x34
    ADD.W R2, R7, #0x34
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
loc_1766A:
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    CMP R3, #7
    BLE loc_17644
loc_17674:
    ADD.W R3, R7, #0x104
    MOV R0, R3
    BL sub_30844
    ADDS R3, R7, #4
    LDR R0, [R3]
    BLX strlen
    MOV R2, R0
    ADDS R3, R7, #4
    ADD.W R0, R7, #0x104
    LDR R1, [R3]
    BL sub_30870
    ADD.W R1, R7, #0x164
    ADD.W R3, R7, #0x104
    MOVS R2, #8
    MOV R0, R3
    BL sub_30870
    ADD.W R2, R7, #0x104
    ADD.W R3, R7, #0x16C
    MOV R1, R2
    MOV R0, R3
    BL sub_309D0
    ADD.W R3, R7, #0x104
    MOV R0, R3
    BL sub_30844
    ADD.W R1, R7, #0x16C
    ADD.W R3, R7, #0x104
    MOVS R2, #0x10
    MOV R0, R3
    BL sub_30870
    ADDS R3, R7, #4
    LDR R0, [R3]
    BLX strlen
    MOV R2, R0
    ADDS R3, R7, #4
    ADD.W R0, R7, #0x104
    LDR R1, [R3]
    BL sub_30870
    ADD.W R1, R7, #0x164
    ADD.W R3, R7, #0x104
    MOVS R2, #8
    MOV R0, R3
    BL sub_30870
    ADD.W R3, R7, #0x16C
    ADDS R3, #0x10
    ADD.W R2, R7, #0x104
    MOV R1, R2
    MOV R0, R3
    BL sub_309D0
    ADD.W R3, R7, #0x24
    ADD.W R2, R7, #0x20
    ADD.W R1, R7, #0x164
    ADD.W R0, R7, #0x16C
    LDR R3, [R3]
    LDR R2, [R2]
    BL sub_2934C
    ADD.W R3, R7, #0x104
    MOVS R1, #0x5C
    MOV R0, R3
    BL sub_1B824
    ADD.W R3, R7, #0x16C
    MOVS R1, #0x20
    MOV R0, R3
    BL sub_1B824
    B loc_17744
loc_17738:
    ADD.W R3, R7, #0x24
    ADD.W R2, R7, #0x30
    LDR R2, [R2]
    STR R2, [R3]
loc_17744:
    ADD.W R4, R7, #0x78
    ADD.W R3, R7, #0xC
    MOVS R2, #1
    MOV R1, #0x4334C
    LDR R0, [R3]
    BL sub_3FEB0
    STR R0, [R4]
    ADD.W R3, R7, #0x78
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_1782C
loc_17768:
    ADD.W R2, R7, #0x78
    ADD.W R3, R7, #0x38
    LDR R1, [R2]
    LDR R0, [R3]
    BLX fputs
    ADDS R3, R7, #4
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_177F0
loc_17780:
    ADD.W R3, R7, #0x78
    LDR R3, [R3]
    MOVS R2, #0x2E
    MOVS R1, #1
    MOV R0, #aProcType4Encry
    BLX fwrite
    ADD.W R3, R7, #0x34
    MOVS R2, #0
    STR R2, [R3]
    B loc_177D0
loc_177A0:
    ADD.W R2, R7, #0x164
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    ADD R3, R2
    LDRB R3, [R3]
    MOV R2, R3
    ADD.W R3, R7, #0x78
    MOV R1, #a02x
    LDR R0, [R3]
    BLX fprintf
    ADD.W R3, R7, #0x34
    ADD.W R2, R7, #0x34
    LDR R2, [R2]
    ADDS R2, #1
    STR R2, [R3]
loc_177D0:
    ADD.W R3, R7, #0x34
    LDR R3, [R3]
    CMP R3, #7
    BLE loc_177A0
loc_177DA:
    ADD.W R3, R7, #0x78
    LDR R3, [R3]
    MOVS R2, #2
    MOVS R1, #1
    MOV R0, #asc_43388
    BLX fwrite
loc_177F0:
    ADD.W R2, R7, #0x24
    ADD.W R1, R7, #0x20
    ADD.W R0, R7, #0x78
    MOVS R3, #0x40
    LDR R2, [R2]
    LDR R1, [R1]
    LDR R0, [R0]
    BL sub_34230
    ADD.W R2, R7, #0x78
    ADD.W R3, R7, #0x3C
    LDR R1, [R2]
    LDR R0, [R3]
    BLX fputs
    ADD.W R3, R7, #0x78
    LDR R0, [R3]
    BLX fclose
    ADD.W R3, R7, #0x40
    MOVS R2, #1
    STR R2, [R3]
    B loc_1782E
loc_1782C:
    NOP 
loc_1782E:
    ADD.W R3, R7, #0x20
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_17854
loc_17838:
    ADD.W R3, R7, #0x24
    LDR R2, [R3]
    ADD.W R3, R7, #0x20
    MOV R1, R2
    LDR R0, [R3]
    BL sub_1B824
    ADD.W R3, R7, #0x20
    LDR R0, [R3]
    BL sub_1B788
loc_17854:
    ADD.W R3, R7, #0x18
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_1787A
loc_1785E:
    ADD.W R3, R7, #0x1C
    LDR R2, [R3]
    ADD.W R3, R7, #0x18
    MOV R1, R2
    LDR R0, [R3]
    BL sub_1B824
    ADD.W R3, R7, #0x18
    LDR R0, [R3]
    BL sub_1B788
loc_1787A:
    ADD.W R3, R7, #0x48
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_178A2
loc_17884:
    ADD.W R3, R7, #0x14
    LDR R3, [R3]
    MOV R2, R3
    ADD.W R3, R7, #0x48
    MOV R1, R2
    LDR R0, [R3]
    BL sub_1B824
    ADD.W R3, R7, #0x48
    LDR R0, [R3]
    BL sub_1B788
loc_178A2:
    ADD.W R3, R7, #0x44
    LDR R3, [R3]
    CMP R3, #0
    BEQ loc_178CA
loc_178AC:
    ADD.W R3, R7, #0x10
    LDR R3, [R3]
    MOV R2, R3
    ADD.W R3, R7, #0x44
    MOV R1, R2
    LDR R0, [R3]
    BL sub_1B824
    ADD.W R3, R7, #0x44
    LDR R0, [R3]
    BL sub_1B788
loc_178CA:
    ADD.W R3, R7, #0x40
    LDR R3, [R3]
    MOV R0, R3
    MOV R3, #0x5F758
    LDR.W R2, [R7,#0x190+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_178E8
loc_178E4:
    BLX __stack_chk_fail
loc_178E8:
    ADD.W R7, R7, #0x190
    MOV SP, R7
    POP {R4,R5,R7,PC}
```
Output:- blowfish_msb_decrypt_cbc: A function that decrypts a Blowfish message block using CBC mode.
- loc_220D0: The start of the function, where the stack pointer is set up.
- SUB SP, SP, #0x30: Adjusts the stack pointer to point to the start of the next block.
- ADD R7, SP, #0: Adds the current stack pointer to the variable `var_24`.
- STR R0, [R7,#0x30+var_24]: Copies the first 32 bytes of the message block into the variable `var_24`.
- STR R1, [R7,#0x30+var_28]: Copies the second 32 bytes of the message block into the variable `var_28`.
- STR R2, [R7,#0x30+var_2C]: Copies the third 32 bytes of the message block into the variable `var_2C`.
- MOV R3, #0x5F758: Sets the decryption key to 0x5F758.
- LDR R3, [R3]: Loads the decryption key into the register `R3`.
- STR R3, [R7,#0x30+var_4]: Copies the first 16 bytes of the decryption key into the variable `R3`.
- LDR R2, [R7,#0x30+var_1C]: Copies the second 16 bytes of the decryption key into the variable `R2`.
- ADDS R3, #1040: Adds 1040 to the decryption key.
- ADDS R3, #8: Adds 8 to the decryption key.
- LDR R3, [R7,#0x30+var_18]: Copies the third 16 bytes of the decryption key into the variable `R3`.
- ORRS R2, R3: Performs an OR operation on the decryption key with itself.
- LDR R2, [R7,#0x30+var_24]: Copies the first 32 bytes of the message block into the variable `R2`.
- ADDS R3, #2: Adds 2 to the decryption key.
- LDR R2, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R2`.
- EORS R3, R2: Performs an OR operation on the decryption key with itself.
- STR R3, [R7,#0x30+var_1C]: Copies the first 32 bytes of the message block into the variable `R3`.
- ADDS R3, #3: Adds 3 to the decryption key.
- LDR R2, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R2`.
- EORS R3, R2: Performs an OR operation on the decryption key with itself.
- STR R3, [R7,#0x30+var_1C]: Copies the first 32 bytes of the message block into the variable `R3`.
- ADDS R3, #4: Adds 4 to the decryption key.
- LDR R2, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R2`.
- EORS R3, R2: Performs an OR operation on the decryption key with itself.
- STR R3, [R7,#0x30+var_1C]: Copies the first 32 bytes of the message block into the variable `R3`.
- ADDS R3, #5: Adds 5 to the decryption key.
- LDR R2, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R2`.
- EORS R3, R2: Performs an OR operation on the decryption key with itself.
- STR R3, [R7,#0x30+var_1C]: Copies the first 32 bytes of the message block into the variable `R3`.
- ADDS R3, #6: Adds 6 to the decryption key.
- LDR R2, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R2`.
- EORS R3, R2: Performs an OR operation on the decryption key with itself.
- STR R3, [R7,#0x30+var_1C]: Copies the first 32 bytes of the message block into the variable `R3`.
- ADDS R3, #7: Adds 7 to the decryption key.
- LDR R2, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R2`.
- EORS R3, R2: Performs an OR operation on the decryption key with itself.
- STR R3, [R7,#0x30+var_14]: Copies the first 32 bytes of the message block into the variable `R3`.
- STR R3, [R7,#0x30+var_1C]: Copies the first 32 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_10]: Copies the first 32 bytes of the message block into the variable `R3`.
- STR R3, [R7,#0x30+var_18]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_24]: Copies the first 32 bytes of the message block into the variable `R3`.
- ADDS R3, #8: Adds 8 to the decryption key.
- STR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- SUBS R3, #8: Subtracts 8 from the decryption key.
- STR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- ADDS R3, #1: Adds 1 to the decryption key.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- STR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- ADDS R3, #2: Adds 2 to the decryption key.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- STR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- ADDS R3, #3: Adds 3 to the decryption key.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- ADDS R3, #4: Adds 4 to the decryption key.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- ADDS R3, #5: Adds 5 to the decryption key.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- ADDS R3, #6: Adds 6 to the decryption key.
- LDR R3, [R7,#0x30+var_28]: Copies the third 16 bytes of the message block into the variable `R3`.
- STR R3, [R7,#0x
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
sshcom_read_mpint:
loc_18E9C:
    PUSH {R7}
    SUB SP, SP, #0x24
    ADD R7, SP, #0
    STR R0, [R7,#0x24+var_18]
    STR R1, [R7,#0x24+var_1C]
    STR R2, [R7,#0x24+var_20]
    LDR R3, [R7,#0x24+var_18]
    STR R3, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_1C]
    CMP R3, #3
    BLE loc_18EFC
loc_18EB2:
    LDR R3, [R7,#0x24+var_10]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x24+var_10]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x24+var_10]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x24+var_10]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    ADDS R3, #7
    LSRS R3, R3, #3
    STR R3, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_8]
    ADDS R2, R3, #4
    LDR R3, [R7,#0x24+var_1C]
    CMP R2, R3
    BHI loc_18F00
loc_18EE8:
    LDR R3, [R7,#0x24+var_10]
    ADDS R2, R3, #4
    LDR R3, [R7,#0x24+var_20]
    STR R2, [R3]
    LDR R2, [R7,#0x24+var_8]
    LDR R3, [R7,#0x24+var_20]
    STR R2, [R3,#4]
    LDR R3, [R7,#0x24+var_8]
    ADDS R3, #4
    B loc_18F12
loc_18EFC:
    NOP 
    B loc_18F02
loc_18F00:
    NOP 
loc_18F02:
    LDR R3, [R7,#0x24+var_20]
    MOVS R2, #0
    STR R2, [R3]
    LDR R3, [R7,#0x24+var_20]
    MOV.W R2, #0xFFFFFFFF
    STR R2, [R3,#4]
    LDR R3, [R7,#0x24+var_1C]
loc_18F12:
    MOV R0, R3
    ADDS R7, #0x24
    MOV SP, R7
    POP.W {R7}
    BX LR
```
Output:[
    "Function: hmacsha256_start"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
key_type:
loc_35134:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_C]
    MOVS R2, #0
    MOV R1, #0x4C8A4
    LDR R0, [R7,#0x10+var_C]
    BL sub_3FEB0
    STR R0, [R7,#0x10+stream]
    LDR R3, [R7,#0x10+stream]
    CMP R3, #0
    BNE loc_35158
loc_35154:
    MOVS R3, #0
    B loc_35168
loc_35158:
    LDR R0, [R7,#0x10+stream]
    BL sub_34DEC
    STR R0, [R7,#0x10+var_4]
    LDR R0, [R7,#0x10+stream]
    BLX fclose
    LDR R3, [R7,#0x10+var_4]
loc_35168:
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:############
Binary: putty
Platform: arm
Optimization: 0
```assembly
freetree234:
loc_3D74C:
    PUSH {R7,LR}
    SUB SP, SP, #8
    ADD R7, SP, #0
    STR R0, [R7,#8+var_4]
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3]
    MOV R0, R3
    BL sub_3D704
    LDR R0, [R7,#8+var_4]
    BL sub_1B788
    NOP 
    ADDS R7, #8
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Pushing values to registers",
    "Subtracting from stack pointer",
    "Loading variables into registers",
    "Comparing values and jumping to appropriate function",
    "Loading data into registers",
    "Performing subtractions",
    "Jumping to the next function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
blowfish_ssh1_make_context:
loc_22984:
    PUSH {R7,LR}
    ADD R7, SP, #0
    MOVW R1, #0x1050
    MOVS R0, #2
    BL sub_1B638
    MOV R3, R0
    MOV R0, R3
    POP {R7,PC}
```
Output:[
    "des_cbc_decrypt",
    "loc_28374",
    "sub_27268",
    "LDR R3, [R7,#0x30+var_24]",
    "LDRB R3, [R3]",
    "LSLS R2, R3, #0x18",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #1",
    "LDRB R3, [R3]",
    "LSLS R3, R3, #0x10",
    "ORRS R2, R3",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #2",
    "LDRB R3, [R3]",
    "LSLS R3, R3, #8",
    "ORRS R3, R2",
    "LDR R2, [R7,#0x30+var_24]",
    "ADDS R2, #3",
    "LDRB R2, [R2]",
    "ORRS R3, R2",
    "STR R3, [R7,#0x30+var_14]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #4",
    "LDRB R3, [R3]",
    "LSLS R3, R3, #0x18",
    "UXTB R2, R3",
    "LDR R3, [R7,#0x30+var_24]",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #1",
    "LDR R2, [R7,#0x30+var_20]",
    "LSRS R2, R2, #0x10",
    "UXTB R2, R2",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #2",
    "LDR R2, [R7,#0x30+var_20]",
    "LSRS R2, R2, #8",
    "UXTB R2, R2",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #3",
    "LDR R2, [R7,#0x30+var_1C]",
    "LSRS R2, R2, #0x18",
    "UXTB R2, R2",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #5",
    "LDR R2, [R7,#0x30+var_1C]",
    "LSRS R2, R2, #0x10",
    "UXTB R2, R2",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #6",
    "LDR R2, [R7,#0x30+var_1C]",
    "LSRS R2, R2, #8",
    "UXTB R2, R2",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #7",
    "LDR R2, [R7,#0x30+var_1C]",
    "UXTB R2, R2",
    "STRB R2, [R3]",
    "LDR R3, [R7,#0x30+var_24]",
    "ADDS R3, #8",
    "STR R3, [R7,#0x30+var_24]",
    "LDR R3, [R7,#0x30+var_14]",
    "STR R3, [R7,#0x30+var_20]",
    "LDR R3, [R7,#0x30+var_10]",
    "STR R3, [R7,#0x30+var_1C]",
    "LDR R3, [R7,#0x30+var_18]",
    "ADDS R3, #8",
    "STR R3, [R7,#0x30+var_18]"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
freenode234:
loc_3D704:
    PUSH {R7,LR}
    SUB SP, SP, #8
    ADD R7, SP, #0
    STR R0, [R7,#8+var_4]
    LDR R3, [R7,#8+var_4]
    CMP R3, #0
    BEQ loc_3D742
loc_3D712:
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3,#4]
    MOV R0, R3
    BL sub_3D704
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3,#8]
    MOV R0, R3
    BL sub_3D704
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3,#0xC]
    MOV R0, R3
    BL sub_3D704
    LDR R3, [R7,#8+var_4]
    LDR R3, [R3,#0x10]
    MOV R0, R3
    BL sub_3D704
    LDR R0, [R7,#8+var_4]
    BL sub_1B788
    B loc_3D744
loc_3D742:
    NOP 
loc_3D744:
    ADDS R7, #8
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Extracts filenames from a file system",
    "Function `filename_free` performs two main operations:"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
internal_sub:
loc_22D60:
    PUSH {R4-R7}
    SUB SP, SP, #0x20
    ADD R7, SP, #0
    STR R0, [R7,#0x20+var_14]
    STR R1, [R7,#0x20+var_18]
    STR R2, [R7,#0x20+var_1C]
    STR R3, [R7,#0x20+var_20]
    MOVS R3, #1
    STR R3, [R7,#0x20+var_C]
    LDR R3, [R7,#0x20+var_20]
    SUBS R3, #1
    STR R3, [R7,#0x20+var_10]
    B loc_22DDC
loc_22D7A:
    LDR R3, [R7,#0x20+var_10]
    LSLS R3, R3, #2
    LDR R2, [R7,#0x20+var_14]
    ADD R3, R2
    LDR R3, [R3]
    MOV.W R4, #0
    STRD.W R3, R4, [R7,#0x20+var_8]
    LDR R3, [R7,#0x20+var_10]
    LSLS R3, R3, #2
    LDR R2, [R7,#0x20+var_18]
    ADD R3, R2
    LDR R3, [R3]
    MVNS R3, R3
    MOV.W R4, #0
    LDRD.W R1, R2, [R7,#0x20+var_8]
    ADDS R3, R3, R1
    ADC.W R4, R4, R2
    STRD.W R3, R4, [R7,#0x20+var_8]
    LDR R3, [R7,#0x20+var_C]
    MOV.W R4, #0
    LDRD.W R1, R2, [R7,#0x20+var_8]
    ADDS R3, R3, R1
    ADC.W R4, R4, R2
    STRD.W R3, R4, [R7,#0x20+var_8]
    LDR R3, [R7,#0x20+var_10]
    LSLS R3, R3, #2
    LDR R2, [R7,#0x20+var_1C]
    ADD R3, R2
    LDR R2, [R7,#0x20+var_8]
    STR R2, [R3]
    LDRD.W R3, R4, [R7,#0x20+var_8]
    MOVS R5, R4
    MOVS R6, #0
    MOV R3, R5
    STR R3, [R7,#0x20+var_C]
    LDR R3, [R7,#0x20+var_10]
    SUBS R3, #1
    STR R3, [R7,#0x20+var_10]
loc_22DDC:
    LDR R3, [R7,#0x20+var_10]
    CMP R3, #0
    BGE loc_22D7A
loc_22DE2:
    NOP 
    ADDS R7, #0x20
    MOV SP, R7
    POP {R4-R7}
    BX LR
```
Output:
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
new_prompts:
loc_1A9C8:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_C]
    MOVS R1, #0x24
    MOVS R0, #1
    BL sub_1B638
    STR R0, [R7,#0x10+var_4]
    LDR R3, [R7,#0x10+var_4]
    MOVS R2, #0
    STR R2, [R3,#0x18]
    LDR R3, [R7,#0x10+var_4]
    MOVS R2, #0
    STR R2, [R3,#0x14]
    LDR R3, [R7,#0x10+var_4]
    LDR R2, [R7,#0x10+var_C]
    STR R2, [R3,#0x1C]
    LDR R3, [R7,#0x10+var_4]
    MOVS R2, #0
    STR R2, [R3,#0x20]
    LDR R3, [R7,#0x10+var_4]
    MOVS R2, #1
    STR R2, [R3]
    LDR R3, [R7,#0x10+var_4]
    MOVS R2, #0
    STR R2, [R3,#0xC]
    LDR R3, [R7,#0x10+var_4]
    LDR R2, [R3,#0xC]
    LDR R3, [R7,#0x10+var_4]
    STR R2, [R3,#4]
    LDR R3, [R7,#0x10+var_4]
    MOVS R2, #0
    STR R2, [R3,#0x10]
    LDR R3, [R7,#0x10+var_4]
    LDR R2, [R3,#0x10]
    LDR R3, [R7,#0x10+var_4]
    STR R2, [R3,#8]
    LDR R3, [R7,#0x10+var_4]
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:```json
[
    "Extracts the length of a string from memory."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
bitsel:
loc_1D32C:
    PUSH {R4-R6}
    MOV R6, R0
    MOVS R0, #0
    B loc_1D368
loc_1D334:
    LDR.W R3, [R1],#4
    LSLS R0, R0, #1
    CMP R3, #0
    BLT loc_1D368
loc_1D33E:
    ADD.W R4, R3, #0x1F
    ANDS.W R4, R4, R3,ASR#32
    IT 
    MOVCC R4, R3
    ASRS R4, R4, #5
    NEGS R5, R3
    AND.W R3, R3, #0x1F
    AND.W R5, R5, #0x1F
    IT 
    NEGPL R3, R5
    LDR.W R4, [R6,R4,LSL#2]
    LSR.W R3, R4, R3
    AND.W R3, R3, #1
    ORRS R0, R3
loc_1D368:
    SUBS R2, #1
    CMP.W R2, #0xFFFFFFFF
    BNE loc_1D334
loc_1D370:
    POP {R4-R6}
    BX LR
```
Output:```json
[
    "Read setting from environment variables",
    "Initialize global variables",
    "Store Unix Uxstore C and ValNull in Gs:14h",
    "Check for assertions and stack overflow errors",
    "Handle failure cases"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__imp_open:
loc_4B8B0:
    IMPORT 
```
Output:[
    "Reads the arguments from the stack and performs a bitwise XOR operation on them",
    "Stores the result in the argument pointed to by `arg_4`",
    "Checks if the result is zero and sets the corresponding flags",
    "Subtracts the first argument from the second and adds the result to the stack",
    "Calls the `sub_804EBD9` function",
    "Subtracts the first argument from the second and adds the result to the stack",
    "Calls the `sub_804FCCE` function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
random_get_savedata:
loc_26D18:
    PUSH {R3-R7,LR}
    MOV R6, R0
    MOV R7, R1
    MOVS R1, #1
    MOV.W R0, #0x258
    BL sub_175D4
    MOV R4, R0
    BL sub_268DC
    MOV R3, #0x4B2C4
    LDR.W R1, [R3,#(dword_4B774 - 0x4B2C4)]
    MOV.W R5, #0x258
    MOV R2, R5
    ADD R1, R3
    MOV R0, R4
    BLX memcpy
    STR R5, [R7]
    STR R4, [R6]
    BL sub_268DC
    POP {R3-R7,PC}
```
Output:```json
[
    "Extrn",  // Function is an external function
    "loc_808F914"  // Source address of the function
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__imp_mkdir:
loc_4B984:
    IMPORT 
```
Output:[
    "Allocate memory for the `large` global variable",
    "Move the value of `edx` into the `var_10` register",
    "Move the value of `eax` into the `var_D8` register",
    "Move the value of `dx` into the `var_D4` register",
    "Move the value of `var_CC` into the `esp` register",
    "Subtract 8 from the stack pointer",
    "Push the address of `aUnableToSaveSe` into the stack",
    "Call the `sub_804B5E0` function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
findrelpos234:
loc_2AF9C:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x14
    STR R0, [SP,#0x38+var_2C]
    STR R1, [SP,#0x38+var_30]
    LDR R5, [R0]
    CMP R5, #0
    BEQ.W loc_2B0B0
loc_2AFAE:
    MOV R10, R2
    MOV R11, R3
    CBNZ R2, loc_2AFB8
loc_2AFB4:
    LDR.W R10, [R0,#4]
loc_2AFB8:
    LDR R3, [SP,#0x38+var_30]
    MOV.W R8, #0
    CBNZ R3, loc_2B004
loc_2AFC0:
    BIC.W R3, R11, #2
    CMP R3, #1
    BEQ loc_2AFE8
loc_2AFC8:
    MOV R3, #aFindrelpos234
    MOVW R2, #0x21B
    MOV R1, #aTree234C
    MOV R0, #aRelationRel234
    BLX __assert_fail
loc_2AFE8:
    CMP.W R11, #1
    IT 
    MOVEQ.W R8, #1
    BEQ loc_2B004
loc_2AFF4:
    CMP.W R11, #3
    MOV.W R8, #0xFFFFFFFF
    IT 
    MOVNE.W R8, #0
    B loc_2B004
loc_2B004:
    MOV.W R9, #0xFFFFFFFF
    MOVS R7, #0
    STR.W R8, [SP,#0x38+var_34]
loc_2B00E:
    LDR R1, [R5,#0x24]
    CBZ R1, loc_2B046
loc_2B012:
    MOV R6, R5
    MOVS R4, #0
    B loc_2B01C
loc_2B018:
    LDR R1, [R2,#0x24]
    CBZ R1, loc_2B04C
loc_2B01C:
    LDR R0, [SP,#0x38+var_34]
    CMP.W R8, #0
    BNE loc_2B02A
loc_2B024:
    LDR R0, [SP,#0x38+var_30]
    BLX R10
    B loc_2B02A
loc_2B02A:
    CMP R0, #0
    BLT loc_2B04C
loc_2B02E:
    ADDS R6, #4
    MOV R2, R6
    LDR R3, [R6]
    CBZ R3, loc_2B03A
loc_2B036:
    LDR R3, [R6,#0x10]
    ADD R7, R3
loc_2B03A:
    CBZ R0, loc_2B04A
loc_2B03C:
    ADDS R7, #1
    ADDS R4, #1
    CMP R4, #3
    BNE loc_2B018
loc_2B044:
    B loc_2B04C
loc_2B046:
    MOVS R4, #0
    B loc_2B04C
loc_2B04A:
    MOV R9, R4
loc_2B04C:
    CMP.W R9, #0
    BGE loc_2B05E
loc_2B052:
    ADD.W R4, R5, R4,LSL#2
    LDR R5, [R4,#4]
    CMP R5, #0
    BNE loc_2B00E
loc_2B05C:
    B loc_2B082
loc_2B05E:
    BIC.W R3, R11, #2
    CMP R3, #1
    BEQ loc_2B074
loc_2B066:
    LDR R3, [SP,#0x38+arg_0]
    CBZ R3, loc_2B06C
loc_2B06A:
    STR R7, [R3]
loc_2B06C:
    ADD.W R5, R5, R9,LSL#2
    LDR R0, [R5,#0x24]
    B loc_2B0BA
loc_2B074:
    CMP.W R11, #1
    ITE 
    ADDEQ.W R7, R7, #0xFFFFFFFF
    ADDNE R7, #1
    B loc_2B096
loc_2B082:
    CMP.W R11, #0
    BEQ loc_2B0B4
loc_2B088:
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #1
    IT 
    ADDLS.W R7, R7, #0xFFFFFFFF
loc_2B096:
    MOV R1, R7
    LDR R0, [SP,#0x38+var_2C]
    BL sub_2AF2C
    MOV R3, R0
    LDR R2, [SP,#0x38+arg_0]
    CMP R0, #0
    IT 
    CMPNE R2, #0
    IT 
    STRNE R7, [R2]
    BNE loc_2B0BA
loc_2B0AE:
    B loc_2B0B8
loc_2B0B0:
    MOVS R0, #0
    B loc_2B0BA
loc_2B0B4:
    MOVS R0, #0
    B loc_2B0BA
loc_2B0B8:
    MOV R0, R3
loc_2B0BA:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
```
Output:[
    "Copies the first `len` bytes from `src` to `dst` and returns the number of bytes copied.",
    "If the destination is too small to hold the source, the function returns 0."
]
This function is used to copy data from the beginning of a source array to a destination array. It checks if the destination array is large enough to hold the source data before copying. If not, it returns 0.<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
hmacmd5_start:
loc_23230:
    PUSH {R3,LR}
    MOVS R2, #0x5C
    MOV R1, R0
    ADDS R0, #0xB8
    BLX memcpy
    POP {R3,PC}
```
Output:[
    "Free prompt function",
    "Handles free operations on a prompt buffer",
    "Uses stack-based memory management",
    "Calls `_free` for each element in the prompt buffer",
    "Uses `_memset` for initializing the free list",
    "Ensures correct memory alignment and size"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
ssh1_read_bignum:
loc_1BE8C:
    PUSH {R3-R7,LR}
    CMP R1, #1
    BLE loc_1BEC4
loc_1BE92:
    ADDS R5, R0, #2
    LDRB R4, [R0]
    LDRB R3, [R0,#1]
    ADD.W R3, R3, R4,LSL#8
    ADD.W R4, R3, #0xE
    ADDS R3, #7
    IT 
    MOVPL R4, R3
    ASRS R4, R4, #3
    ADDS R6, R4, #2
    CMP R1, R6
    BLT loc_1BECA
loc_1BEAE:
    CBZ R2, loc_1BECE
loc_1BEB0:
    MOV R7, R2
    MOV R6, R0
    MOV R1, R4
    MOV R0, R5
    BL sub_1BD54
    STR R0, [R7]
    ADD R4, R5
    SUBS R6, R4, R6
    B loc_1BECE
loc_1BEC4:
    MOV.W R6, #0xFFFFFFFF
    B loc_1BECE
loc_1BECA:
    MOV.W R6, #0xFFFFFFFF
loc_1BECE:
    MOV R0, R6
    POP {R3-R7,PC}
```
Output:des_cbc3_decrypt:
loc_286CC:
    PUSH {R7,LR}
    SUB SP, SP, #0x30
    ADD R7, SP, #0
    STR R0, [R7,#0x30+var_24]
    STR R1, [R7,#0x30+var_28]
    STR R2, [R7,#0x30+var_2C]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_4]
    LDR R3, [R7,#0x30+var_28]
    AND.W R3, R3, #7
    CMP R3, #0
    BEQ loc_2870E
loc_286EE:
    MOV R3, #aDesCbc3Decrypt
    MOVW R2, #0x2BD
    MOV R1, #aSshdesC
    MOV R0, #aLen70_0
    BLX __assert_fail
loc_2870E:
    LDR R3, [R7,#0x30+var_2C]
    LDR.W R3, [R3,#0x80]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_2C]
    LDR.W R3, [R3,#0x84]
    STR R3, [R7,#0x30+var_1C]
    MOVS R3, #0
    STR R3, [R7,#0x30+var_18]
    B loc_2881C
loc_28724:
    LDR R3, [R7,#0x30+var_24]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_14]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #7
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_10]
    LDR R3, [R7,#0x30+var_2C]
    ADD.W R3, R3, #0x110
    ADD.W R0, R7, #0x24
    LDR R2, [R7,#0x30+var_10]
    LDR R1, [R7,#0x30+var_14]
    BL sub_27268
    LDR R1, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_8]
    LDR R3, [R7,#0x30+var_2C]
    ADDS R3, #0x88
    ADD.W R0, R7, #0x24
    BL sub_262B8
    LDR R1, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_8]
    ADD.W R0, R7, #0x24
    LDR R3, [R7,#0x30+var_2C]
    BL sub_27268
    LDR R3, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_20]
    EORS R3, R2
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_8]
    LDR R2, [R7,#0x30+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_20]
    LSRS R3, R3, #0x18
    UXTB R2, R3
    LDR R3, [R7,#0x30+var_24]
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDR R2, [R7,#0x30+var_20]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDR R2, [R7,#0x30+var_20]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #3
    LDR R2, [R7,#0x30+var_20]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x18
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #7
    LDR R2, [R7,#0x30+var_1C]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_24]
    LDR R3, [R7,#0x30+var_14]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_10]
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_18]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_18]
loc_2881C:
    LDR R2, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_28]
    CMP R2, R3
    BCC.W loc_28724
loc_28826:
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_20]
    STR.W R2, [R3,#0x80]
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_1C]
    STR.W R2, [R3,#0x84]
    NOP 
    MOV R3, #0x5F758
    LDR R2, [R7,#0x30+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_2884C
loc_28848:
    BLX __stack_chk_fail
loc_2884C:
    ADDS R7, #0x30
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Function `help`",
    "Allocates stack space for local variables",
    "Pops values from the stack onto registers",
    "Calls `printf` with arguments",
    "Adds stack space for local variables",
    "Pops values from the stack onto registers",
    "Calls `_sub_8049672` with arguments",
    "Adds stack space for local variables",
    "Pops values from the stack onto registers",
    "Calls `_puts` with arguments",
    "Adds stack space for local variables",
    "Pops values from the stack onto registers",
    "Leaves the function",
    "Returns"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
SHA_Final:
loc_2A0F4:
    PUSH.W {R4-R8,LR}
    SUB SP, SP, #0x48
    MOV R5, R0
    MOV R4, R1
    MOV R3, #0x4B188
    LDR R3, [R3]
    STR R3, [SP,#0x60+var_1C]
    LDR R3, [R0,#0x54]
    CMP R3, #0x37
    ITE 
    RSBGT.W R8, R3, #0x78
    RSBLE.W R8, R3, #0x38
    LDR R6, [R0,#0x5C]
    LDR R3, [R0,#0x58]
    LSRS R7, R6, #0x1D
    ORR.W R7, R7, R3,LSL#3
    LSLS R6, R6, #3
    MOVS R3, #0x40
    MOV R2, R8
    MOVS R1, #0
    ADD R0, SP, #0x60+var_5C
    BLX __memset_chk
    MOVS R3, #0x80
    STRB.W R3, [SP,#0x60+var_5C]
    MOV R2, R8
    ADD R1, SP, #0x60+var_5C
    MOV R0, R5
    BL sub_29F18
    LSRS R3, R7, #0x18
    STRB.W R3, [SP,#0x60+var_5C]
    LSRS R3, R7, #0x10
    STRB.W R3, [SP,#0x60+var_5B]
    LSRS R3, R7, #8
    STRB.W R3, [SP,#0x60+var_5A]
    STRB.W R7, [SP,#0x60+var_59]
    LSRS R3, R6, #0x18
    STRB.W R3, [SP,#0x60+var_58]
    LSRS R3, R6, #0x10
    STRB.W R3, [SP,#0x60+var_57]
    LSRS R3, R6, #8
    STRB.W R3, [SP,#0x60+var_56]
    STRB.W R6, [SP,#0x60+var_55]
    MOVS R2, #8
    ADD R1, SP, #0x60+var_5C
    MOV R0, R5
    BL sub_29F18
    MOV R3, R5
    MOV R1, R4
    ADDS R5, #0x14
loc_2A17C:
    MOV R0, R3
    LDRB R2, [R3,#3]
    STRB R2, [R1]
    LDRH R2, [R3,#2]
    STRB R2, [R1,#1]
    LDR.W R2, [R3],#4
    LSRS R2, R2, #8
    STRB R2, [R1,#2]
    LDR R2, [R0]
    STRB R2, [R1,#3]
    ADDS R1, #4
    CMP R3, R5
    BNE loc_2A17C
loc_2A198:
    MOV R3, #0x4B188
    LDR R2, [SP,#0x60+var_1C]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_2A1AC
loc_2A1A8:
    BLX __stack_chk_fail
loc_2A1AC:
    ADD SP, SP, #0x48
    POP.W {R4-R8,PC}
```
Output:[
    "Initialize the C standard library",
    "Set up the environment for the program",
    "Initialize the system call table",
    "Load the initialization functions"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
localtime:
loc_1133C:
    ADR R12, 0x11344
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(localtime_ptr - 0x4A344)]!
```
Output:[
    "Subroutine to write usage messages to the standard error and standard output",
    "Pushes the destination address of the error message into the stack",
    "Compares the first byte of the stack with 0, if it is 0, it jumps to loc_80497A8",
    "Pushes the standard output address into the stack",
    "Pushes 0xA0h and 1 into the stack",
    "Pushes the usage message address into the stack",
    "Calls _fwrite to write the usage message to the standard error",
    "Pushes the standard output address into the stack",
    "Pushes 27h and 1 into the stack",
    "Pushes the usage message address into the stack",
    "Calls _fwrite to write the usage message to the standard output",
    "Adds 0x20 to the stack (space for the next push operation)",
    "Jumps to loc_80497C2"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
modpow:
loc_1CEA4:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x2C
    STR R2, [SP,#0x50+var_30]
    LDR R3, [R2]
    LDR.W R3, [R2,R3,LSL#2]
    CBNZ R3, loc_1CECE
loc_1CEB4:
    LDR R3, =aModpow
    MOVW R2, #0x42C
    MOV R1, #aSshbnC
    MOV R0, #aModMod00
    BLX __assert_fail
loc_1CECE:
    MOV R8, R1
    LDR R3, [SP,#0x50+var_30]
    LDR R3, [R3,#4]
    TST.W R3, #1
    BNE loc_1CEE2
loc_1CEDA:
    LDR R2, [SP,#0x50+var_30]
    BL sub_1C8BC
    B loc_1D218
loc_1CEE2:
    LDR R6, [SP,#0x50+var_30]
    MOV R1, R6
    BL sub_1C87C
    MOV R7, R0
    LDR R3, [R6]
    STR R3, [SP,#0x50+var_34]
    MOV R5, R3
    LSLS R0, R3, #5
    BL sub_1C040
    MOV R4, R0
    MOV R1, R0
    MOV R0, R6
    BL sub_1CCB4
    MOV R9, R0
    CBNZ R0, loc_1CF20
loc_1CF06:
    LDR R3, =aModpow
    MOVW R2, #0x443
    MOV R1, #aSshbnC
    MOV R0, #aInv
    BLX __assert_fail
loc_1CF20:
    LDR.W R10, [SP,#0x50+var_30]
    MOV R2, R10
    MOV R1, R4
    MOV R0, R7
    BL sub_1BAEC
    MOV R6, R0
    MOV R0, R7
    BL sub_1BAD4
    MOV R1, R10
    MOV R0, R4
    BL sub_1C87C
    MOV R7, R0
    MOV R0, R4
    BL sub_1BAD4
    MOVS R1, #4
    LDR R4, [SP,#0x50+var_34]
    MOV R0, R4
    BL sub_175D4
    STR R0, [SP,#0x50+var_3C]
    CMP R4, #0
    BLE.W loc_1D14A
loc_1CF58:
    MOV R2, R10
    LSLS R4, R4, #2
    MOV R3, R0
    ADD R3, R4
loc_1CF60:
    LDR.W R1, [R2,#4]!
    STR.W R1, [R3,#-4]!
    CMP R3, R0
    BNE loc_1CF60
loc_1CF6C:
    B loc_1D190
loc_1CF6E:
    LDR.W R1, [R9]
    CMP R1, R3
    ITE 
    LDRGT R1, [R2]
    MOVLE R1, R0
    STR.W R1, [R4,#-4]!
    ADDS R3, #1
    ADDS R2, #4
    CMP R5, R3
    BNE loc_1CF6E
loc_1CF86:
    B loc_1D1A6
loc_1CF88:
    STR.W R1, [R2,#4]!
    ADDS R3, #1
    CMP R5, R3
    BGT loc_1CF88
loc_1CF92:
    B loc_1D1BE
loc_1CF94:
    LDR R0, [R6]
    CMP R0, R3
    ITE 
    LDRGT R0, [R2]
    MOVLE R0, R4
    STR.W R0, [R1,#-4]!
    ADDS R3, #1
    ADDS R2, #4
    CMP R5, R3
    BGT loc_1CF94
loc_1CFAA:
    B loc_1D1E0
loc_1CFAC:
    LDR R0, [R7]
    CMP R0, R3
    ITE 
    LDRGT R0, [R2]
    MOVLE R0, R4
    STR.W R0, [R1,#-4]!
    ADDS R3, #1
    ADDS R2, #4
    CMP R5, R3
    BGT loc_1CFAC
loc_1CFC2:
    MOV R0, R7
    BL sub_1BAD4
    LDR R4, [SP,#0x50+var_34]
    MOV R0, R4
    BL sub_1B094
    ADD.W R3, R4, R4,LSL#1
    ADD R3, R0
    STR R3, [SP,#0x50+var_2C]
    MOVS R1, #4
    MOV R0, R3
    BL sub_175D4
    MOV R7, R0
    LDR.W R1, [R8]
    ADD.W R0, R8, R1,LSL#2
    MOV.W R9, #0
    MOV.W LR, #1
    B loc_1D002
loc_1CFF4:
    SUBS R4, #1
    CMP.W R4, #0xFFFFFFFF
    BNE loc_1D004
loc_1CFFC:
    ADD.W R9, R9, #1
    SUBS R0, #4
loc_1D002:
    MOVS R4, #0x1F
loc_1D004:
    CMP R1, R9
    BLE loc_1D088
loc_1D008:
    LSL.W R3, LR, R4
    LDR R2, [R0]
    TST R3, R2
    BEQ loc_1CFF4
loc_1D012:
    B loc_1D20C
loc_1D014:
    ADD.W R0, R6, R10
    STR R7, [SP,#0x50+var_50]
    MOV R3, R5
    LDR R2, [SP,#0x50+var_44]
    MOV R1, R0
    BL sub_1B18C
    STR R5, [SP,#0x50+var_50]
    MOV R3, R7
    LDR R2, [SP,#0x50+var_40]
    LDR R1, [SP,#0x50+var_3C]
    LDR R0, [SP,#0x50+var_44]
    BL sub_1B4E4
    LDR.W R3, [R8]
    SUB.W R2, R3, R9
    LSL.W R3, R11, R4
    LDR.W R2, [R8,R2,LSL#2]
    TST R3, R2
    BEQ loc_1D066
loc_1D046:
    STR R7, [SP,#0x50+var_50]
    MOV R3, R5
    MOV R2, R6
    LDR R1, [SP,#0x50+var_38]
    LDR R0, [SP,#0x50+var_44]
    ADD R0, R10
    BL sub_1B18C
    STR R5, [SP,#0x50+var_50]
    MOV R3, R7
    LDR R2, [SP,#0x50+var_40]
    LDR R1, [SP,#0x50+var_3C]
    MOV R0, R6
    BL sub_1B4E4
    B loc_1D06C
loc_1D066:
    MOV R3, R6
    LDR R6, [SP,#0x50+var_44]
    STR R3, [SP,#0x50+var_44]
loc_1D06C:
    SUBS R4, #1
    CMP.W R4, #0xFFFFFFFF
    BNE loc_1D014
loc_1D074:
    ADD.W R9, R9, #1
    MOVS R4, #0x1F
    LDR.W R3, [R8]
    CMP R3, R9
    BLE loc_1D088
loc_1D082:
    CMP R4, #0
    BGE loc_1D014
loc_1D086:
    B loc_1D074
loc_1D088:
    LDR R3, [SP,#0x50+var_34]
    STR R3, [SP,#0x50+var_50]
    MOV R3, R7
    LDR R2, [SP,#0x50+var_40]
    LDR R1, [SP,#0x50+var_3C]
    MOV R0, R6
    BL sub_1B4E4
    LDR R2, [SP,#0x50+var_30]
    LDR R0, [R2]
    BL sub_1BA40
    MOV R4, R0
    LDR R3, [SP,#0x50+var_34]
    CMP R3, #0
    BLE loc_1D0C0
loc_1D0A8:
    ADD.W R1, R6, R3,LSL#2
    MOVS R3, #0
loc_1D0AE:
    LDR.W R0, [R1],#4
    LDR R2, [R4]
    SUBS R2, R2, R3
    STR.W R0, [R4,R2,LSL#2]
    ADDS R3, #1
    CMP R5, R3
    BNE loc_1D0AE
loc_1D0C0:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1D0E2
loc_1D0C6:
    ADD.W R2, R4, R3,LSL#2
    LDR.W R1, [R4,R3,LSL#2]
    CBNZ R1, loc_1D0E2
loc_1D0D0:
    SUBS R3, #1
loc_1D0D2:
    STR R3, [R4]
    CMP R3, #1
    BEQ loc_1D0E2
loc_1D0D8:
    SUBS R3, #1
    LDR.W R1, [R2,#-4]!
    CMP R1, #0
    BEQ loc_1D0D2
loc_1D0E2:
    LDR R3, [SP,#0x50+var_2C]
    LSLS R1, R3, #2
    MOV R0, R7
    BL sub_17BF8
    MOV R0, R7
    BL sub_17A78
    LDR R7, [SP,#0x50+var_34]
    LSLS R5, R7, #3
    MOV R1, R5
    MOV R0, R6
    BL sub_17BF8
    MOV R0, R6
    BL sub_17A78
    MOV R1, R5
    LDR R5, [SP,#0x50+var_44]
    MOV R0, R5
    BL sub_17BF8
    MOV R0, R5
    BL sub_17A78
    LSLS R5, R7, #2
    MOV R1, R5
    LDR R6, [SP,#0x50+var_40]
    MOV R0, R6
    BL sub_17BF8
    MOV R0, R6
    BL sub_17A78
    MOV R1, R5
    LDR R6, [SP,#0x50+var_3C]
    MOV R0, R6
    BL sub_17BF8
    MOV R0, R6
    BL sub_17A78
    MOV R1, R5
    LDR R5, [SP,#0x50+var_38]
    MOV R0, R5
    BL sub_17BF8
    MOV R0, R5
    BL sub_17A78
    MOV R0, R4
    B loc_1D218
loc_1D14A:
    MOVS R1, #4
    LDR R4, [SP,#0x50+var_34]
    MOV R0, R4
    BL sub_175D4
    MOV R10, R0
    STR R0, [SP,#0x50+var_40]
    MOV R0, R9
    BL sub_1BAD4
    MOVS R1, #4
    MOV R0, R4
    BL sub_175D4
    STR R0, [SP,#0x50+var_38]
    MOV R3, R4
    MOV R2, R10
    MOV R1, R10
    BL sub_1B05C
    MOV R0, R6
    BL sub_1BAD4
    LSLS R4, R4, #1
    MOVS R1, #4
    MOV R0, R4
    BL sub_175D4
    MOV R6, R0
    MOVS R1, #4
    MOV R0, R4
    BL sub_175D4
    STR R0, [SP,#0x50+var_44]
    B loc_1CFC2
loc_1D190:
    MOVS R1, #4
    LDR R0, [SP,#0x50+var_34]
    BL sub_175D4
    STR R0, [SP,#0x50+var_40]
    ADD R4, R0
    ADD.W R2, R9, #4
    MOVS R3, #0
    MOV R0, R3
    B loc_1CF6E
loc_1D1A6:
    MOV R0, R9
    BL sub_1BAD4
    MOVS R1, #4
    LDR R0, [SP,#0x50+var_34]
    BL sub_175D4
    STR R0, [SP,#0x50+var_38]
    SUBS R2, R0, #4
    MOVS R3, #0
    MOV R1, R3
    B loc_1CF88
loc_1D1BE:
    LDR.W R9, [SP,#0x50+var_34]
    MOV R3, R9
    LDR R1, [SP,#0x50+var_40]
    MOV R2, R1
    LDR R4, [SP,#0x50+var_38]
    MOV R0, R4
    BL sub_1B05C
    ADD.W R1, R4, R9,LSL#2
    ADDS R2, R6, #4
    MOVS R3, #0
    MOV R4, R3
    B loc_1CF94
loc_1D1E0:
    MOV R0, R6
    BL sub_1BAD4
    LDR R3, [SP,#0x50+var_34]
    LSLS R4, R3, #1
    MOVS R1, #4
    MOV R0, R4
    BL sub_175D4
    MOV R6, R0
    MOVS R1, #4
    MOV R0, R4
    BL sub_175D4
    STR R0, [SP,#0x50+var_44]
    LDR R3, [SP,#0x50+var_34]
    ADD.W R1, R6, R3,LSL#3
    ADDS R2, R7, #4
    MOVS R3, #0
    MOV R4, R3
    B loc_1CFAC
loc_1D20C:
    LDR R3, [SP,#0x50+var_34]
    MOV.W R10, R3,LSL#2
    MOV.W R11, #1
    B loc_1D082
loc_1D218:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
```
Output:```json
[
    "Extracts error messages from the system."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
frame_dummy:
loc_115B0:

loc_115F4:
    PUSH {R3,LR}
    MOV R0, #0x4AF0C
    LDR R3, [R0]
    CBNZ R3, loc_11608
loc_11602:
    POP.W {R3,LR}
    B sub_115B0
loc_11608:
    MOV R3, #0
    CMP R3, #0
    BEQ loc_11602
loc_11614:
    BLX R3
    B loc_11602
```
Output:[
    "Clears the configuration register.",
    "Subtracts the size of the configuration register from the stack pointer."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
[
    "Subtracts the value at arg_0 from the stack pointer (SP) and stores it in R5.",
    "Moves the value at R0 to R7.",
    "Moves the value at R1 to R2.",
    "Moves the value at R9 to R3.",
    "Loads the value at address [SP + 0x28 + arg_0] into R4.",
    "Shifts the bits of R4 left by 2 positions and adds them to R6.",
    "Stores R10 in [SP + var_28].",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B3B0.",
    "Adds the value at R9 to R8.",
    "Stores R10 in [SP + var_28].",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B18C.",
    "Left shifts R3 by 1 position and moves the bits to the right.",
    "Stores R2 in [SP + 5].",
    "Loads the value at address [SP + 0x28 + var_28] into R4.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B020.",
    "Adds the value at R4 to R5.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B18C.",
    "Left shifts R3 by 1 position and moves the bits to the right.",
    "Stores R2 in [SP + 5].",
    "Loads the value at address [SP + 0x28 + var_28] into R4.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B020.",
    "Adds the value at R4 to R5.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into R0.",
    "Calls sub_1B05C.",
    "Loads the value at address [SP + 0x28 + var_28] into R3.",
    "Loads the value at address [SP + 0x28 + var_28] into R2.",
    "Loads the value at address [SP + 0x28 + var_28] into R1.",
    "Loads the value at address [SP + 0x28 + var_28] into
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ecdh_calculate:
loc_2F54C:
    PUSH {R4,R7,LR}
    SUB SP, SP, #0x24
    ADD R7, SP, #0
    STR R0, [R7,#0x24+var_20]
    STR R1, [R7,#0x24+var_24]
    LDR R1, [R7,#0x24+var_20]
    LDR R0, [R7,#0x24+var_24]
    BL sub_2C990
    STR R0, [R7,#0x24+var_10]
    LDR R3, [R7,#0x24+var_10]
    CMP R3, #0
    BNE loc_2F56A
loc_2F566:
    MOVS R3, #0
    B loc_2F5E8
loc_2F56A:
    LDR R3, [R7,#0x24+var_10]
    LDR R3, [R3,#4]
    STR R3, [R7,#0x24+var_18]
    LDR R3, [R7,#0x24+var_10]
    MOVS R2, #0
    STR R2, [R3,#4]
    LDR R3, [R7,#0x24+var_10]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #1
    BNE loc_2F5E0
loc_2F580:
    LDR R3, [R7,#0x24+var_10]
    LDR R3, [R3]
    LDR R3, [R3,#0xC]
    ADDS R3, #7
    LSRS R3, R3, #3
    STR R3, [R7,#0x24+var_C]
    LDR R3, [R7,#0x24+var_C]
    MOVS R1, #1
    MOV R0, R3
    BL sub_1B638
    STR R0, [R7,#0x24+var_8]
    MOVS R3, #0
    STR R3, [R7,#0x24+var_14]
    B loc_2F5B8
loc_2F59E:
    LDR R3, [R7,#0x24+var_14]
    LDR R2, [R7,#0x24+var_8]
    ADDS R4, R2, R3
    LDR R1, [R7,#0x24+var_14]
    LDR R0, [R7,#0x24+var_18]
    BL sub_24FF8
    MOV R3, R0
    UXTB R3, R3
    STRB R3, [R4]
    LDR R3, [R7,#0x24+var_14]
    ADDS R3, #1
    STR R3, [R7,#0x24+var_14]
loc_2F5B8:
    LDR R2, [R7,#0x24+var_14]
    LDR R3, [R7,#0x24+var_C]
    CMP R2, R3
    BLT loc_2F59E
loc_2F5C0:
    LDR R0, [R7,#0x24+var_18]
    BL sub_22C50
    LDR R1, [R7,#0x24+var_C]
    LDR R0, [R7,#0x24+var_8]
    BL sub_24B64
    STR R0, [R7,#0x24+var_18]
    LDR R3, [R7,#0x24+var_C]
    MOV R1, R3
    LDR R0, [R7,#0x24+var_8]
    BL sub_1B824
    LDR R0, [R7,#0x24+var_8]
    BL sub_1B788
loc_2F5E0:
    LDR R0, [R7,#0x24+var_10]
    BL sub_2B6F8
    LDR R3, [R7,#0x24+var_18]
loc_2F5E8:
    MOV R0, R3
    ADDS R7, #0x24
    MOV SP, R7
    POP {R4,R7,PC}
```
Output:[
    "Calculate HMAC-SHA-256 hash of a given buffer",
    "Use a stack-based approach to store intermediate results",
    "Avoid stack overflow by using a stack-based approach"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
[
    "Subtracting 0xFFFFFFFF from R8",  // R8 is a pointer to a blob, subtracting it from it is equivalent to subtracting 0xFFFFFFFF
    "Loading the blob from the address pointed to by R6",  // Loading the blob from the address pointed to by R6 is equivalent to loading the blob from memory
    "Comparing R8 with 0xFFFFFFFF",  // Comparing R8 with 0xFFFFFFFF is equivalent to comparing R8 with 0xFFFFFFFF
    "Jumping to loc_1F256 if R8 is not 0xFFFFFFFF",  // Jumping to loc_1F256 if R8 is not 0xFFFFFFFF is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R11",  // Adding 1 to R11 is equivalent to adding 1 to the value of R11
    "Checking if R11 is equal to R3",  // Checking if R11 is equal to R3 is equivalent to checking if R11 is equal to the value of R3
    "Jumping to loc_1F274 if R11 is not equal to R3",  // Jumping to loc_1F274 if R11 is not equal to R3 is equivalent to jumping to a different location
    "Storing the blob into memory at R10",  // Storing the blob into memory at R10 is equivalent to storing the blob into memory
    "Loading the blob from the address pointed to by R7",  // Loading the blob from the address pointed to by R7 is equivalent to loading the blob from memory
    "Comparing R7 with R9",  // Comparing R7 with R9 is equivalent to comparing R7 with the value of R9
    "Jumping to loc_1F294 if R7 is not equal to R9",  // Jumping to loc_1F294 if R7 is not equal to R9 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R0",  // Adding 1 to R0 is equivalent to adding 1 to the value of R0
    "Checking if R0 is equal to R8",  // Checking if R0 is equal to R8 is equivalent to checking if R0 is equal to the value of R8
    "Jumping to loc_1F26C if R0 is not equal to R8",  // Jumping to loc_1F26C if R0 is not equal to R8 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R1",  // Adding 1 to R1 is equivalent to adding 1 to the value of R1
    "Checking if R1 is equal to R9",  // Checking if R1 is equal to R9 is equivalent to checking if R1 is equal to the value of R9
    "Jumping to loc_1F294 if R1 is not equal to R9",  // Jumping to loc_1F294 if R1 is not equal to R9 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R0",  // Adding 1 to R0 is equivalent to adding 1 to the value of R0
    "Checking if R0 is equal to R8",  // Checking if R0 is equal to R8 is equivalent to checking if R0 is equal to the value of R8
    "Jumping to loc_1F26C if R0 is not equal to R8",  // Jumping to loc_1F26C if R0 is not equal to R8 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R1",  // Adding 1 to R1 is equivalent to adding 1 to the value of R1
    "Checking if R1 is equal to R9",  // Checking if R1 is equal to R9 is equivalent to checking if R1 is equal to the value of R9
    "Jumping to loc_1F294 if R1 is not equal to R9",  // Jumping to loc_1F294 if R1 is not equal to R9 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R0",  // Adding 1 to R0 is equivalent to adding 1 to the value of R0
    "Checking if R0 is equal to R8",  // Checking if R0 is equal to R8 is equivalent to checking if R0 is equal to the value of R8
    "Jumping to loc_1F26C if R0 is not equal to R8",  // Jumping to loc_1F26C if R0 is not equal to R8 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R1",  // Adding 1 to R1 is equivalent to adding 1 to the value of R1
    "Checking if R1 is equal to R9",  // Checking if R1 is equal to R9 is equivalent to checking if R1 is equal to the value of R9
    "Jumping to loc_1F294 if R1 is not equal to R9",  // Jumping to loc_1F294 if R1 is not equal to R9 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R0",  // Adding 1 to R0 is equivalent to adding 1 to the value of R0
    "Checking if R0 is equal to R8",  // Checking if R0 is equal to R8 is equivalent to checking if R0 is equal to the value of R8
    "Jumping to loc_1F26C if R0 is not equal to R8",  // Jumping to loc_1F26C if R0 is not equal to R8 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R1",  // Adding 1 to R1 is equivalent to adding 1 to the value of R1
    "Checking if R1 is equal to R9",  // Checking if R1 is equal to R9 is equivalent to checking if R1 is equal to the value of R9
    "Jumping to loc_1F294 if R1 is not equal to R9",  // Jumping to loc_1F294 if R1 is not equal to R9 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R0",  // Adding 1 to R0 is equivalent to adding 1 to the value of R0
    "Checking if R0 is equal to R8",  // Checking if R0 is equal to R8 is equivalent to checking if R0 is equal to the value of R8
    "Jumping to loc_1F26C if R0 is not equal to R8",  // Jumping to loc_1F26C if R0 is not equal to R8 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R1",  // Adding 1 to R1 is equivalent to adding 1 to the value of R1
    "Checking if R1 is equal to R9",  // Checking if R1 is equal to R9 is equivalent to checking if R1 is equal to the value of R9
    "Jumping to loc_1F294 if R1 is not equal to R9",  // Jumping to loc_1F294 if R1 is not equal to R9 is equivalent to jumping to a different location
    "Striding the blob into memory",  // Striding the blob into memory is equivalent to copying the blob into memory
    "Adding 1 to R0",  // Adding 1 to R0 is equivalent to adding 1 to the value of R0
    "Checking if R0 is equal to R8",  // Checking if R0 is equal to R8 is equivalent to checking if R0 is equal to the value of R8
    "Jumping to loc_1F26C if R0 is not equal
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ec_alg_oid:
loc_2FA24:
    PUSH {R7}
    SUB SP, SP, #0x14
    ADD R7, SP, #0
    STR R0, [R7,#0x14+var_10]
    STR R1, [R7,#0x14+var_14]
    LDR R3, [R7,#0x14+var_10]
    LDR R3, [R3,#0x38]
    STR R3, [R7,#0x14+var_8]
    LDR R3, [R7,#0x14+var_8]
    LDR R2, [R3,#0xC]
    LDR R3, [R7,#0x14+var_14]
    STR R2, [R3]
    LDR R3, [R7,#0x14+var_8]
    LDR R3, [R3,#8]
    MOV R0, R3
    ADDS R7, #0x14
    MOV SP, R7
    POP.W {R7}
    BX LR
```
Output:[
    "divsi3: "
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
.term_proc:
loc_41E18:
    PUSH {R3,LR}
    POP {R3,PC}
```
Output:```json
[
    "Subtracts two registers from each other",
    "Uses the FPU to compute the result of a simple operation",
    "Calls a subroutine to handle the specific task"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
rsastr_fmt:
loc_27BCC:
    PUSH.W {R4-R10,LR}
    MOV R10, R0
    LDR.W R9, [R1,#8]
    LDR R7, [R1,#0xC]
    MOV R3, #0x3443C
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3443E - 0x3443C)]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    MOV R0, R7
    BL sub_1BED4
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVMI R0, R8
    MOV.W R8, R0,ASR#2
    CMP.W R8, #1
    IT 
    MOVLT.W R8, #1
    ADD.W R4, R8, #0xFFFFFFFF
    ADD.W R5, R10, #1
    MOV R6, #0x388AC
loc_27C16:
    ADD.W R1, R4, R4,LSR#31
    ASRS R1, R1, #1
    MOV R0, R7
    BL sub_1BF6C
    CMP R4, #0
    AND.W R3, R4, #1
    IT 
    NEGLT R3, R3
    LSLS R3, R3, #2
    ASRS R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R6
    LDRB.W R3, [R3,#0x50]
    STRB.W R3, [R5,#1]!
    SUBS R4, #1
    CMP.W R4, #0xFFFFFFFF
    BNE loc_27C16
loc_27C46:
    ADD.W R3, R8, #2
    MOV R2, #0x34440
    LDR R0, [R2]
    STR.W R0, [R10,R3]
    MOV R0, R9
    BL sub_1BED4
    ADDS R7, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R7, R0
    ASRS R7, R7, #2
    CMP R7, #1
    IT 
    MOVLT R7, #1
    SUBS R7, #1
    ADD.W R5, R8, #4
    ADD R5, R10
    MOV R4, R7
    MOV R6, #0x388AC
loc_27C80:
    ADD.W R1, R4, R4,LSR#31
    ASRS R1, R1, #1
    MOV R0, R9
    BL sub_1BF6C
    CMP R4, #0
    AND.W R3, R4, #1
    IT 
    NEGLT R3, R3
    LSLS R3, R3, #2
    ASRS R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R6
    LDRB.W R3, [R3,#0x50]
    STRB.W R3, [R5,#1]!
    SUBS R4, #1
    CMP.W R4, #0xFFFFFFFF
    BNE loc_27C80
loc_27CB0:
    ADD R8, R10
    ADD R8, R7
    MOVS R3, #0
    STRB.W R3, [R8,#6]
    POP.W {R4-R10,PC}
```
Output:```json
[
    "Converts a string to a long integer.",
    "Requires the presence of `strncpy` for copying the string."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
fdopen:
loc_11138:
    ADR R12, 0x11140
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(fdopen_ptr - 0x4A140)]!
```
Output:```json
[
    "Write a setting function in assembly",
    "Passing an address to an external function",
    "Formatting the output string",
    "Writing the formatted string to the screen"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
dupstr:
loc_1766C:
    PUSH {R3-R5,LR}
    CBZ R0, loc_17688
loc_17670:
    MOV R4, R0
    BLX strlen
    MOVS R1, #1
    ADD R0, R1
    BL sub_175D4
    MOV R5, R0
    MOV R1, R4
    BLX strcpy
    B loc_1768A
loc_17688:
    MOVS R5, #0
loc_1768A:
    MOV R0, R5
    POP {R3-R5,PC}
```
Output:```json
[
    "sub_406300",
    "sub_40A26B",
    "sub_40A6BA"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
modinv:
loc_1D358:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R4, R0
    MOV R0, R1
    STR R1, [SP,#0x30+var_2C]
    BL sub_1C0EC
    MOV R10, #0x4C16C
    MOV R7, R0
    MOV R0, R4
    BL sub_1C0EC
    MOV R6, R0
    LDR.W R0, [R10]
    BL sub_1C0EC
    MOV R9, R0
    LDR.W R0, [R10,#(off_4C174 - 0x4C16C)]
    BL sub_1C0EC
    LDR R3, [R4]
    LDR.W R3, [R4,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_1D542
loc_1D398:
    LDR R2, [SP,#0x30+var_2C]
    LDR R3, [R2]
    LDR.W R3, [R2,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_1D528
loc_1D3A6:
    MOV R8, R0
    LDR.W R1, [R10,#(off_4C174 - 0x4C16C)]
    MOV R0, R6
    MOV.W R11, #1
    BL sub_1C748
    CMP R0, #0
    BEQ loc_1D462
loc_1D3BA:
    LDR.W R1, [R10]
    MOV R0, R6
    BL sub_1C748
    CMP R0, #0
    BEQ loc_1D486
loc_1D3C8:
    LDR R0, [R6]
    BL sub_1BA70
    MOV R5, R0
    LDR R0, [R7]
    BL sub_1BA70
    MOV R2, R5
    MOV R1, R6
    MOV R3, R0
    MOV R4, R0
    MOV R0, R7
    BL sub_1B91C
    LDR R3, [R5]
    CMP R3, #1
    BLS loc_1D406
loc_1D3EA:
    LDR.W R1, [R5,R3,LSL#2]
    ADD.W R2, R5, R3,LSL#2
    CBNZ R1, loc_1D406
loc_1D3F4:
    SUBS R3, #1
    B loc_1D400
loc_1D3F8:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1D406
loc_1D400:
    CMP R3, #1
    STR R3, [R5]
    BNE loc_1D3F8
loc_1D406:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1D428
loc_1D40C:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    SUBS R3, #1
    CBZ R1, loc_1D422
loc_1D418:
    B loc_1D428
loc_1D41A:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1D428
loc_1D422:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_1D41A
loc_1D428:
    MOV R0, R7
    MOV R7, R6
    BL sub_1C114
    MOV R1, R8
    MOV R2, R9
    MOV R0, R4
    BL sub_1CA80
    MOV R6, R5
    RSB.W R11, R11, #0
    STR R0, [SP,#0x30+var_30]
    MOV R0, R9
    BL sub_1C114
    MOV R0, R4
    BL sub_1C114
    LDR R3, [SP,#0x30+var_30]
    LDR.W R1, [R10,#(off_4C174 - 0x4C16C)]
    MOV R0, R6
    MOV R9, R8
    MOV R8, R3
    BL sub_1C748
    CMP R0, #0
    BNE loc_1D3BA
loc_1D462:
    MOV R5, R0
    MOV R0, R6
    BL sub_1C114
    MOV R0, R7
    BL sub_1C114
    MOV R0, R9
    BL sub_1C114
    CMP.W R11, #0xFFFFFFFF
    IT 
    MOVNE R0, R8
    BEQ loc_1D4A8
loc_1D480:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1D486:
    MOV R4, R0
    MOV R0, R6
    BL sub_1C114
    MOV R0, R7
    BL sub_1C114
    MOV R0, R9
    BL sub_1C114
    MOV R0, R8
    BL sub_1C114
    MOV R0, R4
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1D4A8:
    LDR R7, [SP,#0x30+var_2C]
    LDR R0, [R7]
    BL sub_1BA70
    LDR R3, [R0]
    MOV R4, R0
    CMP R3, #0
    BLE loc_1D516
loc_1D4B8:
    MOVS R1, #1
    MOV R6, R4
    MOV R0, R1
    MOV LR, R7
    B loc_1D4D8
loc_1D4C2:
    CMP R7, R3
    ITE 
    MOVHI R5, #0
    MOVLS R5, #1
loc_1D4CA:
    LDR R2, [R4]
    CMP R3, #0
    IT 
    MOVNE R0, R1
    ADDS R1, #1
    CMP R2, R1
    BLT loc_1D518
loc_1D4D8:
    LDR.W R3, [LR]
    LDR.W R2, [R8]
    CMP R3, R1
    ITE 
    LDRGE.W R3, [LR,R1,LSL#2]
    MOVLT R3, #0
    CMP R2, R1
    ITEE 
    LDRGE.W R2, [R8,R1,LSL#2]
    MOVLT R2, #0
    MOVLT.W R7, #0xFFFFFFFF
    SUB.W R3, R3, R2
    SUB.W R3, R3, R5
    IT 
    MVNGE R7, R2
    STR.W R3, [R6,#4]!
    CMP R5, #0
    BNE loc_1D4C2
loc_1D50C:
    CMP R7, R3
    ITE 
    MOVCS R5, #0
    MOVCC R5, #1
    B loc_1D4CA
loc_1D516:
    MOVS R0, #1
loc_1D518:
    STR R0, [R4]
    MOV R0, R8
    BL sub_1C114
    MOV R0, R4
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1D528:
    MOVW R1, #0x422C
    MOVW R0, #0x4344
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E3
    BLX __assert_fail
loc_1D542:
    MOVW R1, #0x422C
    MOVW R0, #0x432C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E2
    BLX __assert_fail
```
Output:```json
[
    "Load a value from memory into a register"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__imp_realloc:
loc_4C918:
    IMPORT 
```
Output:```json
[
    "mov eax, edi"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
makeprivate:
loc_1C4FC:

loc_27CF0:
    ADDS R2, #0x10
    B.W sub_1C4FC
```
Output:```json
[
    "Accesses the external function 'access' located at address 0x657DF8."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
hmacsha1_genresult:
loc_2AE1C:
    PUSH {R4-R6,LR}
    MOV R4, #0x4C188
    SUB SP, SP, #0x78
    MOV R5, R0
    MOVS R2, #0x60
    LDR R3, [R4]
    MOV R6, R1
    MOV R0, SP
    ADD.W R1, R5, #0xC0
    STR R3, [SP,#0x88+var_14]
    BLX memcpy
    MOV R0, SP
    ADD R1, SP, #0x88+var_28
    BL sub_2AD34
    ADD.W R1, R5, #0x60
    MOVS R2, #0x60
    MOV R0, SP
    BLX memcpy
    MOVS R2, #0x14
    ADD R1, SP, #0x88+var_28
    MOV R0, SP
    BL sub_2AA9C
    MOV R1, R6
    MOV R0, SP
    BL sub_2AD34
    LDR R2, [SP,#0x88+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_2AE6E
loc_2AE6A:
    ADD SP, SP, #0x78
    POP {R4-R6,PC}
loc_2AE6E:
    BLX __stack_chk_fail
```
Output:[
    "Duplicate printf function",
    "Uses RDI and RSI for input/output",
    "Calls sub_40B7B0 for printing",
    "Handles stack overflow",
    "Calls ___stack_chk_fail for stack check failure"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2

```
Output:```json
[
    "Imports the exit function from kernel32.dll"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ec_point_new:
loc_2B758:
    PUSH {R7,LR}
    SUB SP, SP, #0x18
    ADD R7, SP, #0
    STR R0, [R7,#0x18+var_C]
    STR R1, [R7,#0x18+var_10]
    STR R2, [R7,#0x18+var_14]
    STR R3, [R7,#0x18+var_18]
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_1B638
    STR R0, [R7,#0x18+var_4]
    LDR R3, [R7,#0x18+var_4]
    LDR R2, [R7,#0x18+var_C]
    STR R2, [R3]
    LDR R3, [R7,#0x18+var_4]
    LDR R2, [R7,#0x18+var_10]
    STR R2, [R3,#4]
    LDR R3, [R7,#0x18+var_4]
    LDR R2, [R7,#0x18+var_14]
    STR R2, [R3,#8]
    LDR R3, [R7,#0x18+var_4]
    LDR R2, [R7,#0x18+var_18]
    STR R2, [R3,#0xC]
    LDRB.W R3, [R7,#0x18+arg_0]
    CMP R3, #0
    ITE 
    MOVNE R3, #1
    MOVEQ R3, #0
    UXTB R3, R3
    MOV R2, R3
    LDR R3, [R7,#0x18+var_4]
    STRB R2, [R3,#0x10]
    LDR R3, [R7,#0x18+var_4]
    MOV R0, R3
    ADDS R7, #0x18
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Generates a new location for the next instruction based on the current location",
    "Loads the next four bytes from the specified memory address",
    "Subtracts 4 from the next four bytes and stores the result back to the same memory address",
    "Calls the `sub_23104` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1C1B8` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_17A78` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_231A4` function",
    "Stores the next four bytes from the specified memory address",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the result back to the same memory address",
    "Calls the `sub_1BAD4` function",
    "Loads the next byte from the specified memory address",
    "Subtracts 1 from the next byte and stores the resultread_body:
loc_32B44:
    PUSH {R7,LR}
    SUB SP, SP, #0x18
    ADD R7, SP, #0
    STR R0, [R7,#0x18+stream]
    MOVS R3, #0x80
    STR R3, [R7,#0x18+var_8]
    LDR R3, [R7,#0x18+var_8]
    MOVS R1, #1
    MOV R0, R3
    BL sub_1B638
    STR R0, [R7,#0x18+var_10]
    MOVS R3, #0
    STR R3, [R7,#0x18+var_C]
    LDR R3, [R7,#0x18+var_C]
    LDR R2, [R7,#0x18+var_10]
    ADD R3, R2
    MOVS R2, #0
    STRB R2, [R3]
loc_32B6A:
    LDR R0, [R7,#0x18+stream]
    BLX fgetc
    STR R0, [R7,#0x18+c]
    LDR R3, [R7,#0x18+c]
    CMP R3, #0xD
    BEQ loc_32B86
loc_32B78:
    LDR R3, [R7,#0x18+c]
    CMP R3, #0xA
    BEQ loc_32B86
loc_32B7E:
    LDR R3, [R7,#0x18+c]
    CMP.W R3, #0xFFFFFFFF
    BNE loc_32BAE
loc_32B86:
    LDR R3, [R7,#0x18+c]
    CMP.W R3, #0xFFFFFFFF
    BEQ loc_32BAA
loc_32B8E:
    LDR R0, [R7,#0x18+stream]
    BLX fgetc
    STR R0, [R7,#0x18+c]
    LDR R3, [R7,#0x18+c]
    CMP R3, #0xD
    BEQ loc_32BAA
loc_32B9C:
    LDR R3, [R7,#0x18+c]
    CMP R3, #0xA
    BEQ loc_32BAA
loc_32BA2:
    LDR R1, [R7,#0x18+stream]
    LDR R0, [R7,#0x18+c]
    BLX ungetc
loc_32BAA:
    LDR R3, [R7,#0x18+var_10]
    B loc_32BEA
loc_32BAE:
    LDR R3, [R7,#0x18+var_C]
    ADDS R2, R3, #1
    LDR R3, [R7,#0x18+var_8]
    CMP R2, R3
    BLT loc_32BCC
loc_32BB8:
    LDR R3, [R7,#0x18+var_8]
    ADDS R3, #0x80
    STR R3, [R7,#0x18+var_8]
    LDR R3, [R7,#0x18+var_8]
    MOVS R2, #1
    MOV R1, R3
    LDR R0, [R7,#0x18+var_10]
    BL sub_1B6DC
    STR R0, [R7,#0x18+var_10]
loc_32BCC:
    LDR R3, [R7,#0x18+var_C]
    ADDS R2, R3, #1
    STR R2, [R7,#0x18+var_C]
    MOV R2, R3
    LDR R3, [R7,#0x18+var_10]
    ADD R3, R2
    LDR R2, [R7,#0x18+c]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x18+var_C]
    LDR R2, [R7,#0x18+var_10]
    ADD R3, R2
    MOVS R2, #0
    STRB R2, [R3]
    B loc_32B6A
loc_32BEA:
    MOV R0, R3
    ADDS R7, #0x18
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "sub_2DF90",  # Subroutine to perform the subtraction
    "bl sub_2DF90",  # Branch to the subroutine if the condition is true
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",  # Subroutine to perform the subtraction
    "sub_2DF90",
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
strftime:
loc_112C8:
    ADR R12, 0x112D0
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(strftime_ptr - 0x5E2D0)]!
```
Output:```json
[
    "SHA512_Simple",
    "sub_30838",
    "sub_31B84",
    "memcpy_chk",
    "__memcpy_chk"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
is_interactive:
loc_3F898:
    PUSH {R7,LR}
    ADD R7, SP, #0
    MOVS R0, #0
    BLX isatty
    MOV R3, R0
    MOV R0, R3
    POP {R7,PC}
```
Output:[
    "Reads a byte from memory and performs a bitwise shift",
    "Converts the byte to a big-endian integer",
    "Checks if the byte is zero",
    "Writes the byte to memory"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
decodepoint:
loc_21970:
    PUSH {R4-R6,LR}
    MOV R5, R2
    LDR R3, [R2]
    LDR R3, [R3]
    CMP R3, #2
    BNE loc_21984
loc_2197C:
    BL sub_21778
    MOV R4, R0
    B loc_219E8
loc_21984:
    CMP R1, #0
    IT 
    MOVLE R4, #0
    BLE loc_219E8
loc_2198C:
    LDRB R3, [R0]
    CMP R3, #4
    IT 
    MOVNE R4, #0
    BNE loc_219E8
loc_21996:
    SUBS R1, #1
    TST.W R1, #1
    BEQ loc_219A8
loc_2199E:
    MOVS R4, #0
    STR R4, [R2,#4]
    STR R4, [R2,#8]
    STR R4, [R2,#0xC]
    B loc_219E8
loc_219A8:
    ADDS R6, R0, #1
    ADD.W R1, R1, R1,LSR#31
    ASRS R4, R1, #1
    MOV R1, R4
    MOV R0, R6
    BL sub_1BD54
    STR R0, [R5,#4]
    MOV R1, R4
    ADDS R0, R6, R4
    BL sub_1BD54
    STR R0, [R5,#8]
    MOVS R3, #0
    STR R3, [R5,#0xC]
    MOV R0, R5
    BL sub_21628
    MOV R4, R0
    CBNZ R0, loc_219E6
loc_219D2:
    LDR R0, [R5,#4]
    BL sub_1BAD4
    MOVS R6, #0
    STR R6, [R5,#4]
    LDR R0, [R5,#8]
    BL sub_1BAD4
    STR R6, [R5,#8]
    B loc_219E8
loc_219E6:
    MOVS R4, #1
loc_219E8:
    MOV R0, R4
    POP {R4-R6,PC}
```
Output:[
    "Sets up the password database for the current user.",
    "Uses the `getpwent` function from the standard C library to retrieve and store user information."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
help:
loc_118D8:
    PUSH {R3,LR}
    MOV R2, #0x3A570
    MOV R1, #0x2DA34
    MOVS R0, #1
    BLX __printf_chk
    MOVS R0, #0
    BL sub_11888
    MOV R0, #aTSpecifyKeyTyp
    BLX puts
    POP {R3,PC}
```
Output:[
    "Extracts the default value from the x_register",
    "Stores the result in the eax register"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
rsakey_pubblob:
loc_249A8:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x84
    MOV R7, R1
    MOV R8, R2
    MOV R10, R3
    LDR R5, [SP,#0xA8+arg_0]
    MOV R3, #0x4B188
    LDR R3, [R3]
    STR R3, [SP,#0xA8+var_2C]
    MOVS R2, #0
    STR R2, [SP,#0xA8+var_94]
    STR R2, [R1]
    STR.W R2, [R8]
    MOV R1, #0x38180
    BL sub_2BF48
    CBNZ R0, loc_249E6
loc_249DA:
    MOV R3, #0x38184
    STR R3, [SP,#0xA8+var_94]
    B loc_24B54
loc_249E6:
    MOV R4, R0
    MOV R2, R0
    MOVS R1, #0x40
    ADD R0, SP, #0xA8+s
    BLX fgets
    CBZ R0, loc_24A3C
loc_249F4:
    MOV R1, #aSshPrivateKeyF
    ADD R0, SP, #0xA8+s
    BLX strcmp
    CBNZ R0, loc_24A3C
loc_24A04:
    MOVS R2, #0x24
    MOVS R1, #0
    ADD R0, SP, #0xA8+var_90
    BLX memset
    ADD R3, SP, #0xA8+var_94
    STR R3, [SP,#0xA8+var_A4]
    MOVS R3, #0
    STR R3, [SP,#0xA8+var_A8]
    MOV R3, R10
    MOVS R2, #1
    ADD R1, SP, #0xA8+var_90
    MOV R0, R4
    BL sub_24360
    CMP R0, #0
    BEQ.W loc_24B54
loc_24A28:
    MOV R1, R8
    ADD R0, SP, #0xA8+var_90
    BL sub_27F24
    STR R0, [R7]
    ADD R0, SP, #0xA8+var_90
    BL sub_27FC8
    MOVS R0, #1
    B loc_24B60
loc_24A3C:
    MOV R0, R4
    BLX rewind
    MOV R0, R4
    BL sub_17AA4
    BL sub_17348
    MOV R6, R0
    MOV R1, #a0123456789
    BLX strspn
    ADD.W R9, R6, R0
    LDRB R3, [R6,R0]
    CMP R3, #0x20
    BNE loc_24B42
loc_24A64:
    ADD.W R9, R9, #1
    MOVS R3, #0
    STRB R3, [R6,R0]
    MOV R1, #a0123456789
    MOV R0, R9
    BLX strspn
    ADD.W R11, R9, R0
    LDRB.W R3, [R9,R0]
    CMP R3, #0x20
    BNE loc_24B42
loc_24A86:
    ADD.W R11, R11, #1
    MOVS R3, #0
    STRB.W R3, [R9,R0]
    MOV R1, #a0123456789
    MOV R0, R11
    BLX strspn
    ADD.W R2, R11, R0
    LDRB.W R3, [R11,R0]
    CBZ R3, loc_24AB8
loc_24AA8:
    CMP R3, #0x20
    BNE loc_24B42
loc_24AAC:
    ADDS R3, R2, #1
    STR R3, [SP,#0xA8+var_9C]
    MOVS R3, #0
    STRB.W R3, [R11,R0]
    B loc_24ABC
loc_24AB8:
    MOVS R3, #0
    STR R3, [SP,#0xA8+var_9C]
loc_24ABC:
    MOVS R2, #0x24
    MOVS R1, #0
    ADD R0, SP, #0xA8+var_90
    BLX memset
    MOV R0, R9
    BL sub_1C6F0
    STR R0, [SP,#0xA8+var_84]
    MOV R0, R11
    BL sub_1C6F0
    STR R0, [SP,#0xA8+var_88]
    MOVS R2, #0xA
    MOVS R1, #0
    MOV R0, R6
    BLX strtol
    MOV R9, R0
    LDR R0, [SP,#0xA8+var_88]
    BL sub_1BED4
    CMP R0, R9
    BEQ loc_24B0A
loc_24AEC:
    LDR R0, [SP,#0xA8+var_84]
    BL sub_1BAD4
    LDR R0, [SP,#0xA8+var_88]
    BL sub_1BAD4
    MOV R0, R6
    BL sub_17A78
    MOV R3, #0x381DC
    STR R3, [SP,#0xA8+var_94]
    B loc_24B72
loc_24B0A:
    CMP.W R10, #0
    BEQ loc_24B22
loc_24B10:
    LDR R3, [SP,#0xA8+var_9C]
    MOVS R0, #0
    CBZ R3, loc_24B1E
loc_24B16:
    MOV R0, R3
    BL sub_1766C
    B loc_24B1E
loc_24B1E:
    STR.W R0, [R10]
loc_24B22:
    MOV R1, R8
    ADD R0, SP, #0xA8+var_90
    BL sub_27F24
    STR R0, [R7]
    ADD R0, SP, #0xA8+var_90
    BL sub_27FC8
    MOV R0, R6
    BL sub_17A78
    MOV R0, R4
    BLX fclose
    MOVS R0, #1
    B loc_24B60
loc_24B42:
    MOV R0, R6
    BL sub_17A78
    MOV R3, #0x381B8
    STR R3, [SP,#0xA8+var_94]
    B loc_24B72
loc_24B54:
    MOVS R0, #0
    CBZ R5, loc_24B60
loc_24B58:
    LDR R3, [SP,#0xA8+var_94]
    STR R3, [R5]
    MOVS R0, #0
    B loc_24B60
loc_24B60:
    MOV R3, #0x4B188
    LDR R2, [SP,#0xA8+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_24B7E
loc_24B70:
    B loc_24B7A
loc_24B72:
    MOV R0, R4
    BLX fclose
    B loc_24B54
loc_24B7A:
    BLX __stack_chk_fail
loc_24B7E:
    ADD SP, SP, #0x84
    POP.W {R4-R11,PC}
```
Output:[
    "Compute SHA-1 HMAC",
    "Extract SHA-1 hash from a buffer",
    "Calculate SHA-1 hash using a key",
    "Error handling for stack overflow",
    "Stack check fail protection"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
ber_read_id_len:
loc_13FBC:
    CMP R1, #0
    BEQ loc_14068
loc_13FC0:
    PUSH {R3-R7,LR}
    MOV R5, R0
    MOV R6, R3
    MOV R4, R1
    LDRB R3, [R0]
    AND.W R3, R3, #0xE0
    LDR R1, [SP,#0x18+arg_0]
    STR R3, [R1]
    LDRB R3, [R0]
    AND.W R3, R3, #0x1F
    CMP R3, #0x1F
    ITTT 
    STRNE R3, [R2]
    ADDNE R1, R0, #1
    ADDNE.W R4, R4, #0xFFFFFFFF
    BNE loc_14022
loc_13FE6:
    MOVS R3, #0
    STR R3, [R2]
    LDRSB.W R3, [R0]
    CMP R3, #0
    BGE loc_1401A
loc_13FF2:
    ADDS R0, #1
    SUBS R4, #1
    BEQ loc_1406E
loc_13FF8:
    B loc_13FFE
loc_13FFA:
    SUBS R4, #1
    BEQ loc_14074
loc_13FFE:
    MOV R1, R0
    LDR R7, [R2]
    LDRB.W R3, [R0],#1
    AND.W R3, R3, #0x7F
    ORR.W R3, R3, R7,LSL#7
    STR R3, [R2]
    LDRSB.W R3, [R1]
    CMP R3, #0
    BLT loc_13FFA
loc_14018:
    B loc_1401C
loc_1401A:
    MOV R1, R0
loc_1401C:
    ADDS R1, #1
    SUBS R4, #1
    B loc_14022
loc_14022:
    CBZ R4, loc_1407A
loc_14024:
    LDRB R3, [R1]
    TST.W R3, #0x80
    ITT 
    STREQ R3, [R6]
    ADDEQ R7, R1, #1
    BEQ loc_14064
loc_14032:
    AND.W LR, R3, #0x7F
    ADDS R7, R1, #1
    SUBS R4, #1
    CMP LR, R4
    BGT loc_14080
loc_1403E:
    CMP.W LR, #0
    BEQ loc_1405A
loc_14044:
    MOV R3, R1
    ADD R1, LR
    MOVS R0, #0
loc_1404A:
    LDRB.W R2, [R3,#1]!
    ORR.W R0, R2, R0,LSL#8
    CMP R1, R3
    BNE loc_1404A
loc_14056:
    ADD R7, LR
    B loc_1405C
loc_1405A:
    MOVS R0, #0
loc_1405C:
    BL nullsub_2
    STR R0, [R6]
    B loc_14064
loc_14064:
    SUBS R0, R7, R5
    POP {R3-R7,PC}
loc_14068:
    MOV.W R0, #0xFFFFFFFF
    BX LR
loc_1406E:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R7,PC}
loc_14074:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R7,PC}
loc_1407A:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R7,PC}
loc_14080:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R7,PC}
```
Output:[
    "Reads a passphrase from the file specified by `filename` and stores it in the buffer pointed to by `stream`.",
    "If the file cannot be opened, it returns an error code.",
    "If the passphrase is rejected, it returns an error code.",
    "Calls `_fprintf` to print an error message to the standard error stream.",
    "Releases the stack frame after reading the passphrase."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
```json
[
    "dss_public_blob",
    "sub_1C53C",
    "sub_1C5F0",
    "sub_17928",
    "sub_1C5F0",
    "sub_17928",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5F0",
    "sub_1C5
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
__assert_fail:
loc_114B4:
    ADR R12, 0x114BC
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(__assert_fail_ptr - 0x5E4BC)]!
```
Output:[
    "Function to copy memory with bounds check",
    "Uses memcpy for actual memory copying",
    "Includes bounds checking to prevent buffer overflow"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
des_cbc_decrypt:
loc_28374:
    PUSH {R7,LR}
    SUB SP, SP, #0x30
    ADD R7, SP, #0
    STR R0, [R7,#0x30+var_24]
    STR R1, [R7,#0x30+var_28]
    STR R2, [R7,#0x30+var_2C]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_4]
    LDR R3, [R7,#0x30+var_28]
    AND.W R3, R3, #7
    CMP R3, #0
    BEQ loc_283B6
loc_28396:
    MOV R3, #aDesCbcDecrypt
    MOVW R2, #0x279
    MOV R1, #aSshdesC
    MOV R0, #aLen70_0
    BLX __assert_fail
loc_283B6:
    LDR R3, [R7,#0x30+var_2C]
    LDR.W R3, [R3,#0x80]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_2C]
    LDR.W R3, [R3,#0x84]
    STR R3, [R7,#0x30+var_1C]
    MOVS R3, #0
    STR R3, [R7,#0x30+var_18]
    B loc_284A2
loc_283CC:
    LDR R3, [R7,#0x30+var_24]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_14]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #7
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_10]
    ADD.W R0, R7, #0x24
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_10]
    LDR R1, [R7,#0x30+var_14]
    BL sub_27268
    LDR R3, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_20]
    EORS R3, R2
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_8]
    LDR R2, [R7,#0x30+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_20]
    LSRS R3, R3, #0x18
    UXTB R2, R3
    LDR R3, [R7,#0x30+var_24]
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDR R2, [R7,#0x30+var_20]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDR R2, [R7,#0x30+var_20]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #3
    LDR R2, [R7,#0x30+var_20]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x18
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #7
    LDR R2, [R7,#0x30+var_1C]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_24]
    LDR R3, [R7,#0x30+var_14]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_10]
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_18]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_18]
loc_284A2:
    LDR R2, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_28]
    CMP R2, R3
    BCC loc_283CC
loc_284AA:
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_20]
    STR.W R2, [R3,#0x80]
    LDR R3, [R7,#0x30+var_2C]
    LDR R2, [R7,#0x30+var_1C]
    STR.W R2, [R3,#0x84]
    NOP 
    MOV R3, #0x5F758
    LDR R2, [R7,#0x30+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_284D0
loc_284CC:
    BLX __stack_chk_fail
loc_284D0:
    ADDS R7, #0x30
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Extracts and returns the key from an OpenSSH formatted key",
    "Includes operations to handle key parsing, key expansion, and key manipulation",
    "Uses basic assembly instructions for memory management and control flow"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
mkdir:
loc_11388:
    ADR R12, 0x11390
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(mkdir_ptr - 0x5E390)]!
```
Output:[
    "HMACMD5 Ver Result",
    "Function to compute HMACMD5 hash",
    "Stores input arguments in local registers",
    "Computes HMACMD5 hash",
    "Stack check failure",
    "Returns error code"
]<|im_end|>
############
blowfish_msb_decrypt_cbc:
loc_220D0:
    PUSH {R7,LR}
    SUB SP, SP, #0x30
    ADD R7, SP, #0
    STR R0, [R7,#0x30+var_24]
    STR R1, [R7,#0x30+var_28]
    STR R2, [R7,#0x30+var_2C]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_4]
    LDR R3, [R7,#0x30+var_28]
    AND.W R3, R3, #7
    CMP R3, #0
    BEQ loc_22112
loc_220F2:
    MOV R3, #aBlowfishMsbDec
    MOVW R2, #0x199
    MOV R1, #aSshblowfC
    MOV R0, #aLen70
    BLX __assert_fail
loc_22112:
    LDR R3, [R7,#0x30+var_2C]
    ADD.W R3, R3, #0x1040
    ADDS R3, #8
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_2C]
    ADD.W R3, R3, #0x1040
    ADDS R3, #0xC
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_18]
    B loc_22202
loc_2212C:
    LDR R3, [R7,#0x30+var_24]
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #3
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_14]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDRB R3, [R3]
    LSLS R2, R3, #0x18
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDRB R3, [R3]
    LSLS R3, R3, #0x10
    ORRS R2, R3
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDRB R3, [R3]
    LSLS R3, R3, #8
    ORRS R3, R2
    LDR R2, [R7,#0x30+var_24]
    ADDS R2, #7
    LDRB R2, [R2]
    ORRS R3, R2
    STR R3, [R7,#0x30+var_10]
    ADD.W R2, R7, #0x24
    LDR R3, [R7,#0x30+var_2C]
    LDR R1, [R7,#0x30+var_10]
    LDR R0, [R7,#0x30+var_14]
    BL sub_215B8
    LDR R3, [R7,#0x30+var_C]
    LDR R2, [R7,#0x30+var_1C]
    EORS R3, R2
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_8]
    LDR R2, [R7,#0x30+var_18]
    EORS R3, R2
    STR R3, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_1C]
    LSRS R3, R3, #0x18
    UXTB R2, R3
    LDR R3, [R7,#0x30+var_24]
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #1
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #2
    LDR R2, [R7,#0x30+var_1C]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #3
    LDR R2, [R7,#0x30+var_1C]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #4
    LDR R2, [R7,#0x30+var_18]
    LSRS R2, R2, #0x18
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #5
    LDR R2, [R7,#0x30+var_18]
    LSRS R2, R2, #0x10
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #6
    LDR R2, [R7,#0x30+var_18]
    LSRS R2, R2, #8
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #7
    LDR R2, [R7,#0x30+var_18]
    UXTB R2, R2
    STRB R2, [R3]
    LDR R3, [R7,#0x30+var_14]
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_10]
    STR R3, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_24]
    ADDS R3, #8
    STR R3, [R7,#0x30+var_24]
    LDR R3, [R7,#0x30+var_28]
    SUBS R3, #8
    STR R3, [R7,#0x30+var_28]
loc_22202:
    LDR R3, [R7,#0x30+var_28]
    CMP R3, #0
    BGT loc_2212C
loc_22208:
    LDR R3, [R7,#0x30+var_2C]
    ADD.W R3, R3, #0x1040
    ADDS R3, #8
    LDR R2, [R7,#0x30+var_1C]
    STR R2, [R3]
    LDR R3, [R7,#0x30+var_2C]
    ADD.W R3, R3, #0x1040
    ADDS R3, #0xC
    LDR R2, [R7,#0x30+var_18]
    STR R2, [R3]
    NOP 
    MOV R3, #0x5F758
    LDR R2, [R7,#0x30+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_22236
loc_22232:
    BLX __stack_chk_fail
loc_22236:
    ADDS R7, #0x30
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Allocate an EC_POINT structure from the given point coordinates",
    "Store the X and Y coordinates in the EC_POINT structure",
    "Update the EC_POINT structure with the given coordinates",
    "Check if the coordinates are valid",
    "Set the Z coordinate based on the coordinates",
    "Return the EC_POINT structure"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
conf_get_str:
loc_14110:
    PUSH {R7,LR}
    SUB SP, SP, #0x18
    ADD R7, SP, #0
    STR R0, [R7,#0x18+var_14]
    STR R1, [R7,#0x18+var_18]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR R3, [R7,#0x18+var_4]
    MOV R3, #0x5F16C
    LDR R2, [R7,#0x18+var_18]
    LDR.W R3, [R3,R2,LSL#2]
    CMP R3, #0
    BEQ loc_14158
loc_14138:
    MOV R3, #aConfGetStr
    MOVW R2, #0x123
    MOV R1, #aConfC
    MOV R0, #aSubkeytypesPri_0
    BLX __assert_fail
loc_14158:
    MOV R3, #0x5F44C
    LDR R2, [R7,#0x18+var_18]
    LDR.W R3, [R3,R2,LSL#2]
    CMP R3, #2
    BEQ loc_1418A
loc_1416A:
    MOV R3, #aConfGetStr
    MOV.W R2, #0x124
    MOV R1, #aConfC
    MOV R0, #aValuetypesPrim
    BLX __assert_fail
loc_1418A:
    LDR R3, [R7,#0x18+var_18]
    STR R3, [R7,#0x18+var_C]
    LDR R3, [R7,#0x18+var_14]
    LDR R3, [R3]
    ADD.W R1, R7, #0xC
    MOVS R2, #0
    MOV R0, R3
    BL sub_3E230
    STR R0, [R7,#0x18+var_10]
    LDR R3, [R7,#0x18+var_10]
    CMP R3, #0
    BNE loc_141C6
loc_141A6:
    MOV R3, #aConfGetStr
    MOVW R2, #0x127
    MOV R1, #aConfC
    MOV R0, #aEntry
    BLX __assert_fail
loc_141C6:
    LDR R3, [R7,#0x18+var_10]
    LDR R3, [R3,#8]
    MOV R0, R3
    MOV R3, #0x5F758
    LDR R2, [R7,#0x18+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_141E0
loc_141DC:
    BLX __stack_chk_fail
loc_141E0:
    ADDS R7, #0x18
    MOV SP, R7
    POP {R7,PC}
```
Output:```json
[
    "Fputs function is called",
    "It takes two arguments: a pointer to a character buffer and an integer count"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__imp___memset_chk:
loc_4B840:
    IMPORT 
```
Output:
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
key_type_fp:
loc_34DEC:
    PUSH {R4,R5,R7,LR}
    SUB.W SP, SP, #0x498
    ADD R7, SP, #0
    ADDS R3, R7, #4
    STR R0, [R3]
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR.W R3, [R7,#0x498+var_4]
    ADD.W R2, R7, #0x34
    MOV R3, #0x4C838
    MOV R4, R2
    MOV R5, R3
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W R5, {R0-R2}
    STM R4!, {R0,R1}
    STRH R2, [R4]
    ADDS R4, #2
    LSRS R3, R2, #0x10
    STRB R3, [R4]
    ADD.W R2, R7, #0x1C
    MOV R3, #0x4C328
    MOV R4, R2
    MOV R5, R3
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W R5, {R0,R1}
    STR R0, [R4]
    ADDS R4, #4
    STRB R1, [R4]
    ADD.W R2, R7, #0x70
    MOV R3, #0x4C854
    MOV R4, R2
    MOV R5, R3
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDR R3, [R5]
    STRB R3, [R4]
    ADD.W R2, R7, #0x50
    MOV R3, #0x4C878
    MOV R4, R2
    MOV R5, R3
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W R5, {R0-R3}
    STM R4!, {R0-R2}
    STRH R3, [R4]
    ADDS R4, #2
    LSRS R3, R3, #0x10
    STRB R3, [R4]
    ADD.W R2, R7, #0x10
    MOV R3, #0x4C898
    MOV R4, R2
    LDM.W R3, {R0-R2}
    STM.W R4, {R0-R2}
    ADDS R3, R7, #4
    ADD.W R0, R7, #0x94
    LDR R3, [R3]
    MOVW R2, #0x3FF
    MOVS R1, #1
    BLX fread
    MOV R2, R0
    ADD.W R3, R7, #8
    STR R2, [R3]
    ADDS R3, R7, #4
    LDR R0, [R3]
    BLX rewind
    ADD.W R3, R7, #8
    LDR R3, [R3]
    CMP R3, #0
    BGE loc_34ECA
loc_34EC6:
    MOVS R3, #0
    B loc_35112
loc_34ECA:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    CMP R3, #0x1F
    BGT loc_34ED8
loc_34ED4:
    MOVS R3, #1
    B loc_35112
loc_34ED8:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    CMP R3, #0
    BLE loc_34EEE
loc_34EE2:
    ADD.W R3, R7, #8
    LDR R3, [R3]
    CMP.W R3, #0x400
    BCC loc_34F0E
loc_34EEE:
    MOV R3, #aKeyTypeFp
    MOVW R2, #0x674
    MOV R1, #aSshpubkC
    MOV R0, #aI0ISizeofBuf
    BLX __assert_fail
loc_34F0E:
    ADD.W R2, R7, #0x94
    ADD.W R3, R7, #8
    LDR R3, [R3]
    ADD R3, R2
    MOVS R2, #0
    STRB R2, [R3]
    ADD.W R3, R7, #0x94
    MOVS R2, #0x20
    MOV R1, #aSshPrivateKeyF
    MOV R0, R3
    BLX memcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_34F3C
loc_34F38:
    MOVS R3, #2
    B loc_35112
loc_34F3C:
    ADD.W R1, R7, #0x34
    ADD.W R3, R7, #0x94
    MOVS R2, #0x1A
    MOV R0, R3
    BLX memcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_34F56
loc_34F52:
    MOVS R3, #9
    B loc_35112
loc_34F56:
    ADD.W R1, R7, #0x1C
    ADD.W R3, R7, #0x94
    MOVS R2, #0x14
    MOV R0, R3
    BLX memcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_34F70
loc_34F6C:
    MOVS R3, #3
    B loc_35112
loc_34F70:
    ADD.W R1, R7, #0x50
    ADD.W R3, R7, #0x94
    MOVS R2, #0x1E
    MOV R0, R3
    BLX memcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_34F8A
loc_34F86:
    MOVS R3, #6
    B loc_35112
loc_34F8A:
    ADD.W R1, R7, #0x10
    ADD.W R3, R7, #0x94
    MOVS R2, #0xB
    MOV R0, R3
    BLX memcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_34FA4
loc_34FA0:
    MOVS R3, #5
    B loc_35112
loc_34FA4:
    ADD.W R1, R7, #0x70
    ADD.W R3, R7, #0x94
    MOVS R2, #0x20
    MOV R0, R3
    BLX memcmp
    MOV R3, R0
    CMP R3, #0
    BNE loc_34FBE
loc_34FBA:
    MOVS R3, #7
    B loc_35112
loc_34FBE:
    ADD.W R3, R7, #0x94
    MOV R1, #a0123456789
    MOV R0, R3
    BLX strspn
    MOV R1, R0
    ADD.W R3, R7, #0xC
    ADD.W R2, R7, #0x94
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0x20
    BNE loc_35078
loc_34FEA:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    ADDS R3, #1
    MOV R1, #a0123456789
    MOV R0, R3
    BLX strspn
    MOV R3, R0
    ADDS R2, R3, #1
    ADD.W R3, R7, #0xC
    ADD.W R1, R7, #0xC
    LDR R1, [R1]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0x20
    BNE loc_35078
loc_3501E:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    ADDS R3, #1
    MOV R1, #a0123456789
    MOV R0, R3
    BLX strspn
    MOV R3, R0
    ADDS R2, R3, #1
    ADD.W R3, R7, #0xC
    ADD.W R1, R7, #0xC
    LDR R1, [R1]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0x20
    BEQ loc_3506A
loc_35052:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0xA
    BEQ loc_3506A
loc_3505E:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0
    BNE loc_3506E
loc_3506A:
    MOVS R3, #1
    B loc_35070
loc_3506E:
    MOVS R3, #0
loc_35070:
    CMP R3, #0
    BEQ loc_35078
loc_35074:
    MOVS R3, #8
    B loc_35112
loc_35078:
    ADD.W R3, R7, #0x94
    MOV R1, #asc_4C700
    MOV R0, R3
    BLX strcspn
    MOV R1, R0
    ADD.W R3, R7, #0xC
    ADD.W R2, R7, #0x94
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0xC
    LDR R2, [R3]
    ADD.W R3, R7, #0x94
    SUBS R3, R2, R3
    ADD.W R2, R7, #0x94
    MOV R1, R2
    MOV R0, R3
    BL sub_32CC8
    MOV R3, R0
    CMP R3, #0
    BEQ loc_35110
loc_350B6:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    ADDS R3, #1
    MOV R1, #a0123456789abcd
    MOV R0, R3
    BLX strspn
    MOV R3, R0
    ADDS R2, R3, #1
    ADD.W R3, R7, #0xC
    ADD.W R1, R7, #0xC
    LDR R1, [R1]
    ADD R2, R1
    STR R2, [R3]
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0x20
    BEQ loc_35102
loc_350EA:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0xA
    BEQ loc_35102
loc_350F6:
    ADD.W R3, R7, #0xC
    LDR R3, [R3]
    LDRB R3, [R3]
    CMP R3, #0
    BNE loc_35106
loc_35102:
    MOVS R3, #1
    B loc_35108
loc_35106:
    MOVS R3, #0
loc_35108:
    CMP R3, #0
    BEQ loc_35110
loc_3510C:
    MOVS R3, #0xA
    B loc_35112
loc_35110:
    MOVS R3, #1
loc_35112:
    MOV R0, R3
    MOV R3, #0x5F758
    LDR.W R2, [R7,#0x498+var_4]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_3512A
loc_35126:
    BLX __stack_chk_fail
loc_3512A:
    ADD.W R7, R7, #0x498
    MOV SP, R7
    POP {R4,R5,R7,PC}
```
Output:[
    "Subtracting two numbers",
    "Handling carry-over from subtraction",
    "Updating the result",
    "Using bitwise operations"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
abort:
loc_11484:
    ADR R12, 0x1148C
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(abort_ptr - 0x5E48C)]!
```
Output:[
    "Load the off_35670 address from the constant pool",
    "Push R4 and LR onto the stack",
    "Move R1 to R3",
    "Store R3 at the current R2",
    "Call sub_22674 to perform the operation",
    "Move R3 to R0",
    "Store R3 at the next R4",
    "Pop R4 and PC from the stack"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
[
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY",
    "HMACMD5_KEY
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
des3_decrypt_pubkey_ossh:
loc_1EF84:
    PUSH.W {R4-R8,LR}
    SUB SP, SP, #0x1A0
    MOV R4, R0
    MOV R5, R1
    MOV R7, R2
    MOV R8, R3
    MOV R6, #0x4B188
    LDR R3, [R6]
    STR R3, [SP,#0x1B8+var_1C]
    LDRB R3, [R0,#4]
    LDRB R1, [R0,#5]
    LSLS R1, R1, #0x10
    ORR.W R1, R1, R3,LSL#24
    LDRB R3, [R0,#7]
    ORRS R1, R3
    LDRB.W LR, [R0,#6]
    LDRB R3, [R0]
    LDRB R0, [R0,#1]
    LSLS R0, R0, #0x10
    ORR.W R0, R0, R3,LSL#24
    LDRB R3, [R4,#3]
    ORRS R0, R3
    LDRB R3, [R4,#2]
    ADD R2, SP, #0x1B8+var_1B4
    ORR.W R1, R1, LR,LSL#8
    ORR.W R0, R0, R3,LSL#8
    BL sub_1D374
    LDRB R3, [R4,#0xC]
    LDRB R1, [R4,#0xD]
    LSLS R1, R1, #0x10
    ORR.W R1, R1, R3,LSL#24
    LDRB R3, [R4,#0xF]
    ORRS R1, R3
    LDRB.W LR, [R4,#0xE]
    LDRB R3, [R4,#8]
    LDRB R0, [R4,#9]
    LSLS R0, R0, #0x10
    ORR.W R0, R0, R3,LSL#24
    LDRB R3, [R4,#0xB]
    ORRS R0, R3
    LDRB R3, [R4,#0xA]
    ADD R2, SP, #0x1B8+var_12C
    ORR.W R1, R1, LR,LSL#8
    ORR.W R0, R0, R3,LSL#8
    BL sub_1D374
    LDRB R3, [R4,#0x14]
    LDRB R1, [R4,#0x15]
    LSLS R1, R1, #0x10
    ORR.W R1, R1, R3,LSL#24
    LDRB R3, [R4,#0x17]
    ORRS R1, R3
    LDRB.W LR, [R4,#0x16]
    LDRB R3, [R4,#0x10]
    LDRB R0, [R4,#0x11]
    LSLS R0, R0, #0x10
    ORR.W R0, R0, R3,LSL#24
    LDRB R3, [R4,#0x13]
    ORRS R0, R3
    LDRB R3, [R4,#0x12]
    ADD R2, SP, #0x1B8+var_A4
    ORR.W R1, R1, LR,LSL#8
    ORR.W R0, R0, R3,LSL#8
    BL sub_1D374
    LDRB R2, [R5]
    LDRB R3, [R5,#1]
    LSLS R3, R3, #0x10
    ORR.W R2, R3, R2,LSL#24
    LDRB R3, [R5,#3]
    ORRS R3, R2
    LDRB R2, [R5,#2]
    ORR.W R3, R3, R2,LSL#8
    STR R3, [SP,#0x1B8+var_134]
    LDRB R2, [R5,#4]
    LDRB R3, [R5,#5]
    LSLS R3, R3, #0x10
    ORR.W R2, R3, R2,LSL#24
    LDRB R3, [R5,#7]
    ORRS R3, R2
    LDRB R2, [R5,#6]
    ORR.W R3, R3, R2,LSL#8
    STR R3, [SP,#0x1B8+var_130]
    ADD R2, SP, #0x1B8+var_1B4
    MOV R1, R8
    MOV R0, R7
    BL sub_1EA40
    MOV.W R1, #0x198
    ADD R0, SP, #0x1B8+var_1B4
    BL sub_17BF8
    LDR R2, [SP,#0x1B8+var_1C]
    LDR R3, [R6]
    CMP R2, R3
    BEQ loc_1F07A
loc_1F076:
    BLX __stack_chk_fail
loc_1F07A:
    ADD SP, SP, #0x1A0
    POP.W {R4-R8,PC}
```
Output:```json
[
    "Locates the first occurrence of a character in a string",
    "Stores the address of the first occurrence in the EAX register",
    "Uses the EAX register to store the address of the first occurrence"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
chomp:
loc_17348:
    PUSH {R4,LR}
    MOV R4, R0
    CBZ R0, loc_1737A
loc_1734E:
    BLX strlen
    MOV R3, R0
    CMP R0, #0
    BLE loc_17376
loc_17358:
    SUBS R0, #1
    ADDS R1, R4, R0
    LDRB R2, [R4,R0]
    CMP R2, #0xA
    IT 
    CMPNE R2, #0xD
    BNE loc_17376
loc_17366:
    SUBS R3, #1
    BEQ loc_17376
loc_1736A:
    LDRB.W R2, [R1,#-1]!
    CMP R2, #0xA
    IT 
    CMPNE R2, #0xD
    BEQ loc_17366
loc_17376:
    MOVS R2, #0
    STRB R2, [R4,R3]
loc_1737A:
    MOV R0, R4
    POP {R4,PC}
```
Output:```assembly
fontspec_deserialise:
loc_2CC8C:

loc_2CCE4:
    PUSH {R3-R5,LR}
    MOV R5, R2
    MOV R2, R1
    MOVS R1, #0
    MOV R4, R0
    BLX memchr
    CBZ R0, locret_2CD04
loc_2CCF4:
    SUBS R3, R0, R4
    MOV R0, R4
    ADDS R3, #1
    STR R3, [R5]
    POP.W {R3-R5,LR}
    B.W sub_2CC8C
loc_2CD04:
    POP {R3-R5,PC}
```
Output:```json
[
    "Finds and writes data to a file.",
    "Parameters: pointer to file descriptor, buffer to write, size of buffer."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ec_edgenerate:
loc_239DC:
    PUSH {R3-R5,LR}
    MOV R5, R1
    MOV R4, R0
    MOV R2, R0
    ADDS R1, R0, #4
    MOV R0, R5
    BL sub_23960
    CBNZ R0, loc_239F2
loc_239EE:
    MOVS R0, #0
    POP {R3-R5,PC}
loc_239F2:
    MOV R0, R5
    BL sub_1C678
    MOV R5, R0
    CMP R0, #0
    BEQ loc_239EE
loc_239FE:
    MOV R3, #0x4C16C
    MOV R1, R0
    LDR R0, [R3]
    BL sub_1C800
    STR R0, [R4,#0x18]
    MOV R0, R5
    BL sub_1C114
    LDR R0, [R4,#0x18]
    CMP R0, #0
    BEQ loc_239EE
loc_23A1C:
    LDR R1, [R4,#4]
    BL sub_2330C
    MOV R5, R0
    CBZ R0, loc_23A3A
loc_23A26:
    LDR R2, [R0,#4]
    MOVS R1, #0
    LDR R3, [R0,#8]
    STR R1, [R4,#0x10]
    STR R2, [R4,#8]
    STR R3, [R4,#0xC]
    BL sub_17E14
    MOVS R0, #1
    POP {R3-R5,PC}
loc_23A3A:
    LDR R0, [R4,#0x18]
    BL sub_1C114
    STR R5, [R4,#0x18]
    MOV R0, R5
    POP {R3-R5,PC}
```
Output:[
    "Subtract word number from argument",
    "Adjust word number based on internal add shift value",
    "Store internal add shift value in internal add shift register",
    "Store word number in internal add shift register",
    "Adjust word number based on internal add shift value",
    "Adjust word number based on internal add shift value"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
decbn:
loc_1C380:
    LDR R3, [R0]
    CMP R3, #1
    BLE loc_1C3B8
loc_1C386:
    LDR R1, [R0,#4]
    ADDS R2, R0, #4
    CBNZ R1, loc_1C3BC
loc_1C38C:
    PUSH {R4}
    MOVS R3, #1
    MOV.W R4, #0xFFFFFFFF
    B loc_1C39C
loc_1C396:
    LDR.W R1, [R2,#4]!
    CBNZ R1, loc_1C3AE
loc_1C39C:
    STR R4, [R2]
    ADDS R3, #1
    LDR R1, [R0]
    CMP R1, R3
    BGT loc_1C396
loc_1C3A6:
    LDR.W R1, [R0,R3,LSL#2]
    ADD.W R2, R0, R3,LSL#2
loc_1C3AE:
    SUBS R1, #1
    POP.W {R4}
    STR R1, [R2]
    BX LR
loc_1C3B8:
    LDR R1, [R0,#4]
    ADDS R2, R0, #4
loc_1C3BC:
    SUBS R1, #1
    STR R1, [R2]
    BX LR
```
Output:[
    "Reads an ungetc character from the input buffer and updates the return address to the next instruction.",
    "Moves the current return address to $t9, which is used to jump to the next instruction after reading the character."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
rsa2_freekey:
loc_287C0:

loc_287D4:
    B.W sub_287C0
```
Output:[
    "Bitwise shift operations",
    "Shift left operation",
    "Shift right operation",
    "Addition and subtraction operations",
    "Logical operations",
    "Bitwise AND operation"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
fdopen:
loc_1111C:
    ADR R12, 0x11124
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(fdopen_ptr - 0x4B124)]!
```
Output:[
    "Writes a formatted string to the standard output (stdout).",
    "The function takes three parameters: a pointer to a null-terminated character array `buf`, a pointer to an integer `size`, and a pointer to a character array `format`. It returns the number of characters written or -1 if an error occurred.",
    "It checks for overflow before writing to avoid buffer overflows."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
smemclr_0:
loc_173D8:
    LDRB.W R3, [R4,#1]!
    CMP R3, #0
    BNE loc_173D8
loc_173E0:
    POP {R4,PC}
```
Output:```json
[
    {
        "feature": "Encodes a message from ASCII to hexadecimal",
        "description": "The function `des_encipher` takes an ASCII message as input and encodes it into hexadecimal."
    },
    {
        "feature": "Translates binary data into ASCII",
        "description": "The function `des_encipher` decodes a hexadecimal message back into its original ASCII form."
    }
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
des3_decrypt_pubkey:
loc_22A6C:
    PUSH {R4-R7,LR}
    MOV R4, R0
    LDRB R6, [R0,#5]
    MOVW R7, #0x6190
    LDRB.W LR, [R0,#4]
    MOVT.W R7, #5
    LDRB R3, [R0,#1]
    MOV R5, R1
    LDRB R0, [R0]
    LSLS R6, R6, #0x10
    ORR.W R6, R6, LR,LSL#24
    LDRB.W LR, [R4,#3]
    LSLS R3, R3, #0x10
    LDRB.W R12, [R4,#6]
    LDRB R1, [R4,#7]
    ORR.W R3, R3, R0,LSL#24
    LDRB R0, [R4,#2]
    ORR.W R3, R3, LR
    LDR.W LR, [R7]
    SUB SP, SP, #0x1A4
    ORRS R1, R6
    MOV R6, R2
    ORR.W R1, R1, R12,LSL#8
    ORR.W R0, R3, R0,LSL#8
    ADD R2, SP, #0x1B8+var_1B4
    STR.W LR, [SP,#0x1B8+var_1C]
    BL sub_20D9C
    LDRB R2, [R4,#0xD]
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_12C
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    LDRB R2, [R4,#5]
    LDRB R1, [R4,#4]
    LDRB R3, [R4,#1]
    LDRB R0, [R4]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#7]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#6]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#3]
    LDRB R0, [R4,#2]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_A4
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    ADD R2, SP, #0x1B8+var_A4
    MOV R1, R6
    MOV R0, R5
    BL sub_22384
    ADD R2, SP, #0x1B8+var_12C
    MOV R1, R6
    MOV R0, R5
    BL sub_22278
    ADD R2, SP, #0x1B8+var_1B4
    MOV R1, R6
    MOV R0, R5
    BL sub_22384
    ADD R0, SP, #0x1B8+var_1B4
    MOV.W R1, #0x198
    BL sub_194E4
    LDR R2, [SP,#0x1B8+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_22B5C
loc_22B58:
    ADD SP, SP, #0x1A4
    POP {R4-R7,PC}
loc_22B5C:
    BLX __stack_chk_fail
```
Output:[
    "tcsetattr",
    "sets the attributes of a terminal device"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp_remove:
loc_5694C:
    IMPORT 
```
Output:```json
[
    "Create a key in memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Convert toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "Use toint and freebn functions to convert integers to bytes and free memory",
    "ec_nist_alg_and_curve_by_bits:
loc_23104:
    PUSH {R4,LR}
    CMP.W R0, #0x180
    BEQ loc_23122
loc_2310C:
    MOVW R3, #0x209
    CMP R0, R3
    BEQ loc_23128
loc_23114:
    CMP.W R0, #0x100
    ITT 
    LDREQ R3, =off_349AC
    STREQ R3, [R2]
    BEQ loc_2312C
loc_23120:
    B loc_2313C
loc_23122:
    LDR R3, =off_349E8
    STR R3, [R2]
    B loc_2312C
loc_23128:
    LDR R3, =off_34A24
    STR R3, [R2]
loc_2312C:
    MOV R4, R1
    LDR R3, [R2]
    LDR R3, [R3,#0x38]
    LDR R3, [R3]
    BLX R3
    STR R0, [R4]
    MOVS R0, #1
    POP {R4,PC}
loc_2313C:
    MOVS R0, #0
    POP {R4,PC}
```
Output:[
    "Saves the current return address and restores it after the call to _closedir."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
dss_openssh_fmtkey:
loc_1F6B8:
    PUSH.W {R4-R10,LR}
    MOV R4, R0
    MOV R6, R1
    MOV R7, R2
    LDR R0, [R0]
    BL sub_1BF54
    MOV R5, R0
    LDR R0, [R4,#4]
    BL sub_1BF54
    ADD R5, R0
    LDR R0, [R4,#8]
    BL sub_1BF54
    ADD R5, R0
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    ADD R5, R0
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    ADD R0, R5
    CMP R0, R7
    BGT.W locret_1F8FA
loc_1F6F0:
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6]
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,#1]
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,#2]
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,#3]
    LDR R0, [R4]
    BL sub_1BF54
    MOV R9, R0
    SUBS R5, R0, #5
    CMP R0, #4
    BEQ loc_1F742
loc_1F72C:
    ADDS R7, R6, #3
loc_1F72E:
    MOV R1, R5
    LDR R0, [R4]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F72E
loc_1F742:
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    ADD.W R5, R9, #1
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R9, #2
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R9, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R8, R9, #4
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUB.W R10, R0, #5
    CMP R0, #4
    BEQ loc_1F7B0
loc_1F792:
    MOV R5, R10
loc_1F794:
    MOV R1, R5
    LDR R0, [R4,#4]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F794
loc_1F7A8:
    ADD.W R9, R9, #5
    ADD.W R8, R9, R10
loc_1F7B0:
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R8]
    ADD.W R5, R8, #1
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R8, #2
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R8, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R9, R8, #4
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUB.W R10, R0, #5
    CMP R0, #4
    BEQ loc_1F81E
loc_1F800:
    MOV R5, R10
loc_1F802:
    MOV R1, R5
    LDR R0, [R4,#8]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F802
loc_1F816:
    ADD.W R8, R8, #5
    ADD.W R9, R8, R10
loc_1F81E:
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    ADD.W R5, R9, #1
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R9, #2
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R9, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R8, R9, #4
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUB.W R10, R0, #5
    CMP R0, #4
    BEQ loc_1F88A
loc_1F86E:
    MOV R5, R10
loc_1F870:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F870
loc_1F884:
    ADD.W R8, R9, #5
    ADD R8, R10
loc_1F88A:
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R8]
    ADD.W R5, R8, #1
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R8, #2
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R8, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R5, R8, #4
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R6, R0, #5
    CMP R0, #4
    BEQ loc_1F8F8
loc_1F8D8:
    MOV R5, R6
loc_1F8DA:
    MOV R1, R5
    LDR R0, [R4,#0x10]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F8DA
loc_1F8EE:
    ADD.W R0, R8, #5
    ADD R0, R6
    POP.W {R4-R10,PC}
loc_1F8F8:
    MOV R0, R5
loc_1F8FA:
    POP.W {R4-R10,PC}
```
Output:[
    "Subroutine to print error messages and prompt for key generation",
    "Calls printf_chk to handle errors",
    "Calls sub_402179 to display a message",
    "Calls _puts to output a message",
    "Adds back the stack pointer"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
old_keyfile_warning:
loc_2C4E8:
    PUSH {R4,R5,LR}
    MOVW R4, #0xC188
    MOVW R5, #0xC7D8
    MOVT.W R4, #4
    MOVT.W R5, #4
    SUB SP, SP, #0x44
    LDR R2, [R4]
    LDR R3, [R5,#(dword_4C814 - 0x4C7D8)]
    STR R2, [SP,#0x50+var_14]
    CBNZ R3, loc_2C530
loc_2C504:
    MOV R3, #0x4C190
    MOVW R2, #0x165
    MOVS R1, #1
    LDR R3, [R3]
    LDR R0, =aYouAreLoadingA
    BLX fwrite
    LDR R3, [R5,#(dword_4C814 - 0x4C7D8)]
    CBZ R3, loc_2C524
loc_2C51E:
    MOV R0, SP
    BL sub_2BED4
loc_2C524:
    LDR R2, [SP,#0x50+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_2C538
loc_2C52C:
    ADD SP, SP, #0x44
    POP {R4,R5,PC}
loc_2C530:
    MOV R0, SP
    BL sub_2BEB4
    B loc_2C504
loc_2C538:
    BLX __stack_chk_fail
```
Output:```json
[
    "Moves data from one memory location to another."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__vfprintf_chk:
loc_11334:
    ADR R12, 0x1133C
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(__vfprintf_chk_ptr - 0x4B33C)]!
```
Output:- `conf_copy_into` is a function that performs a copy operation from memory to another memory location.
- It takes four parameters: `rdi`, `rsi`, `rbx`, and `rbp`.
- The function uses `sub_404090` to perform a simple subtraction operation and `sub_40ACA0` to perform a multiplication operation.
- The function then checks if the result is zero. If it is, it jumps to `loc_404370`.
- The function returns to the caller with a return value.<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
modpow_simple:
loc_1CF74:
    LDR R4, [SP,#0x60+var_34]
    MOV R8, R1
    MOV R1, R4
    BL sub_1CF1C
    LDR R7, [R4]
    MOVS R1, #4
    STR R0, [SP,#0x60+var_38]
    MOV R0, R7
    BL sub_17928
    CMP R7, #0
    IT 
    MOVGT R3, #0
    MOV R10, R0
    ITT 
    SUBGT R1, R0, #4
    LDRGT R0, [SP,#0x60+var_34]
    BLE loc_1CFAC
loc_1CF9A:
    LDR R2, [R0]
    SUBS R2, R2, R3
    ADDS R3, #1
    CMP R7, R3
    LDR.W R2, [R0,R2,LSL#2]
    STR.W R2, [R1,#4]!
    BNE loc_1CF9A
loc_1CFAC:
    MOVS R1, #4
    MOV R0, R7
    BL sub_17928
    LDR R3, [SP,#0x60+var_38]
    LDR R3, [R3]
    SUBS R1, R7, R3
    CMP R1, #0
    STR R0, [SP,#0x60+var_3C]
    BLE loc_1CFD4
loc_1CFC0:
    LDR R3, [SP,#0x60+var_3C]
    MOVS R2, #0
    ADD.W R0, R3, R1,LSL#2
loc_1CFC8:
    STR.W R2, [R3],#4
    CMP R3, R0
    BNE loc_1CFC8
loc_1CFD0:
    LDR R3, [SP,#0x60+var_38]
    LDR R3, [R3]
loc_1CFD4:
    CMP R3, #0
    BLE loc_1CFF4
loc_1CFD8:
    LDR R2, [SP,#0x60+var_3C]
    LDR R0, [SP,#0x60+var_38]
    ADD.W R1, R2, R1,LSL#2
    MOVS R2, #0
loc_1CFE2:
    SUBS R3, R3, R2
    ADDS R2, #1
    LDR.W R3, [R0,R3,LSL#2]
    STR.W R3, [R1],#4
    LDR R3, [R0]
    CMP R3, R2
    BGT loc_1CFE2
loc_1CFF4:
    LSLS R3, R7, #1
    MOVS R1, #4
    STR R3, [SP,#0x60+var_44]
    MOV R0, R3
    MOV R4, R3
    BL sub_17928
    MOVS R1, #4
    MOV R6, R0
    MOV R0, R4
    BL sub_17928
    CMP R4, #0
    MOV.W R3, R7,LSL#3
    IT 
    STRLE R3, [SP,#0x60+var_30]
    MOV R5, R0
    BLE loc_1D02C
loc_1D01A:
    MOV R2, R3
    STR R3, [SP,#0x60+var_30]
    ADDS R1, R6, R2
    MOV R3, R6
    MOVS R2, #0
loc_1D024:
    STR.W R2, [R3],#4
    CMP R3, R1
    BNE loc_1D024
loc_1D02C:
    LDR R3, [SP,#0x60+var_30]
    CMP R7, #0x32
    MOV.W R2, #1
    ADD R3, R6
    STR.W R2, [R3,#-4]
    ITTT 
    MOVLE R3, #0
    MOVLE R0, R3
    STRLE R3, [SP,#0x60+var_2C]
    BLE loc_1D05A
loc_1D044:
    MOV R3, R7
    MOVS R0, #0
loc_1D048:
    SUB.W R3, R3, R3,ASR#1
    ADDS R3, #1
    CMP R3, #0x32
    ADD.W R0, R0, R3,LSL#2
    BGT loc_1D048
loc_1D056:
    LSLS R3, R0, #2
    STR R3, [SP,#0x60+var_2C]
loc_1D05A:
    MOVS R1, #4
    MOV.W R11, #0
    BL sub_17928
    LDR.W R9, [R8]
    ADD.W R1, R8, R9,LSL#2
    STR R0, [SP,#0x60+var_48]
    MOVS R0, #1
loc_1D070:
    MOVS R4, #0x1F
    B loc_1D086
loc_1D074:
    LDR R3, [R1]
    LSL.W R2, R0, R4
    TST R2, R3
    BNE loc_1D08A
loc_1D07E:
    ADDS.W R4, R4, #0xFFFFFFFF
    BCC.W loc_1D20E
loc_1D086:
    CMP R11, R9
    BLT loc_1D074
loc_1D08A:
    LDR.W R0, [R10]
    MOVS R3, #0
    MOVS R2, #5
    STR R3, [SP,#0x60+var_4C]
    MOV.W R12, #0
    MOVS R3, #0x10
    MOV R1, R0
loc_1D09C:
    RSB.W LR, R3, #0x20
    LSRS.W LR, R1, LR
    ITT 
    LSLEQ R1, R3
    ADDEQ R12, R3
    SUBS R2, #1
    MOV.W R3, R3,ASR#1
    BNE loc_1D09C
loc_1D0B2:
    MOV R3, R12
    STR.W R12, [SP,#0x60+var_4C]
    MOV R2, R12
    CBZ R3, loc_1D0D0
loc_1D0BC:
    CMP R7, #1
    LSL.W R0, R0, R3
    ITTTT 
    RSBGT.W R2, R12, #0x20
    LDRGT.W R3, [R10,#4]
    LSRGT R3, R2
    ORRGT R0, R3
loc_1D0D0:
    BL sub_1B4C8
    CMP R11, R9
    MOV.W R9, R7,LSL#2
    STR R0, [SP,#0x60+var_40]
    BLT loc_1D0E6
loc_1D0DE:
    B loc_1D16A
loc_1D0E0:
    ADDS.W R4, R4, #0xFFFFFFFF
    BCC loc_1D15C
loc_1D0E6:
    LDR R3, [SP,#0x60+var_48]
    ADD.W R1, R6, R9
    MOV R2, R5
    MOV R0, R1
    STR R3, [SP,#0x60+var_60]
    MOV R3, R7
    BL sub_1BAB8
    LDR R3, [SP,#0x60+var_4C]
    MOVS R2, #0
    MOV R0, R5
    STR R2, [SP,#0x60+var_60]
    MOV R2, R10
    STR R3, [SP,#0x60+var_58]
    LDR R3, [SP,#0x60+var_40]
    LDR R1, [SP,#0x60+var_44]
    STR R3, [SP,#0x60+var_5C]
    MOV R3, R7
    BL sub_1B6CC
    LDR.W R2, [R8]
    MOVS R3, #1
    SUB.W R2, R2, R11
    LSLS R3, R4
    LDR.W R2, [R8,R2,LSL#2]
    TST R3, R2
    ITTT 
    MOVEQ R3, R6
    MOVEQ R6, R5
    MOVEQ R5, R3
    BEQ loc_1D0E0
loc_1D12C:
    LDR R3, [SP,#0x60+var_48]
    MOV R2, R6
    LDR R1, [SP,#0x60+var_3C]
    ADD.W R0, R5, R9
    STR R3, [SP,#0x60+var_60]
    MOV R3, R7
    BL sub_1BAB8
    LDR R3, [SP,#0x60+var_4C]
    MOVS R2, #0
    LDR R1, [SP,#0x60+var_44]
    STR R2, [SP,#0x60+var_60]
    MOV R0, R6
    STR R3, [SP,#0x60+var_58]
    MOV R2, R10
    LDR R3, [SP,#0x60+var_40]
    STR R3, [SP,#0x60+var_5C]
    MOV R3, R7
    BL sub_1B6CC
    ADDS.W R4, R4, #0xFFFFFFFF
    BCS loc_1D0E6
loc_1D15C:
    LDR.W R3, [R8]
    ADD.W R11, R11, #1
    MOVS R4, #0x1F
    CMP R3, R11
    BGT loc_1D0E6
loc_1D16A:
    LDR R3, [SP,#0x60+var_34]
    LDR R0, [R3]
    BL sub_1BA70
    CMP R7, #0
    ITT 
    ADDGT.W R1, R6, R9
    MOVGT R3, #0
    MOV R4, R0
    BLE loc_1D192
loc_1D180:
    LDR R2, [R4]
    LDR.W R0, [R1],#4
    SUBS R2, R2, R3
    ADDS R3, #1
    CMP R7, R3
    STR.W R0, [R4,R2,LSL#2]
    BNE loc_1D180
loc_1D192:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1D1B4
loc_1D198:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBNZ R1, loc_1D1B4
loc_1D1A2:
    SUBS R3, #1
    B loc_1D1AE
loc_1D1A6:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1D1B4
loc_1D1AE:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_1D1A6
loc_1D1B4:
    LDR R7, [SP,#0x60+var_30]
    MOV R0, R6
    MOV R1, R7
    BL sub_17E64
    MOV R0, R6
    BL sub_17E14
    LDR R6, [SP,#0x60+var_48]
    LDR R1, [SP,#0x60+var_2C]
    MOV R0, R6
    BL sub_17E64
    MOV R0, R6
    BL sub_17E14
    MOV R1, R7
    MOV R0, R5
    BL sub_17E64
    MOV R0, R5
    BL sub_17E14
    MOV R1, R9
    MOV R0, R10
    BL sub_17E64
    MOV R0, R10
    BL sub_17E14
    LDR R5, [SP,#0x60+var_3C]
    MOV R1, R9
    MOV R0, R5
    BL sub_17E64
    MOV R0, R5
    BL sub_17E14
    LDR R0, [SP,#0x60+var_38]
    BL sub_1C114
    MOV R0, R4
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_1D20E:
    ADD.W R11, R11, #1
    SUBS R1, #4
    B loc_1D070
loc_1D216:
    MOVW R1, #0x422C
    MOVW R0, #0x4268
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModpowSimple
    MOVW R2, #0x3B9
    BLX __assert_fail
```
Output:[
    "Extracts the location of the first character of a wide character string."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
pclose:
loc_11544:
    ADR R12, 0x1154C
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(pclose_ptr - 0x4B54C)]!
```
Output:[
    "Subroutine to print a message to the console",
    "Moves the stack pointer (rsp) by 8 bytes",
    "Stores addresses of strings 'aRelease070' and 'aPuttygenKeyGen' into registers",
    "Sets the instruction set register 'eax' to 0",
    "Calls the printf_chk function with the specified format string and arguments",
    "Loads the standard output (cs:stdout) into the register 'rcx'",
    "Loads the address of 'aUsagePuttygenK' into the register 'edi'",
    "Sets the length of the format string to 0xA0",
    "Sets the instruction set register 'esi' to 1",
    "Calls the fwrite function with the specified file descriptor and buffer",
    "Loads the address of 'aTSpecifyKeyTyp' into the register 'edi'",
    "Adds 8 bytes to the stack pointer (rsp)",
    "Jumps to the _puts function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ecp_addm:
loc_2C3F8:
    PUSH {R7,LR}
    SUB SP, SP, #0x38
    ADD R7, SP, #8
    STR R0, [R7,#0x30+var_24]
    STR R1, [R7,#0x30+var_28]
    STR R2, [R7,#0x30+var_2C]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3,#0xC]
    STR R3, [R7,#0x30+var_20]
    LDR R3, [R7,#0x30+var_20]
    CMP R3, #0
    BNE loc_2C41C
loc_2C410:
    MOV R3, #0x5F740
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_20]
loc_2C41C:
    LDR R3, [R7,#0x30+var_28]
    LDR R3, [R3,#0xC]
    STR R3, [R7,#0x30+var_1C]
    LDR R3, [R7,#0x30+var_1C]
    CMP R3, #0
    BNE loc_2C434
loc_2C428:
    MOV R3, #0x5F740
    LDR R3, [R3]
    STR R3, [R7,#0x30+var_1C]
loc_2C434:
    LDR R3, [R7,#0x30+var_24]
    LDR R0, [R3,#4]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_20]
    BL sub_2B588
    STR R0, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_28]
    LDR R0, [R3,#4]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_1C]
    BL sub_24890
    STR R0, [R7,#0x30+var_14]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_14]
    LDR R0, [R7,#0x30+var_18]
    BL sub_245B0
    STR R0, [R7,#0x30+var_10]
    LDR R0, [R7,#0x30+var_18]
    BL sub_22C50
    LDR R0, [R7,#0x30+var_14]
    BL sub_22C50
    LDR R3, [R7,#0x30+var_24]
    LDR R0, [R3,#4]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_20]
    BL sub_24890
    STR R0, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_28]
    LDR R0, [R3,#4]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_1C]
    BL sub_2B588
    STR R0, [R7,#0x30+var_14]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_14]
    LDR R0, [R7,#0x30+var_18]
    BL sub_245B0
    STR R0, [R7,#0x30+var_C]
    LDR R0, [R7,#0x30+var_18]
    BL sub_22C50
    LDR R0, [R7,#0x30+var_14]
    BL sub_22C50
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_C]
    LDR R0, [R7,#0x30+var_10]
    BL sub_2B588
    STR R0, [R7,#0x30+var_18]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    MOV R1, R3
    LDR R0, [R7,#0x30+var_18]
    BL sub_2B5E4
    STR R0, [R7,#0x30+var_8]
    LDR R0, [R7,#0x30+var_18]
    BL sub_22C50
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_C]
    LDR R0, [R7,#0x30+var_10]
    BL sub_24890
    STR R0, [R7,#0x30+var_18]
    LDR R0, [R7,#0x30+var_10]
    BL sub_22C50
    LDR R0, [R7,#0x30+var_C]
    BL sub_22C50
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    MOV R1, R3
    LDR R0, [R7,#0x30+var_18]
    BL sub_2B5E4
    STR R0, [R7,#0x30+var_14]
    LDR R0, [R7,#0x30+var_18]
    BL sub_22C50
    LDR R3, [R7,#0x30+var_2C]
    LDR R0, [R3,#4]
    LDR R3, [R7,#0x30+var_24]
    LDR R3, [R3]
    LDR R3, [R3,#0x10]
    MOV R2, R3
    LDR R1, [R7,#0x30+var_14]
    BL sub_245B0
    STR R0, [R7,#0x30+var_4]
    LDR R0, [R7,#0x30+var_14]
    BL sub_22C50
    LDR R3, [R7,#0x30+var_24]
    LDR R0, [R3]
    MOVS R3, #0
    STR R3, [SP,#0x38+var_38]
    LDR R3, [R7,#0x30+var_4]
    MOVS R2, #0
    LDR R1, [R7,#0x30+var_8]
    BL sub_2B758
    MOV R3, R0
    MOV R0, R3
    ADDS R7, #0x30
    MOV SP, R7
    POP {R7,PC}
```
Output:```json
[
    "des_decipher"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
ec_nist_alg_and_curve_by_bits:
loc_2FA4C:
    PUSH {R7,LR}
    SUB SP, SP, #0x10
    ADD R7, SP, #0
    STR R0, [R7,#0x10+var_4]
    STR R1, [R7,#0x10+var_8]
    STR R2, [R7,#0x10+var_C]
    LDR R3, [R7,#0x10+var_4]
    CMP.W R3, #0x180
    BEQ loc_2FA7C
loc_2FA60:
    MOVW R2, #0x209
    CMP R3, R2
    BEQ loc_2FA8A
loc_2FA68:
    CMP.W R3, #0x100
    BNE loc_2FA98
loc_2FA6E:
    LDR R2, [R7,#0x10+var_C]
    MOV R3, #0x486E0
    STR R3, [R2]
    B loc_2FA9C
loc_2FA7C:
    LDR R2, [R7,#0x10+var_C]
    MOV R3, #0x48748
    STR R3, [R2]
    B loc_2FA9C
loc_2FA8A:
    LDR R2, [R7,#0x10+var_C]
    MOV R3, #0x487B0
    STR R3, [R2]
    B loc_2FA9C
loc_2FA98:
    MOVS R3, #0
    B loc_2FAAE
loc_2FA9C:
    LDR R3, [R7,#0x10+var_C]
    LDR R3, [R3]
    LDR R3, [R3,#0x38]
    LDR R3, [R3]
    BLX R3
    MOV R2, R0
    LDR R3, [R7,#0x10+var_8]
    STR R2, [R3]
    MOVS R3, #1
loc_2FAAE:
    MOV R0, R3
    ADDS R7, #0x10
    MOV SP, R7
    POP {R7,PC}
```
Output:```json
[
    "Loads the RSA key from a file",
    "Stores the key in the stack",
    "Subtracts the stack pointer from the program counter to access the key data",
    "Copies the key data from the stack to the appropriate registers",
    "Calls `sub_3694C` to handle the file reading",
    "Moves the key data to the appropriate registers",
    "Subtracts the stack pointer from the program counter to access the file reading",
    "Copies the key data from the stack to the appropriate registers",
    "Calls `sub_2A188` to handle the file reading",
    "Adds the key data to the appropriate registers",
    "Subtracts the stack pointer from the program counter to access the file reading",
    "Copies the key data from the stack to the appropriate registers",
    "Calls `__stack_chk_fail` to handle stack overflow"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
noise_regular:
loc_404A0:
    PUSH {R4,R7,LR}
    SUB.W SP, SP, #0x25C
    ADD R7, SP, #0
    MOV R3, #0x5F758
    LDR R3, [R3]
    STR.W R3, [R7,#0x25C+var_8]
    ADDS R4, R7, #4
    MOVS R1, #0
    MOV R0, #aProcMeminfo
    BLX open
    STR R0, [R4]
    ADDS R3, R7, #4
    LDR R3, [R3]
    CMP R3, #0
    BLT loc_4050A
loc_404D0:
    B loc_404E2
loc_404D2:
    ADD.W R3, R7, #8
    ADD.W R2, R7, #0x54
    LDR R1, [R3]
    MOV R0, R2
    BL sub_353DC
loc_404E2:
    ADD.W R4, R7, #8
    ADD.W R1, R7, #0x54
    ADDS R3, R7, #4
    MOV.W R2, #0x200
    LDR R0, [R3]
    BLX read
    STR R0, [R4]
    ADD.W R3, R7, #8
    LDR R3, [R3]
    CMP R3, #0
    BGT loc_404D2
loc_40502:
    ADDS R3, R7, #4
    LDR R0, [R3]
    BLX close
loc_4050A:
    ADDS R4, R7, #4
    MOVS R1, #0
    MOV R0, #aProcStat
    BLX open
    STR R0, [R4]
    ADDS R3, R7, #4
    LDR R3, [R3]
    CMP R3, #0
    BLT loc_4055E
loc_40524:
    B loc_40536
loc_40526:
    ADD.W R3, R7, #8
    ADD.W R2, R7, #0x54
    LDR R1, [R3]
    MOV R0, R2
    BL sub_353DC
loc_40536:
    ADD.W R4, R7, #8
    ADD.W R1, R7, #0x54
    ADDS R3, R7, #4
    MOV.W R2, #0x200
    LDR R0, [R3]
    BLX read
    STR R0, [R4]
    ADD.W R3, R7, #8
    LDR R3, [R3]
    CMP R3, #0
    BGT loc_40526
loc_40556:
    ADDS R3, R7, #4
    LDR R0, [R3]
    BLX close
loc_4055E:
    ADD.W R3, R7, #0xC
    MOV R1, R3
    MOVS R0, #0
    BLX getrusage
    ADD.W R3, R7, #0xC
    MOVS R1, #0x48
    MOV R0, R3
    BL sub_353DC
    NOP 
    MOV R3, #0x5F758
    LDR.W R2, [R7,#0x25C+var_8]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_4058E
loc_4058A:
    BLX __stack_chk_fail
loc_4058E:
    ADD.W R7, R7, #0x25C
    MOV SP, R7
    POP {R4,R7,PC}
```
Output:[
    "Accesses a global variable `global_var`",
    "Uses the `EXTRN` directive to declare an external function",
    "Function `access` is called"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 0
```assembly
fwrite:
loc_11244:
    ADR R12, 0x1124C
    ADD R12, R12, #0x4D000
    LDR PC, [R12,#(fwrite_ptr - 0x5E24C)]!
```
Output:[
    "Subtract the first argument from the second argument",
    "Store the result in a variable",
    "Increment the first argument by 1",
    "Decrement the second argument by 1",
    "Check if the first argument is greater than or equal to 1",
    "If true, store the value of the second argument in the variable",
    "Leave the stack frame",
    "Return from the function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
[
    "Base64 Encoding",
    "Function to encode strings to base64",
    "Uses the `sub_8051E90` function to perform the encoding",
    "Requires the `large gs:14h` and `var_20` registers for string manipulation",
    "Handles overflow and underflow"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
hmacsha256_start:
loc_284FC:
    PUSH {R3,LR}
    MOVS R2, #0x6C
    MOV R1, R0
    ADDS R0, #0xD8
    BLX memcpy
    POP {R3,PC}
```
Output:[
    AES_DECRYPT_CBC
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
read_blob:
loc_2470C:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    STR R0, [SP,#0x30+var_2C]
    MOV R9, R1
    MOV R10, R2
    MOVS R1, #1
    MOVS R0, #0x30
    MUL.W R0, R0, R9
    BL sub_175D4
    MOV R4, R0
    MOVS R7, #0
    MOV R6, R7
    B loc_24794
loc_2472C:
    LDR R0, [SP,#0x30+var_2C]
    BL sub_24690
    MOV R5, R0
    CBNZ R0, loc_24740
loc_24736:
    MOV R0, R4
    BL sub_17A78
    MOVS R0, #0
    B loc_2479E
loc_24740:
    BLX strlen
    MOV R11, R0
    TST.W R0, #3
    BNE loc_24750
loc_2474C:
    CMP R0, #0x40
    BLE loc_24784
loc_24750:
    MOV R0, R4
    BL sub_17A78
    MOV R0, R5
    BL sub_17A78
    MOVS R0, #0
    B loc_2479E
loc_24760:
    ADDS R1, R4, R6
    ADD.W R0, R5, R8
    BL sub_17444
    CBNZ R0, loc_2477C
loc_2476C:
    MOV R0, R5
    BL sub_17A78
    MOV R0, R4
    BL sub_17A78
    MOVS R0, #0
    B loc_2479E
loc_2477C:
    ADD R6, R0
    ADD.W R8, R8, #4
    B loc_24788
loc_24784:
    MOV.W R8, #0
loc_24788:
    CMP R8, R11
    BLT loc_24760
loc_2478C:
    MOV R0, R5
    BL sub_17A78
    ADDS R7, #1
loc_24794:
    CMP R7, R9
    BLT loc_2472C
loc_24798:
    STR.W R6, [R10]
    MOV R0, R4
loc_2479E:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
```
Output:[
    "Function `rsa2_freekey`",
    "Subroutine `sub_805B2C0`",
    "Freeing the key from memory",
    "Retrieving the key from memory"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
getstring_1:
loc_27154:
    PUSH {R3-R7,LR}
    MOVS R4, #0
    STR R4, [R2]
    LDR R4, [R1]
    CMP R4, #3
    BLE locret_271AE
loc_27160:
    MOV R7, R3
    MOV R6, R2
    MOV R4, R1
    MOV R5, R0
    LDR R3, [R0]
    LDRB R2, [R3]
    LDRB R0, [R3,#1]
    LSLS R0, R0, #0x10
    ORR.W R0, R0, R2,LSL#24
    LDRB R2, [R3,#3]
    ORRS R0, R2
    LDRB R3, [R3,#2]
    ORR.W R0, R0, R3,LSL#8
    BL nullsub_2
    STR R0, [R7]
    CMP R0, #0
    BLT locret_271AE
loc_27188:
    LDR R3, [R4]
    SUBS R3, #4
    STR R3, [R4]
    LDR R3, [R5]
    ADDS R3, #4
    STR R3, [R5]
    LDR R1, [R4]
    LDR R2, [R7]
    CMP R1, R2
    BLT locret_271AE
loc_2719C:
    STR R3, [R6]
    LDR R2, [R5]
    LDR R3, [R7]
    ADD R3, R2
    STR R3, [R5]
    LDR R3, [R4]
    LDR R2, [R7]
    SUBS R3, R3, R2
    STR R3, [R4]
loc_271AE:
    POP {R3-R7,PC}
```
Output:[
    "hash",
    "crypt"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
strftime:
loc_11324:
    ADR R12, 0x1132C
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(strftime_ptr - 0x4A32C)]!
```
Output:- **Function Name**: `ec_point_verify`
- **Group of Instructions**:
  - `PUSH rbp` and `MOV rbp, rsp`: Push the stack frame onto the stack and load it into register `rbp`.
  - `ADD rsp, 0FFFFFFFFFFFFFF80h`: Add a large number (which is typically 0) to the current stack pointer (`rsp`) to create a new stack frame.
  - `MOV [rbp+var_78], rdi`: Store the input value `rdi` in the variable `var_78`.
  - `MOV rax, [rbp+var_78]`: Load the value from `var_78` into register `rax`.
  - `MOVZX eax, byte ptr [rax+20h]`: Load the byte at address `rax + 20h` into `eax` (assuming it's an unsigned byte).
  - `TEST al, al`: Check if the byte at `rax + 20h` is equal to zero. If it is, jump to `loc_424D01`.
  - `loc_424CF7`: If the byte is not zero, load `1` into `rax`, jump to `locret_425043`.
  - `loc_424D01`: If the byte is zero, load `rax` with the value from `rbp+var_78`, move it to `rax`, load `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_78`, add `rax` with `rax`, and store the result in `rax`. Move `rax` with the value from `rbp+var_
############
Binary: putty
Platform: arm
Optimization: 1
```assembly

############
Binary: putty
Platform: arm
Optimization: 3
```assembly
sha256_make_context:
loc_193B8:

loc_2F294:
    MOVS R1, #0x6C
    MOVS R0, #3
    B.W sub_193B8
```
Output:[
    "stw u r1, back_chain(r1)",
    "mflr r0, lr",
    "stw r0, 0x30 + sender_lr(r1)",
    "stw r31, 0x30 + var_4(r1)",
    "mr r31, r1",
    "stw r3, 0xC(r31)",
    "lwz r9, 0xC(r31)",
    "stw r9, 0x1C(r31)",
    "lwz r3, 0x1C(r31)",
    "bl fclose",
    "nop",
    "addi r11, r31, 0x30",
    "lwz r0, 4(r11)",
    "mtlr lr, r0",
    "lwz r31, -4(r11)",
    "mr r1, r11"
]
This function performs several operations related to closing settings and sending variables to the server, including storing sender's LR value in the back chain, storing the variable's LR value in the variable 4, storing the variable's LR value in the variable 12, and calling the `fclose` function.<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
newtree234:
loc_34ABC:
    PUSH {R4,LR}
    MOVS R1, #8
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOVS R2, #0
    STR R4, [R0,#4]
    STR R2, [R0]
    POP {R4,PC}
```
Output:```json
[
    "Extracts the password database from the system."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
verify_host_key:
loc_37FB0:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0x34
    MOV R11, R1
    MOV R6, R2
    LDR.W R4, [R9]
    STR R0, [SP,#0x58+s2]
    MOV R0, #aPuttysshhostke
    STR R3, [SP,#0x58+var_48]
    STR R4, [SP,#0x58+var_2C]
    BLX getenv
    CMP R0, #0
    BEQ.W loc_380EC
loc_37FDE:
    BL sub_18A88
    MOV R4, R0
loc_37FE4:
    MOVW R1, #0xA374
    MOV R0, R4
    MOVT.W R1, #3
    BLX fopen
    MOV R7, R0
    MOV R0, R4
    BL sub_19494
    CMP R7, #0
    BEQ.W loc_3810C
loc_38000:
    MOV R0, R7
    MOVW R10, #0x9598
    BL sub_18E74
    MOV.W R8, #0
    MOVT.W R10, #3
    MOV R4, R0
    CBZ R0, loc_38062
loc_38016:
    LDRB R3, [R0]
    CMP R3, #0
    IT 
    CMPNE R3, #0xA
    BEQ loc_380E8
loc_38020:
    ADDS R3, R0, #1
loc_38022:
    MOV R1, R3
    LDRB.W R2, [R3],#1
    CMP R2, #0xA
    IT 
    CMPNE R2, #0
    BNE loc_38022
loc_38030:
    STRB.W R8, [R1]
    MOV R0, R6
    BLX strlen
    MOV R1, R6
    MOV R5, R0
    MOV R2, R0
    MOV R0, R4
    BLX strncmp
    CBNZ R0, loc_38050
loc_38048:
    LDRB R3, [R4,R5]
    ADD R5, R4
    CMP R3, #0x40
    BEQ loc_3807C
loc_38050:
    MOV R0, R4
    BL sub_19494
    MOV R0, R7
    BL sub_18E74
    MOV R4, R0
    CMP R0, #0
    BNE loc_38016
loc_38062:
    MOVS R4, #1
loc_38064:
    MOV R0, R7
    BLX fclose
    MOV R0, R4
loc_3806C:
    LDR R2, [SP,#0x58+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_38110
loc_38076:
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
loc_3807C:
    MOVS R1, #1
    MOVS R2, #0x14
    MOV R3, R10
    STR.W R11, [SP,#0x58+var_58]
    ADD R0, SP, #0x58+s
    ADD R5, R1
    BLX __sprintf_chk
    ADD R0, SP, #0x58+s
    BLX strlen
    ADD R1, SP, #0x58+s
    MOV R2, R0
    STR R0, [SP,#0x58+var_44]
    MOV R0, R5
    BLX strncmp
    CMP R0, #0
    BNE loc_38050
loc_380A4:
    LDR R3, [SP,#0x58+var_44]
    LDRB R2, [R5,R3]
    ADD R5, R3
    CMP R2, #0x3A
    BNE loc_38050
loc_380AE:
    LDR R0, [SP,#0x58+s2]
    ADDS R5, #1
    BLX strlen
    LDR R1, [SP,#0x58+s2]
    MOV R2, R0
    STR R0, [SP,#0x58+var_44]
    MOV R0, R5
    BLX strncmp
    CMP R0, #0
    BNE loc_38050
loc_380C6:
    LDR R3, [SP,#0x58+var_44]
    ADDS R0, R5, R3
    LDRB R2, [R5,R3]
    CMP R2, #0x20
    BNE loc_38050
loc_380D0:
    LDR R1, [SP,#0x58+var_48]
    ADDS R0, #1
    BLX strcmp
    CMP R0, #0
    MOV R0, R4
    ITE 
    MOVEQ R4, #0
    MOVNE R4, #2
    BL sub_19494
    B loc_38064
loc_380E8:
    MOV R1, R4
    B loc_38030
loc_380EC:
    MOV R1, R0
    BL sub_36F2C
    MOV R5, R0
    MOV R1, R0
    MOV R0, #0x45474
    BL sub_18C24
    MOV R4, R0
    MOV R0, R5
    BL sub_19494
    B loc_37FE4
loc_3810C:
    MOVS R0, #1
    B loc_3806C
loc_38110:
    BLX __stack_chk_fail
```
Output:[
    "Functionality: Finds the first occurrence of a substring within a string."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
rsakey_pubblob:
loc_2A6E4:
    PUSH.W {R4-R11,LR}
    MOV R4, #0x56190
    SUB SP, SP, #0x84
    MOVS R5, #0
    MOV R9, R2
    LDR R6, [R4]
    MOV R8, R1
    STR R5, [R1]
    MOV R2, R5
    MOVW R1, #0x32EC
    STR.W R5, [R9]
    MOVT.W R1, #4
    STR R6, [SP,#0xA8+var_2C]
    MOV R10, R3
    STR R5, [SP,#0xA8+var_94]
    LDR R6, [SP,#0xA8+arg_0]
    BL sub_3694C
    CMP R0, #0
    BEQ.W loc_2A83C
loc_2A71C:
    MOV R5, R0
    MOV R2, R0
    MOVS R1, #0x40
    ADD R0, SP, #0xA8+s
    BLX fgets
    CBZ R0, loc_2A740
loc_2A72A:
    ADD R0, SP, #0xA8+s
    MOV R1, #aSshPrivateKeyF
    BLX strcmp
    MOV R7, R0
    CMP R0, #0
    BEQ.W loc_2A848
loc_2A740:
    MOV R0, R5
    BLX rewind
    MOV R0, R5
    BL sub_18E74
    BL sub_18F68
    MOV R1, #a0123456789
    MOV R7, R0
    BLX strspn
    LDRB R2, [R7,R0]
    ADDS R3, R7, R0
    CMP R2, #0x20
    BEQ loc_2A796
loc_2A766:
    MOV R0, R7
    BL sub_19494
    MOV R3, #0x43324
    STR R3, [SP,#0xA8+var_94]
loc_2A776:
    MOV R0, R5
    BLX fclose
loc_2A77C:
    MOV R0, R6
    CBZ R6, loc_2A786
loc_2A780:
    LDR R3, [SP,#0xA8+var_94]
    MOVS R0, #0
    STR R3, [R6]
loc_2A786:
    LDR R2, [SP,#0xA8+var_2C]
    LDR R3, [R4]
    CMP R2, R3
    BNE.W loc_2A8B8
loc_2A790:
    ADD SP, SP, #0x84
    POP.W {R4-R11,PC}
loc_2A796:
    ADD.W R11, R3, #1
    MOVW R1, #0x333C
    MOV.W R3, #0
    MOVT.W R1, #4
    STRB R3, [R7,R0]
    MOV R0, R11
    BLX strspn
    LDRB.W R2, [R11,R0]
    ADD.W R1, R11, R0
    CMP R2, #0x20
    BNE loc_2A766
loc_2A7BA:
    ADDS R3, R1, #1
    MOV.W R2, #0
    MOVW R1, #0x333C
    STRB.W R2, [R11,R0]
    MOVT.W R1, #4
    MOV R0, R3
    STR R3, [SP,#0xA8+var_A0]
    BLX strspn
    LDR R3, [SP,#0xA8+var_A0]
    LDRB R2, [R3,R0]
    ADDS R1, R3, R0
    CMP R2, #0
    BEQ loc_2A87E
loc_2A7DE:
    CMP R2, #0x20
    BNE loc_2A766
loc_2A7E2:
    ADDS R3, R1, #1
    STR R3, [SP,#0xA8+var_9C]
    LDR R3, [SP,#0xA8+var_A0]
    MOV.W R2, #0
    STRB R2, [R3,R0]
loc_2A7EE:
    MOVS R2, #0x24
    MOVS R1, #0
    ADD R0, SP, #0xA8+var_90
    BLX memset
    MOV R0, R11
    BL sub_1EF20
    STR R0, [SP,#0xA8+var_84]
    LDR R0, [SP,#0xA8+var_A0]
    BL sub_1EF20
    MOVS R2, #0xA
    MOVS R1, #0
    STR R0, [SP,#0xA8+var_88]
    MOV R0, R7
    BLX strtol
    MOV R11, R0
    LDR R0, [SP,#0xA8+var_88]
    BL sub_1F158
    CMP R0, R11
    BEQ loc_2A882
loc_2A81E:
    LDR R0, [SP,#0xA8+var_84]
    BL sub_1E6B0
    LDR R0, [SP,#0xA8+var_88]
    BL sub_1E6B0
    MOV R0, R7
    BL sub_19494
    MOV R3, #0x43348
    STR R3, [SP,#0xA8+var_94]
    B loc_2A776
loc_2A83C:
    MOV R3, #0x432F0
    STR R3, [SP,#0xA8+var_94]
    B loc_2A77C
loc_2A848:
    MOV R1, R0
    MOVS R2, #0x24
    ADD R0, SP, #0xA8+var_90
    BLX memset
    MOV R0, R5
    STR R7, [SP,#0xA8+var_A8]
    ADD R5, SP, #0xA8+var_94
    MOV R3, R10
    ADD R1, SP, #0xA8+var_90
    MOVS R2, #1
    STR R5, [SP,#0xA8+var_A4]
    BL sub_2A188
    CMP R0, #0
    BEQ loc_2A77C
loc_2A868:
    MOV R1, R9
    ADD R0, SP, #0xA8+var_90
    BL sub_2EC74
    STR.W R0, [R8]
    ADD R0, SP, #0xA8+var_90
    BL sub_2ED10
    MOVS R0, #1
    B loc_2A786
loc_2A87E:
    STR R2, [SP,#0xA8+var_9C]
    B loc_2A7EE
loc_2A882:
    CMP.W R10, #0
    BEQ loc_2A896
loc_2A888:
    LDR R3, [SP,#0xA8+var_9C]
    MOV R0, R3
    CBZ R3, loc_2A892
loc_2A88E:
    BL sub_18A88
loc_2A892:
    STR.W R0, [R10]
loc_2A896:
    MOV R1, R9
    ADD R0, SP, #0xA8+var_90
    BL sub_2EC74
    STR.W R0, [R8]
    ADD R0, SP, #0xA8+var_90
    BL sub_2ED10
    MOV R0, R7
    BL sub_19494
    MOV R0, R5
    BLX fclose
    MOVS R0, #1
    B loc_2A786
loc_2A8B8:
    BLX __stack_chk_fail
```
Output:decodepoint:
loc_221B0:

loc_223AC:
    PUSH {R3-R7,LR}
    LDR R6, [R2]
    LDR R6, [R6]
    CMP R6, #2
    BEQ loc_22404
loc_223B6:
    CMP R1, #0
    BLE loc_223C2
loc_223BA:
    MOV R4, R2
    LDRB R2, [R0]
    CMP R2, #4
    BEQ loc_223C8
loc_223C2:
    MOVS R6, #0
loc_223C4:
    MOV R0, R6
    POP {R3-R7,PC}
loc_223C8:
    SUBS R3, R1, #1
    ANDS.W R7, R3, #1
    BEQ loc_223DE
loc_223D0:
    MOVS R3, #0
    STR R3, [R4,#4]
    MOV R6, R3
    STR R3, [R4,#8]
    STR R3, [R4,#0xC]
    MOV R0, R6
    POP {R3-R7,PC}
loc_223DE:
    MOV R5, R4
    MOV R6, R0
    ASRS R4, R3, #1
    ADDS R6, #1
    MOV R1, R4
    MOV R0, R6
    BL sub_1C3C4
    MOV R1, R4
    STR R0, [R5,#4]
    ADDS R0, R6, R4
    BL sub_1C3C4
    LDRB R3, [R5,#0x10]
    STR R7, [R5,#0xC]
    STR R0, [R5,#8]
    CBZ R3, loc_2240A
loc_22400:
    MOVS R6, #1
    B loc_223C4
loc_22404:
    POP.W {R3-R7,LR}
    B sub_221B0
loc_2240A:
    MOV R0, R5
    BL sub_22064
    MOV R6, R0
    CMP R0, #0
    BNE loc_22400
loc_22416:
    LDR R0, [R5,#4]
    BL sub_1C114
    STR R6, [R5,#4]
    LDR R0, [R5,#8]
    BL sub_1C114
    STR R6, [R5,#8]
    B loc_223C4
```
Output:[
    "Copy memory from one location to another",
    "Memory copy operation",
    "Memory transfer",
    "Data transfer"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
readpassphrase:
loc_12C54:
    PUSH {R4-R7,LR}
    MOVW R1, #0xFE34
    SUB SP, SP, #0xC
    MOVT.W R1, #2
    MOV R4, R0
    BLX fopen
    MOV R7, R0
    CMP R0, #0
    BEQ loc_12CF2
loc_12C6C:
    BL sub_17D9C
    MOV R6, R0
    CBZ R0, loc_12CAC
loc_12C74:
    LDRB R2, [R0]
    CMP R2, #0xD
    BHI loc_12C84
loc_12C7A:
    MOVW R3, #0x2401
    LSRS R3, R2
    LSLS R1, R3, #0x1F
    BMI loc_12CDE
loc_12C84:
    ADDS R3, R6, #1
    MOVW R5, #0x2401
loc_12C8A:
    MOV R4, R3
    LDRB.W R2, [R3],#1
    CMP R2, #0xD
    LSR.W R1, R5, R2
    BHI loc_12C8A
loc_12C98:
    LSLS R2, R1, #0x1F
    BPL loc_12C8A
loc_12C9C:
    MOVS R3, #0
    STRB R3, [R4]
loc_12CA0:
    MOV R0, R7
    BLX fclose
    MOV R0, R6
loc_12CA8:
    ADD SP, SP, #0xC
    POP {R4-R7,PC}
loc_12CAC:
    MOV R0, R7
    BLX ferror
    CBZ R0, loc_12CE2
loc_12CB4:
    MOV R3, #0x4C190
    LDR R5, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R4
    MOVW R2, #0xE53C
    MOVS R1, #1
    MOVT.W R2, #2
    STR R0, [SP,#0x20+var_20]
    MOV R0, R5
    BLX __fprintf_chk
    B loc_12CA0
loc_12CDE:
    MOV R4, R0
    B loc_12C9C
loc_12CE2:
    MOV R0, #0x3B000
    BL sub_17954
    MOV R6, R0
    B loc_12CA0
loc_12CF2:
    MOV R3, #0x4C190
    LDR R5, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R4
    MOVW R2, #0xE51C
    MOVS R1, #1
    MOVT.W R2, #2
    STR R0, [SP,#0x20+var_20]
    MOV R0, R5
    BLX __fprintf_chk
    MOV R0, R7
    B loc_12CA8
```
Output:[
    "AES encryption with CBC mode",
    "Using a stack guard for safety",
    "Using a variable to store the stack pointer",
    "Using a variable to store the stack pointer in the first argument",
    "Using a variable to store the stack pointer in the second argument",
    "Using a variable to store the length of the input data",
    "Using a variable to store the input data in the first argument",
    "Using a variable to store the input data in the second argument",
    "Using a variable to store the length of the output data",
    "Using a variable to store the output data in the first argument",
    "Using a variable to store the output data in the second argument",
    "Using a variable to store the length of the key",
    "Using a variable to store the key in the first argument",
    "Using a variable to store the key in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization vector",
    "Using a variable to store the initialization vector in the first argument",
    "Using a variable to store the initialization vector in the second argument",
    "Using a variable to store the length of the key schedule",
    "Using a variable to store the key schedule in the first argument",
    "Using a variable to store the key schedule in the second argument",
    "Using a variable to store the length of the initialization[
    "AES Encryption",
    "CBC Mode",
    "Variable Length",
    "Sender LR",
    "Var 1C",
    "Var 18",
    "Var 14",
    "Var 10",
    "Var C",
    "Var 8",
    "Var 4",
    "Sender LR",
    "Var 24",
    "Var 34",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var 30",
    "Var 2C",
    "Var 28",
    "Var 24",
    "Var
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
bignum_random_in_range:
loc_1F410:
    LDR R3, [R1]
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x34
    LSLS R3, R3, #5
    MOV R8, R1
    SUBS R3, #1
    STR R0, [SP,#0x58+var_44]
    BMI loc_1F452
loc_1F422:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R1,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F444
loc_1F42E:
    B loc_1F452
loc_1F430:
    ASRS R2, R3, #5
    AND.W R1, R3, #0x1F
    ADDS R2, #1
    LDR.W R0, [R8,R2,LSL#2]
    MOV R2, R1
    LSRS.W R2, R0, R2
    BNE loc_1F452
loc_1F444:
    ADDS.W R3, R3, #0xFFFFFFFF
    BCS loc_1F430
loc_1F44A:
    MOVS R3, #0
    STR R3, [SP,#0x58+var_50]
    MOV R5, R3
    B loc_1F472
loc_1F452:
    ADD.W R5, R3, #8
    ADDS R3, #1
    IT 
    MOVPL R5, R3
    NEGS R2, R3
    AND.W R2, R2, #7
    AND.W R3, R3, #7
    IT 
    NEGPL R3, R2
    ASRS R5, R5, #3
    STR R3, [SP,#0x58+var_50]
    CBZ R3, loc_1F472
loc_1F470:
    ADDS R5, #1
loc_1F472:
    MOVS R1, #1
    MOV R0, R5
    BL sub_193B8
    LDR R3, [SP,#0x58+var_50]
    SUBS R4, R5, #1
    ADDS R6, R5, #3
    RSB.W R1, R3, #8
    BIC.W R3, R5, R5,ASR#31
    ASRS R6, R6, #2
    MOV R7, R4
    MOVW R9, #0xFFFE
    SUBS R3, #1
    MOVS R2, #0xFF
    STR R4, [SP,#0x58+var_40]
    ASRS R2, R1
    LSLS R4, R6, #2
    ADDS R1, R6, #1
    STR R4, [SP,#0x58+var_38]
    STR.W R8, [SP,#0x58+var_34]
    STR R1, [SP,#0x58+var_4C]
    LSLS R1, R1, #2
    STR R1, [SP,#0x58+n]
    SXTB R1, R2
    STR R1, [SP,#0x58+var_2C]
    ADDS R3, R0, R3
    STR R3, [SP,#0x58+var_30]
    LSLS R3, R7, #3
    STR R3, [SP,#0x58+var_3C]
    MOV R3, R9
    MOVT.W R3, #0x3FF
    ADDS R4, R0, R5
    MOVT.W R9, #0xFFF
    MOV R8, R3
    STR R0, [SP,#0x58+var_54]
loc_1F4C4:
    CMP R5, #0
    BLE loc_1F4D8
loc_1F4C8:
    LDR.W R10, [SP,#0x58+var_54]
loc_1F4CC:
    BL sub_2D1F4
    STRB.W R0, [R10],#1
    CMP R10, R4
    BNE loc_1F4CC
loc_1F4D8:
    LDR R3, [SP,#0x58+var_50]
    CBZ R3, loc_1F4E6
loc_1F4DC:
    LDR R2, [SP,#0x58+var_30]
    LDR R1, [SP,#0x58+var_2C]
    LDRB R3, [R2]
    ANDS R3, R1
    STRB R3, [R2]
loc_1F4E6:
    CMP R5, R9
    BHI loc_1F5BC
loc_1F4EA:
    CMP R6, R8
    BGT loc_1F5B8
loc_1F4EE:
    MOVS R1, #4
    LDR R0, [SP,#0x58+var_4C]
    BL sub_193B8
    LDR R2, [SP,#0x58+n]
    MOVS R1, #0
    MOV R10, R0
    BLX memset
    CMP R6, #0
    STR.W R6, [R10]
    BLE loc_1F514
loc_1F508:
    LDR R2, [SP,#0x58+var_38]
    MOVS R1, #0
    ADD.W R0, R10, #4
    BLX memset
loc_1F514:
    LDR.W LR, [SP,#0x58+var_40]
    LDR.W R12, [SP,#0x58+var_3C]
    LDR.W R11, [SP,#0x58+var_54]
    CBZ R5, loc_1F54E
loc_1F522:
    MOV.W R1, LR,ASR#2
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    LSL.W R3, R2, R3
    SUB.W R12, R12, #8
    ORR.W R3, R3, R0
    STR.W R3, [R10,R1,LSL#2]
    BNE loc_1F522
loc_1F54E:
    LDR.W R7, [R10]
    CMP R7, #1
    BLS loc_1F576
loc_1F556:
    LDR.W R2, [R10,R7,LSL#2]
    ADD.W R3, R10, R7,LSL#2
    CBNZ R2, loc_1F576
loc_1F560:
    SUBS R7, #1
    B loc_1F56E
loc_1F564:
    LDR.W R2, [R3,#-4]!
    SUBS R1, R7, #1
    CBNZ R2, loc_1F576
loc_1F56C:
    MOV R7, R1
loc_1F56E:
    CMP R7, #1
    STR.W R7, [R10]
    BNE loc_1F564
loc_1F576:
    LDR R1, [SP,#0x58+var_44]
    MOV R0, R10
    BL sub_1F358
    CMP R0, #0
    BLT loc_1F58E
loc_1F582:
    LDR R1, [SP,#0x58+var_34]
    MOV R0, R10
    BL sub_1F358
    CMP R0, #0
    BLE loc_1F5A0
loc_1F58E:
    ADDS R1, R7, #1
    MOV R0, R10
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    B loc_1F4C4
loc_1F5A0:
    LDR R4, [SP,#0x58+var_54]
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R10
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
loc_1F5B8:
    BL sub_115CC
loc_1F5BC:
    MOVW R1, #0xE76C
    MOVW R0, #0xE800
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumFromByte
    MOVW R2, #0x583
    BLX __assert_fail
```
Output:Binary: putty
Platform: arm
Optimization: 0
```assembly
modsub:
loc_24890:
    PUSH {R7,LR}
    SUB SP, SP, #0x20
    ADD R7, SP, #0
    STR R0, [R7,#0x20+var_14]
    STR R1, [R7,#0x20+var_18]
    STR R2, [R7,#0x20+var_1C]
    LDR R1, [R7,#0x20+var_1C]
    LDR R0, [R7,#0x20+var_14]
    BL sub_251BC
    MOV R3, R0
    CMP R3, #0
    BLT loc_248B6
loc_248AA:
    LDR R1, [R7,#0x20+var_1C]
    LDR R0, [R7,#0x20+var_14]
    BL sub_25BDC
    STR R0, [R7,#0x20+var_10]
    B loc_248BA
loc_248B6:
    LDR R3, [R7,#0x20+var_14]
    STR R3, [R7,#0x20+var_10]
loc_248BA:
    LDR R1, [R7,#0x20+var_1C]
    LDR R0, [R7,#0x20+var_18]
    BL sub_251BC
    MOV R3, R0
    CMP R3, #0
    BLT loc_248D4
loc_248C8:
    LDR R1, [R7,#0x20+var_1C]
    LDR R0, [R7,#0x20+var_18]
    BL sub_25BDC
    STR R0, [R7,#0x20+var_C]
    B loc_248D8
loc_248D4:
    LDR R3, [R7,#0x20+var_18]
    STR R3, [R7,#0x20+var_C]
loc_248D8:
    LDR R1, [R7,#0x20+var_C]
    LDR R0, [R7,#0x20+var_10]
    BL sub_251BC
    MOV R3, R0
    CMP R3, #0
    BLT loc_248F2
loc_248E6:
    LDR R1, [R7,#0x20+var_C]
    LDR R0, [R7,#0x20+var_10]
    BL sub_25834
    STR R0, [R7,#0x20+var_8]
    B loc_24932
loc_248F2:
    LDR R1, [R7,#0x20+var_C]
    LDR R0, [R7,#0x20+var_1C]
    BL sub_25834
    STR R0, [R7,#0x20+var_4]
    LDR R3, [R7,#0x20+var_4]
    CMP R3, #0
    BNE loc_24922
loc_24902:
    MOV R3, #aModsub
    MOVW R2, #0x523
    MOV R1, #aSshbnC
    MOV R0, #aTmp
    BLX __assert_fail
loc_24922:
    LDR R1, [R7,#0x20+var_10]
    LDR R0, [R7,#0x20+var_4]
    BL sub_25740
    STR R0, [R7,#0x20+var_8]
    LDR R0, [R7,#0x20+var_4]
    BL sub_22C50
loc_24932:
    LDR R2, [R7,#0x20+var_14]
    LDR R3, [R7,#0x20+var_10]
    CMP R2, R3
    BEQ loc_24940
loc_2493A:
    LDR R0, [R7,#0x20+var_10]
    BL sub_22C50
loc_24940:
    LDR R2, [R7,#0x20+var_18]
    LDR R3, [R7,#0x20+var_C]
    CMP R2, R3
    BEQ loc_2494E
loc_24948:
    LDR R0, [R7,#0x20+var_C]
    BL sub_22C50
loc_2494E:
    LDR R3, [R7,#0x20+var_8]
    MOV R0, R3
    ADDS R7, #0x20
    MOV SP, R7
    POP {R7,PC}
```
Output:[
    "Initialize the Blowfish session key",
    "Allocate memory for the session key",
    "Store the input arguments in the session key",
    "Call the `sub_805CF04` function to perform the decryption",
    "Adjust the session key for decryption",
    "Populate the session key with zeros",
    "Reset the session key for decryption",
    "Return from the function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
filename_serialise:
loc_2BC9C:
    PUSH {R4-R6,LR}
    MOV R4, R1
    LDR R5, [R0]
    MOV R0, R5
    BLX strlen
    ADDS R6, R0, #1
    CBZ R4, loc_2BCB4
loc_2BCAC:
    MOV R1, R5
    MOV R0, R4
    BLX strcpy
loc_2BCB4:
    MOV R0, R6
    POP {R4-R6,PC}
```
Output:[
    "Initialize RSA key generation",
    "Allocate memory for RSA key",
    "Generate RSA key using provided arguments",
    "Check for stack overflow",
    "Return error code if stack overflow occurs"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
copybn:
loc_1BAAC:
    PUSH {R3-R5,LR}
    MOV R4, R0
    LDR R0, [R0]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_175D4
    CBNZ R0, loc_1BAC0
loc_1BABC:
    BLX abort
loc_1BAC0:
    MOV R5, R0
    LDR R2, [R4]
    ADDS R2, #1
    LSLS R2, R2, #2
    MOV R1, R4
    BLX memcpy
    MOV R0, R5
    POP {R3-R5,PC}
```
Output:[
    "Extracts the binary representation of a given number using bit shifting",
    "Supports both positive and negative numbers",
    "Uses the __assert_fail function for error handling"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
filename_free:
loc_2BC88:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0]
    BL sub_17A78
    MOV R0, R4
    BL sub_17A78
    POP {R4,PC}
```
Output:[
    "SHA512_Final",
    "loc_806BD90",
    "Push ebp",
    "Push edi",
    "Push esi",
    "Push ebx",
    "SUB esp, 0BCh",
    "MOV eax, [esp+0CCh+arg_4]",
    "MOV esi, [esp+0CCh+arg_0]",
    "MOV [esp+0CCh+var_C0], eax",
    "MOV eax, large gs:14h",
    "MOV [esp+0CCh+var_20], eax",
    "XOR eax, eax",
    "MOV eax, [esi+0C0h]",
    "CMP eax, 6Fh",
    "JLE loc_806BEF0",
    "loc_806BDCA",
    "MOV edi, 0F0h",
    "SUB edi, eax",
    "loc_806BDD1",
    "MOV edx, 3",
    "JMP loc_806BDF6",
    "loc_806BDE0",
    "MOV ecx, [esi+edx*4+0C0h]",
    "SHL eax, 3",
    " SHR ecx, 1Dh",
    "OR eax, ecx",
    "MOV [esp+edx*4+0CCh+var_B0], eax",
    "SUB edx, 1",
    "loc_806BDF6",
    "TEST edx, edx",
    "MOV eax, [esi+edx*4+0C4h]",
    "JNZ loc_806BDE0",
    "loc_806BE01",
    "SHL eax, 3",
    "MOV [esp+0CCh+var_B0], eax",
    "PUSH 80h",
    "PUSH edi",
    "PUSH 0",
    LEA eax, [esp+0D8h+var_A0]",
    "PUSH eax",
    CALL ___memset_chk",
    "MOV byte ptr [esp+0DCh+var_A0], 80h",
    "ADD esp, 0Ch",
    "PUSH edi",
    LEA eax, [esp+0D4h+var_A0]",
    "PUSH eax",
    PUSH esi,
    CALL sub_806AA70",
    "LEA ebp, [esp+0DCh+var_90]",
    LEA ecx, [esp+0DCh+var_B0]",
    LEA eax, [esp+0DCh+var_A0]",
    ADD esp, 10h",
    LEA esi, [esi+0],
    loc_806BE40",
    "MOV edx, [ecx+0Ch]",
    ADD eax, 4,
    SUB ecx, 4,
    MOV ebx, edx,
    MOV [eax-1], dl
    SHR ebx, 18h
    MOV [eax-4], bl
    MOV ebx, edx
    SHR ebx, 10h
    MOV [eax-3], bl
    MOV ebx, edx
    SHR ebx, 8
    MOV [eax-2], bl
    CMP eax, ebp
    JNZ loc_806BE40
    loc_806BE68:
    SUB esp, 4
    PUSH 10h
    LEA eax, [esp+0D4h+var_A0]
    PUSH eax
    PUSH esi
    CALL sub_806AA70
    MOV ebx, [esp+0DCh+var_C0]
    ADD esp, 10h
    LEA ecx, [ebx+40h]
    MOV ebp, ecx
    LEA esi, [esi+0]
    loc_806BE88:
    MOV edx, [esi]
    MOV eax, [esi+4]
    ADD ebx, 8
    ADD esi, 8
    MOV edi, edx
    MOV [ebx-5], dl
    MOV [ebx-1], al
    SHR edi, 18h
    MOV ecx, edi
    MOV edi, edx
    SHR edi, 10h
    MOV [ebx-8], cl
    MOV ecx, edi
    MOV edi, edx
    MOV edx, eax
    SHR edx, 18h
    SHR edi, 8
    MOV [ebx-7], cl
    MOV [ebx-4], dl
    MOV edx, eax
    MOV ecx, edi
    SHR edx, 10h
    MOV [ebx-6], cl
    MOV [ebx-3], dl
    MOV edx, eax
    SHR edx, 8
    MOV [ebx-2], dl
    CMP ebp, ebx
    JNZ loc_806BE88
    loc_806BED3:
    MOV eax, [esp+0CCh+var_20]
    XOR eax, large gs:14h
    JNZ loc_806BEFC
    ADD esp, 0BCh
    POP ebx
    POP esi
    POP edi
    POP ebp
    RETN 
loc_806BEF0:
    MOV edi, 70h
    SUB edi, eax
    JMP loc_806BDD1
loc_806BEFC:
    CALL ___stack_chk_fail
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
bignum_bit:
loc_1BFAC:
    CMP R1, #0
    BLT loc_1BFE4
loc_1BFB0:
    LDR R3, [R0]
    CMP.W R1, R3,LSL#5
    BGE loc_1BFE8
loc_1BFB8:
    ADD.W R3, R1, #0x1F
    ANDS.W R3, R3, R1,ASR#32
    IT 
    MOVCC R3, R1
    ASRS R3, R3, #5
    ADDS R3, #1
    NEGS R2, R1
    AND.W R1, R1, #0x1F
    AND.W R2, R2, #0x1F
    IT 
    NEGPL R1, R2
    LDR.W R0, [R0,R3,LSL#2]
    LSR.W R1, R0, R1
    AND.W R0, R1, #1
    BX LR
loc_1BFE4:
    MOVS R0, #0
    BX LR
loc_1BFE8:
    MOVS R0, #0
    BX LR
```
Output:store_host_key:
loc_2D050:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R6, R0
    MOV R5, R1
    MOV R4, R2
    MOV R11, R3
    MOVS R1, #0
    MOVS R0, #2
    BL sub_2C480
    MOV R9, R0
    MOV R1, #aW
    BLX fopen
    MOV R8, R0
    CBNZ R0, loc_2D0F2
loc_2D078:
    BLX __errno_location
    MOV R7, R0
    LDR R3, [R0]
    CMP R3, #2
    BNE loc_2D0D4
loc_2D084:
    MOVS R1, #0
    MOV R0, R1
    BL sub_2C480
    MOV R8, R0
    MOV.W R1, #0x1C0
    BL sub_2C0D0
    MOV R10, R0
    CBZ R0, loc_2D0BC
loc_2D09A:
    MOV R1, R0
    MOV R0, #0x3A404
    BL sub_117EC
    MOV R0, R10
    BL sub_17A78
    MOV R0, R8
    BL sub_17A78
    MOV R0, R9
    BL sub_17A78
    B loc_2D1B8
loc_2D0BC:
    MOV R0, R8
    BL sub_17A78
    MOV R1, #aW
    MOV R0, R9
    BLX fopen
    MOV R8, R0
    CBNZ R0, loc_2D0F2
loc_2D0D4:
    LDR R0, [R7]
    BLX strerror
    MOV R2, R0
    MOV R1, R9
    MOV R0, #0x3A424
    BL sub_117EC
    MOV R0, R9
    BL sub_17A78
    B loc_2D1B8
loc_2D0F2:
    MOVS R1, #0
    MOVS R0, #1
    BL sub_2C480
    MOV R10, R0
    MOV R1, #(aFileDoesNotBeg_0+0x34)
    BLX fopen
    MOV R7, R0
    STR.W R11, [SP,#0x30+var_30]
    MOV R3, R6
    MOV R2, R5
    MOV R1, R4
    MOV R0, #0x3A458
    BL sub_1797C
    MOV R6, R0
    LDRB R3, [R0]
    TST.W R3, #0xDF
    BEQ loc_2D13C
loc_2D12A:
    MOV R3, R0
    MOVS R2, #0
loc_2D12E:
    ADDS R2, #1
    LDRB.W R1, [R3,#1]!
    TST.W R1, #0xDF
    BNE loc_2D12E
loc_2D13A:
    B loc_2D13E
loc_2D13C:
    MOVS R2, #0
loc_2D13E:
    ADDS R4, R2, #1
    CBNZ R7, loc_2D15E
loc_2D142:
    B loc_2D170
loc_2D144:
    MOV R2, R4
    MOV R1, R6
    MOV R0, R5
    BLX strncmp
    CBZ R0, loc_2D158
loc_2D150:
    MOV R1, R8
    MOV R0, R5
    BLX fputs
loc_2D158:
    MOV R0, R5
    BL sub_17A78
loc_2D15E:
    MOV R0, R7
    BL sub_17AA4
    MOV R5, R0
    CMP R0, #0
    BNE loc_2D144
loc_2D16A:
    MOV R0, R7
    BLX fclose
loc_2D170:
    MOV R1, R8
    MOV R0, R6
    BLX fputs
    MOV R0, R8
    BLX fclose
    MOV R1, R10
    MOV R0, R9
    BLX rename
    CMP R0, #0
    BGE loc_2D1A6
loc_2D18A:
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R0
    MOV R2, R10
    MOV R1, R9
    MOV R0, #0x3A468
    BL sub_117EC
loc_2D1A6:
    MOV R0, R9
    BL sub_17A78
    MOV R0, R10
    BL sub_17A78
    MOV R0, R6
    BL sub_17A78
loc_2D1B8:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
```
Output:[
    "The function `exit` is designed to terminate the program and return control to the operating system.",
    "It uses the `EXTRN` instruction to locate the `exit` function address."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
monty_reduce:
loc_1B4E4:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #8
    MOV R5, R0
    MOV R7, R1
    MOV R1, R2
    MOV R9, R3
    LDR R4, [SP,#0x28+arg_0]
    MOV.W R8, R4,LSL#2
    ADD.W R6, R0, R8
    MOV.W R10, #0xC
    MLA.W R10, R10, R4, R3
    STR.W R10, [SP,#0x28+var_28]
    MOV R3, R4
    MOV R2, R9
    MOV R0, R6
    BL sub_1B3B0
    ADD R8, R9
    STR.W R10, [SP,#0x28+var_28]
    MOV R3, R4
    MOV R2, R8
    MOV R1, R7
    MOV R0, R9
    BL sub_1B18C
    LSLS R3, R4, #1
    MOV R2, R5
    MOV R1, R8
    MOV R0, R5
    BL sub_1B020
    MOV R12, R0
    CMP R4, #0
    BLE loc_1B54E
loc_1B536:
    MOV R3, R5
    MOV LR, R6
    MOV R2, R6
    MOVS R0, #0
loc_1B53E:
    LDR R1, [R3]
    STR.W R1, [R2],#4
    STR.W R0, [R3],#4
    CMP R3, LR
    BNE loc_1B53E
loc_1B54C:
    B loc_1B5AE
loc_1B54E:
    CBZ R0, loc_1B578
loc_1B550:
    B loc_1B5A0
loc_1B552:
    LDR.W R2, [R5,R4,LSL#2]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_1B57C
loc_1B55C:
    MOV R1, R6
    MOV R2, R7
    MOVS R3, #0
    B loc_1B570
loc_1B564:
    LDR.W LR, [R1,#4]!
    LDR.W R0, [R2,#4]!
    CMP LR, R0
    BNE loc_1B57E
loc_1B570:
    ADDS R3, #1
    CMP R4, R3
    BGT loc_1B564
loc_1B576:
    B loc_1B57E
loc_1B578:
    MOVS R3, #0
    B loc_1B57E
loc_1B57C:
    MOVS R3, #0
loc_1B57E:
    CMP R3, R4
    ITE 
    MOVLT R0, #0
    MOVGE R0, #1
    CMP.W R12, #0
    IT 
    ORRNE.W R0, R0, #1
    CBNZ R0, loc_1B5A0
loc_1B592:
    ADDS R2, R3, R4
    LDR.W R2, [R5,R2,LSL#2]
    LDR.W R3, [R7,R3,LSL#2]
    CMP R2, R3
    BLS loc_1B5B6
loc_1B5A0:
    MOV R3, R4
    MOV R2, R6
    MOV R1, R7
    MOV R0, R6
    BL sub_1B05C
    B loc_1B5B6
loc_1B5AE:
    CMP.W R12, #0
    BEQ loc_1B552
loc_1B5B4:
    B loc_1B5A0
loc_1B5B6:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
```
Output:dss_openssh_fmtkey:
loc_1F6B8:
    PUSH.W {R4-R10,LR}
    MOV R4, R0
    MOV R6, R1
    MOV R7, R2
    LDR R0, [R0]
    BL sub_1BF54
    MOV R5, R0
    LDR R0, [R4,#4]
    BL sub_1BF54
    ADD R5, R0
    LDR R0, [R4,#8]
    BL sub_1BF54
    ADD R5, R0
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    ADD R5, R0
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    ADD R0, R5
    CMP R0, R7
    BGT.W locret_1F8FA
loc_1F6F0:
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6]
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,#1]
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,#2]
    LDR R0, [R4]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,#3]
    LDR R0, [R4]
    BL sub_1BF54
    MOV R9, R0
    SUBS R5, R0, #5
    CMP R0, #4
    BEQ loc_1F742
loc_1F72C:
    ADDS R7, R6, #3
loc_1F72E:
    MOV R1, R5
    LDR R0, [R4]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F72E
loc_1F742:
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    ADD.W R5, R9, #1
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R9, #2
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R9, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R8, R9, #4
    LDR R0, [R4,#4]
    BL sub_1BF54
    SUB.W R10, R0, #5
    CMP R0, #4
    BEQ loc_1F7B0
loc_1F792:
    MOV R5, R10
loc_1F794:
    MOV R1, R5
    LDR R0, [R4,#4]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F794
loc_1F7A8:
    ADD.W R9, R9, #5
    ADD.W R8, R9, R10
loc_1F7B0:
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R8]
    ADD.W R5, R8, #1
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R8, #2
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R8, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R9, R8, #4
    LDR R0, [R4,#8]
    BL sub_1BF54
    SUB.W R10, R0, #5
    CMP R0, #4
    BEQ loc_1F81E
loc_1F800:
    MOV R5, R10
loc_1F802:
    MOV R1, R5
    LDR R0, [R4,#8]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F802
loc_1F816:
    ADD.W R8, R8, #5
    ADD.W R9, R8, R10
loc_1F81E:
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    ADD.W R5, R9, #1
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R9, #2
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R9, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R8, R9, #4
    LDR R0, [R4,#0xC]
    BL sub_1BF54
    SUB.W R10, R0, #5
    CMP R0, #4
    BEQ loc_1F88A
loc_1F86E:
    MOV R5, R10
loc_1F870:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F870
loc_1F884:
    ADD.W R8, R9, #5
    ADD R8, R10
loc_1F88A:
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R8]
    ADD.W R5, R8, #1
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,R5]
    ADD.W R5, R8, #2
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,R5]
    ADD.W R5, R8, #3
    ADDS R7, R6, R5
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R0, #4
    STRB R0, [R6,R5]
    ADD.W R5, R8, #4
    LDR R0, [R4,#0x10]
    BL sub_1BF54
    SUBS R6, R0, #5
    CMP R0, #4
    BEQ loc_1F8F8
loc_1F8D8:
    MOV R5, R6
loc_1F8DA:
    MOV R1, R5
    LDR R0, [R4,#0x10]
    BL sub_1BF6C
    STRB.W R0, [R7,#1]!
    SUBS R5, #1
    CMP.W R5, #0xFFFFFFFF
    BNE loc_1F8DA
loc_1F8EE:
    ADD.W R0, R8, #5
    ADD R0, R6
    POP.W {R4-R10,PC}
loc_1F8F8:
    MOV R0, R5
loc_1F8FA:
    POP.W {R4-R10,PC}
```
Output:[
    "Allocates memory for a filename and copies it to a buffer",
    "Uses a pointer to access the buffer",
    "Calls another function to free the allocated memory"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__imp_exit:
loc_4B92C:
    IMPORT 
```
Output:[
    "Load 160 bytes from the stack into EAX",
    "Check if the top element of the stack is 13h",
    "If true, push ESI and EBX onto the stack",
    "Subtract the value at EAX from ESI",
    "Add the value at EBX to ESI",
    "Subtract the value at EAX from EBX",
    "Add the value at ESI to EBX",
    "Jump to loc_805B9EE",
    "Push the value 14h onto the stack",
    "Push the value at EAX onto the stack",
    "Call sub_805773A",
    "Add the value at EAX to ESI",
    "Subtract the value at EBX from ESI",
    "Add the value at EBX to ESI",
    "Jump to loc_805B9F4",
    "Add the value 14h to the stack",
    "Pop the value from the stack onto ESI",
    "Pop the value from the stack onto EBX",
    "Retn"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
sshcom_encrypted:
loc_16418:
    PUSH {R4-R6,LR}
    MOV R5, R1
    MOVS R1, #0
    BL sub_149F0
    MOVS R3, #0
    STR R3, [R5]
    CMP R0, #0
    BEQ loc_164EE
loc_1642A:
    MOV R4, R0
    LDR.W R1, [R0,#0x100]
    LDRB R2, [R1]
    LDRB R3, [R1,#1]
    LSLS R3, R3, #0x10
    ORR.W R2, R3, R2,LSL#24
    LDRB R3, [R1,#3]
    ORRS R3, R2
    LDRB R2, [R1,#2]
    ORR.W R3, R3, R2,LSL#8
    MOV R2, #0x3F6FF9EB
    CMP R3, R2
    IT 
    MOVNE R6, #0
    BNE loc_16500
loc_16454:
    LDR.W R3, [R0,#0x104]
    CMP R3, #0xB
    IT 
    MOVLE R6, #0
    BLE loc_16500
loc_16460:
    LDRB R3, [R1,#8]
    LDRB R0, [R1,#9]
    LSLS R0, R0, #0x10
    ORR.W R0, R0, R3,LSL#24
    LDRB R3, [R1,#0xB]
    ORRS R0, R3
    LDRB R3, [R1,#0xA]
    ORR.W R0, R0, R3,LSL#8
    BL nullsub_2
    CMP R0, #0
    IT 
    MOVLT R6, #0
    BLT loc_16500
loc_16480:
    LDR.W R3, [R4,#0x104]
    SUBS R3, #0xC
    CMP R0, R3
    IT 
    MOVGT R6, #0
    BGT loc_16500
loc_1648E:
    ADD.W R6, R0, #0xC
    LDR.W R3, [R4,#0x100]
    LDRB R1, [R3,R6]
    ADD R3, R6
    LDRB R2, [R3,#3]
    ORR.W R2, R2, R1,LSL#24
    LDRB R1, [R3,#1]
    ORR.W R2, R2, R1,LSL#16
    LDRB R0, [R3,#2]
    ORR.W R0, R2, R0,LSL#8
    BL nullsub_2
    CMP R0, #0
    IT 
    MOVLT R6, #0
    BLT loc_16500
loc_164B8:
    LDR.W R3, [R4,#0x104]
    SUBS R3, R3, R6
    SUBS R3, #4
    CMP R0, R3
    IT 
    MOVGT R6, #0
    BGT loc_16500
loc_164C8:
    CMP R0, #4
    IT 
    MOVNE R6, #1
    BNE loc_16500
loc_164D0:
    ADDS R0, R6, #4
    LDR.W R3, [R4,#0x100]
    MOVS R2, #4
    MOV R1, #aNone
    ADD R0, R3
    BLX memcmp
    MOVS R6, R0
    IT 
    MOVNE R6, #1
    B loc_16500
loc_164EE:
    MOV R0, #0x3A3D4
    BL sub_1766C
    STR R0, [R5]
    MOVS R6, #0
    B loc_1652C
loc_16500:
    MOV R0, R4
    BL sub_1766C
    STR R0, [R5]
    LDR.W R1, [R4,#0x108]
    LDR.W R0, [R4,#0x100]
    BL sub_17BF8
    LDR.W R0, [R4,#0x100]
    BL sub_17A78
    MOV.W R1, #0x10C
    MOV R0, R4
    BL sub_17BF8
    MOV R0, R4
    BL sub_17A78
loc_1652C:
    MOV R0, R6
    POP {R4-R6,PC}
```
Output:[
    "writes a random seed to a buffer",
    "opens a file for writing",
    "writes data to the file",
    "closes the file",
    "returns the error code",
    "handles errors",
    "sets variables"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
[
    "Load time戳 into register r11",
    "Load the time-stamp from the `gettimeofday` function",
    "Move the time-stamp into the `ctr` register",
    "Reset the `ctr` register"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
SHA512_Block:
loc_30838:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB.W SP, SP, #0x31C
    MOVT.W R3, #5
    MOVS R2, #0x80
    STR R3, [SP,#0x340+var_2B4]
    LDR R3, [R3]
    STR R0, [SP,#0x340+var_2F8]
    ADD R0, SP, #0x340+dest
    STR R3, [SP,#0x340+var_2C]
    BLX memcpy
    ADD R3, SP, #0x340+dest
    LDR.W R10, [SP,#0x340+dest]
    LDR.W LR, [SP,#0x340+var_2A8]
    MOVS R2, #0x10
    LDR.W R12, [SP,#0x340+var_23C]
    MOV R7, R3
    STR R3, [SP,#0x340+var_304]
    MOV R0, R10
    LDR R3, [SP,#0x340+var_234]
    MOV R4, LR
    LDR R6, [SP,#0x340+var_238]
    LDR R5, [SP,#0x340+var_230]
    STR R2, [SP,#0x340+var_33C]
    STR.W R12, [SP,#0x340+var_340]
loc_3087C:
    LDR R2, [SP,#0x340+var_340]
    LSLS R1, R6, #0xD
    LDR.W LR, [R7,#0xC]
    ADDS R7, #0x10
    LDR.W R8, [R7,#-8]
    MOV.W R10, R2,LSL#3
    ORR.W R1, R1, R2,LSR#19
    ORR.W R10, R10, R6,LSR#29
    MOV.W R12, LR,LSL#31
    EOR.W R10, R1, R10
    MOV.W R9, R8,LSL#31
    EOR.W R10, R10, R2,LSR#6
    MOV.W R1, LR,LSL#24
    ADD R0, R10
    MOV.W R10, R2,LSL#13
    LDR R2, [R7,#0x38]
    ORR.W R11, R9, LR,LSR#1
    ORR.W R12, R12, R8,LSR#1
    ORR.W R1, R1, R8,LSR#8
    ADD R0, R2
    LDR R2, [SP,#0x340+var_340]
    MOV.W R9, R8,LSL#24
    EOR.W R1, R12, R1
    ORR.W R9, R9, LR,LSR#8
    MOV.W R12, R6,LSL#3
    ORR.W R10, R10, R6,LSR#19
    EOR.W R9, R11, R9
    ORR.W R12, R12, R2,LSR#29
    MOV.W R11, R8,LSL#25
    LSLS R2, R2, #0x1A
    EOR.W R12, R10, R12
    ORR.W R11, R11, LR,LSR#7
    ORR.W R6, R2, R6,LSR#6
    EOR.W R9, R9, R11
    LDR R2, [R7,#0x3C]
    EOR.W R1, R1, R8,LSR#7
    EOR.W R6, R12, R6
    ADD R0, R1
    ADD R6, R9
    CMP R9, R6
    ITE 
    MOVLS R9, R0
    ADDHI.W R9, R0, #1
    ADD R6, R2
    CMP R2, R6
    ITE 
    MOVLS R2, R9
    ADDHI.W R2, R9, #1
    LDR R0, [R7]
    ADD R6, R4
    MOV.W R12, R5,LSR#29
    MOV R1, R2
    CMP R6, R4
    IT 
    ADDCC R1, #1
    LDR R4, [R7,#4]
    ORR.W R12, R12, R3,LSL#3
    STR R1, [SP,#0x340+var_340]
    LSRS R1, R3, #0x13
    ORR.W R1, R1, R5,LSL#13
    MOV.W R9, R0,LSR#8
    EOR.W R1, R12, R1
    MOV.W R12, R0,LSR#1
    ORR.W R9, R9, R4,LSL#24
    ORR.W R12, R12, R4,LSL#31
    EOR.W R12, R9, R12
    MOV.W R10, R4,LSR#8
    MOV.W R9, R4,LSR#1
    ORR.W R10, R10, R0,LSL#24
    ORR.W R9, R9, R0,LSL#31
    MOV.W R11, R3,LSR#29
    EOR.W R10, R10, R9
    MOV.W R9, R5,LSR#19
    LDR R2, [R7,#0x40]
    ORR.W R11, R11, R5,LSL#3
    ORR.W R9, R9, R3,LSL#13
    EOR.W R1, R1, R3,LSR#6
    EOR.W R9, R11, R9
    LSRS R5, R5, #6
    MOV.W R11, R4,LSR#7
    ADD R1, R2
    ORR.W R5, R5, R3,LSL#26
    ORR.W R11, R11, R0,LSL#25
    LDR R3, [R7,#0x44]
    EOR.W R10, R10, R11
    ADD R1, R8
    EOR.W R12, R12, R0,LSR#7
    EOR.W R5, R9, R5
    ADD R1, R12
    ADD R5, R10
    LDR R2, [SP,#0x340+var_33C]
    CMP R5, R10
    ITE 
    MOVCS R10, R1
    ADDCC.W R10, R1, #1
    ADD R5, R3
    CMP R5, R3
    ITE 
    MOVCS R3, R10
    ADDCC.W R3, R10, #1
    ADDS R2, #2
    ADD R5, LR
    LDR R1, [SP,#0x340+var_340]
    CMP LR, R5
    IT 
    ADDHI R3, #1
    CMP R2, #0x4E
    STR R6, [R7,#0x74]
    STR R1, [R7,#0x70]
    STR R3, [R7,#0x78]
    STR R5, [R7,#0x7C]
    STR R2, [SP,#0x340+var_33C]
    BNE.W loc_3087C
loc_309D4:
    ADD.W LR, SP, #0x340+var_3C
    ADD.W R12, SP, #0x340+var_2C
loc_309DC:
    LDR.W R2, [LR,#-0xC]
    LDR.W R3, [LR,#-0x10]
    LDR.W R5, [LR,#-0x78]
    LDR.W R0, [LR,#-0x74]
    MOV.W R9, R2,LSL#13
    LDR.W R7, [LR,#-0x38]
    LSLS R4, R3, #3
    LDR.W R6, [LR,#-0x80]
    ORR.W R9, R9, R3,LSR#19
    ORR.W R4, R4, R2,LSR#29
    MOV.W R8, R5,LSR#8
    LSRS R1, R5, #1
    ORR.W R8, R8, R0,LSL#24
    EOR.W R4, R9, R4
    ORR.W R1, R1, R0,LSL#31
    ADD R6, R7
    MOV.W R9, R0,LSR#1
    LSRS R7, R0, #8
    EOR.W R1, R8, R1
    ORR.W R7, R7, R5,LSL#24
    MOV.W R8, R3,LSL#13
    ORR.W R9, R9, R5,LSL#31
    EOR.W R4, R4, R3,LSR#6
    EOR.W R9, R7, R9
    ORR.W R7, R8, R2,LSR#19
    MOV.W R8, R2,LSL#3
    LSRS R0, R0, #7
    ORR.W R8, R8, R3,LSR#29
    LSLS R3, R3, #0x1A
    ORR.W R0, R0, R5,LSL#25
    ORR.W R3, R3, R2,LSR#6
    EOR.W R8, R7, R8
    EOR.W R2, R1, R5,LSR#7
    EOR.W R0, R9, R0
    LDR.W R5, [LR,#-0x34]
    ADD R4, R6
    EOR.W R3, R8, R3
    LDR.W R1, [LR,#-0x7C]
    ADD R3, R0
    ADD R2, R4
    CMP R3, R0
    IT 
    ADDCC R2, #1
    ADD R3, R5
    CMP R3, R5
    IT 
    ADDCC R2, #1
    ADD R3, R1
    CMP R3, R1
    IT 
    ADDCC R2, #1
    STR.W R3, [LR,#4]
    STR.W R2, [LR],#8
    CMP LR, R12
    BNE loc_309DC
loc_30A8C:
    LDR R2, [SP,#0x340+var_2F8]
    LDR R3, [R2]
    MOV R4, R3
    STR R3, [SP,#0x340+var_2B8]
    MOVW R3, #0x3DA8
    STR R4, [SP,#0x340+var_330]
    MOV R1, R3
    MOV R3, R2
    LDR R2, [R2,#4]
    MOV R0, R3
    MOV R5, R2
    STR R2, [SP,#0x340+var_2BC]
    MOV R2, R1
    MOVT.W R2, #4
    MOV R10, R5
    MOV LR, R2
    MOV R2, R3
    LDR R3, [R3,#8]
    MOV R6, R3
    STR R3, [SP,#0x340+var_2C0]
    LDR R3, [R2,#0xC]
    STR R6, [SP,#0x340+var_320]
    LDR R2, [R2,#0x10]
    MOV R7, R3
    STR R3, [SP,#0x340+var_2C4]
    LDR R3, [R0,#0x14]
    MOV R4, R2
    STR R2, [SP,#0x340+var_2C8]
    LDR R2, [R0,#0x1C]
    MOV R5, R3
    STR R3, [SP,#0x340+var_2CC]
    LDR R3, [R0,#0x18]
    STR R7, [SP,#0x340+var_328]
    MOV R7, R2
    STR R2, [SP,#0x340+var_2D4]
    MOV R6, R3
    STR R3, [SP,#0x340+var_2D0]
    LDR R3, [R0,#0x20]
    LDR R2, [R0,#0x28]
    STR R4, [SP,#0x340+var_314]
    MOV R4, R5
    MOV R1, R3
    STR R3, [SP,#0x340+var_2D8]
    LDR R3, [R0,#0x24]
    MOV R9, R4
    STR R6, [SP,#0x340+var_31C]
    MOV R6, R2
    STR R2, [SP,#0x340+var_2E0]
    MOV R5, R3
    STR R3, [SP,#0x340+var_2DC]
    LDR R3, [R0,#0x2C]
    STR R7, [SP,#0x340+var_310]
    STR R1, [SP,#0x340+var_308]
    MOV R7, R3
    STR R3, [SP,#0x340+var_2E4]
    LDR R3, [R0,#0x30]
    STR R6, [SP,#0x340+var_324]
    LDR R2, [R0,#0x34]
    MOV R1, R3
    STR R3, [SP,#0x340+var_2E8]
    LDR R3, [R0,#0x38]
    STR R1, [SP,#0x340+var_33C]
    MOV R1, LR
    STR R5, [SP,#0x340+var_30C]
    MOV R5, R2
    MOV R6, R3
    STR R3, [SP,#0x340+var_2F0]
    LDR R3, [R0,#0x3C]
    STR R2, [SP,#0x340+var_2EC]
    STR R7, [SP,#0x340+var_338]
    MOV R0, R3
    STR R0, [SP,#0x340+var_32C]
    LDR R0, [SP,#0x340+var_304]
    STR R3, [SP,#0x340+var_2F4]
    STR R5, [SP,#0x340+var_340]
    STR R6, [SP,#0x340+var_318]
    STR.W R10, [SP,#0x340+var_334]
loc_30B2C:
    LDR R3, [SP,#0x340+var_30C]
    ADDS R1, #0x40
    LDR R2, [SP,#0x340+var_308]
    ADDS R0, #0x40
    LDR.W R5, [R0,#-0x40]
    LSLS R4, R3, #0x12
    LSLS R6, R3, #0xE
    ORR.W R8, R4, R2,LSR#14
    MOV.W LR, R2,LSL#18
    LDR R4, [SP,#0x340+var_33C]
    LSLS R7, R2, #0xE
    ORR.W LR, LR, R3,LSR#14
    ORR.W R7, R7, R3,LSR#18
    LSLS R3, R3, #0x17
    BIC.W R12, R4, R2
    EOR.W R11, LR, R7
    ORR.W R3, R3, R2,LSR#9
    LDR R7, [SP,#0x340+var_340]
    ORR.W R6, R6, R2,LSR#18
    STR R3, [SP,#0x340+var_304]
    EOR.W R6, R6, R8
    LDR R3, [SP,#0x340+var_30C]
    LDR R4, [SP,#0x340+var_324]
    STR R5, [SP,#0x340+var_300]
    BIC.W LR, R7, R3
    LSLS R5, R2, #0x17
    LDR.W R7, [R1,#-0x40]
    LDR R2, [SP,#0x340+var_300]
    MOV R8, R4
    LDR R4, [SP,#0x340+var_308]
    ORR.W R5, R5, R3,LSR#9
    ADD R2, R7
    LDR R7, [SP,#0x340+var_338]
    AND.W R4, R8, R4
    EORS R5, R6
    EOR.W R4, R12, R4
    AND.W R12, R7, R3
    LDR R3, [SP,#0x340+var_304]
    EOR.W LR, LR, R12
    LDR.W R6, [R1,#-0x3C]
    ADD R2, R4
    EOR.W R3, R3, R11
    ADD R2, R5
    ADD R3, LR
    LDR.W R4, [R0,#-0x3C]
    CMP LR, R3
    IT 
    ADDHI R2, #1
    ADD R3, R6
    CMP R6, R3
    IT 
    ADDHI R2, #1
    LDR R6, [SP,#0x340+var_32C]
    ADD R3, R4
    LDR R5, [SP,#0x340+var_318]
    CMP R4, R3
    IT 
    ADDHI R2, #1
    ADDS R6, R6, R3
    ADC.W R5, R5, R2
    STR R6, [SP,#0x340+var_318]
    LDR R7, [SP,#0x340+var_330]
    MOV R3, R5
    LDR R5, [SP,#0x340+var_310]
    STR R3, [SP,#0x340+var_304]
    ADDS R5, R6, R5
    LDR R6, [SP,#0x340+var_31C]
    STR R5, [SP,#0x340+var_32C]
    MOV R5, R7
    ADC.W R6, R3, R6
    STR R6, [SP,#0x340+var_310]
    LDR R6, [SP,#0x340+var_334]
    LSLS R2, R7, #4
    MOV.W R10, R7,LSL#30
    LDR.W R7, [R0,#-0x38]
    LDR.W R3, [R1,#-0x38]
    MOV.W R12, R6,LSL#30
    LSLS R4, R6, #4
    ORR.W R4, R4, R5,LSR#28
    ORR.W R12, R12, R5,LSR#2
    LDR R5, [SP,#0x340+var_334]
    ORR.W R2, R2, R6,LSR#28
    EOR.W R12, R2, R12
    STR R7, [SP,#0x340+var_31C]
    LSLS R7, R6, #0x19
    LDR R6, [SP,#0x340+var_328]
    ORR.W R10, R10, R5,LSR#2
    LDR R5, [SP,#0x340+var_330]
    LDR R2, [SP,#0x340+var_314]
    EOR.W R6, R9, R6
    EOR.W R10, R4, R10
    LDR R4, [SP,#0x340+var_330]
    ORR.W R7, R7, R5,LSR#7
    MOV.W R11, R5,LSL#25
    LDR R5, [SP,#0x340+var_334]
    MOV LR, R2
    LDR R2, [SP,#0x340+var_320]
    ANDS R6, R5
    ORR.W R11, R11, R5,LSR#7
    LDR R5, [SP,#0x340+var_31C]
    EOR.W LR, LR, R2
    LDR R2, [SP,#0x340+var_310]
    AND.W LR, LR, R4
    ADD R5, R3
    LDR R4, [SP,#0x340+var_32C]
    EOR.W R3, R12, R7
    STR R5, [SP,#0x340+var_2FC]
    MOV.W R8, R2,LSL#18
    LDR R5, [SP,#0x340+var_310]
    EOR.W R11, R10, R11
    LDR R7, [SP,#0x340+var_328]
    ORR.W R2, R8, R4,LSR#14
    STR R3, [SP,#0x340+var_31C]
    MOV.W R12, R4,LSL#18
    AND.W R3, R9, R7
    MOV.W R8, R5,LSL#14
    MOV R7, R4
    EORS R6, R3
    ORR.W R8, R8, R4,LSR#18
    STR R6, [SP,#0x340+var_300]
    LDR R4, [SP,#0x340+var_320]
    ORR.W R3, R12, R5,LSR#14
    LDR R6, [SP,#0x340+var_314]
    EOR.W R8, R2, R8
    MOV.W R12, R7,LSL#14
    MOV R2, R7
    MOV R7, R2
    ANDS R4, R6
    ORR.W R12, R12, R5,LSR#18
    LSLS R2, R2, #0x17
    EOR.W R12, R3, R12
    EOR.W R4, LR, R4
    MOV R3, R5
    ORR.W R2, R2, R5,LSR#9
    MOV.W LR, R5,LSL#23
    LDR R5, [SP,#0x340+var_33C]
    LDR R6, [SP,#0x340+var_324]
    ORR.W LR, LR, R7,LSR#9
    LDR R7, [SP,#0x340+var_338]
    ADD R4, R11
    MOV R10, R5
    LDR R5, [SP,#0x340+var_2FC]
    EOR.W R2, R8, R2
    EOR.W LR, R12, LR
    ADD R5, R10
    BIC.W R10, R6, R3
    LDR R3, [SP,#0x340+var_31C]
    MOV R8, R7
    LDR R6, [SP,#0x340+var_300]
    LDR R7, [SP,#0x340+var_32C]
    ADD R6, R3
    LDR R3, [SP,#0x340+var_310]
    MOV R11, R3
    LDR R3, [SP,#0x340+var_308]
    AND.W R3, R11, R3
    EOR.W R3, R10, R3
    BIC.W R10, R8, R7
    MOV R8, R7
    LDR R7, [SP,#0x340+var_30C]
    ADD R3, R5
    LDR.W R5, [R1,#-0x34]
    AND.W R8, R8, R7
    LDR R7, [SP,#0x340+var_31C]
    ADD LR, R3
    LDR R3, [SP,#0x340+var_304]
    CMP R7, R6
    IT 
    ADDHI R4, #1
    LDR R7, [SP,#0x340+var_318]
    EOR.W R10, R10, R8
    ADDS.W R12, R7, R6
    ADD R2, R10
    ADC.W R4, R3, R4
    LDR.W R7, [R0,#-0x34]
    MOV R6, R12
    MOV R3, R4
    ADDS R4, R2, R5
    CMP R10, R2
    ITE 
    MOVLS R2, LR
    ADDHI.W R2, LR, #1
    ADD.W R11, R4, R7
    CMP R5, R4
    ITE 
    MOVLS R5, R2
    ADDHI R5, R2, #1
    LDR R2, [SP,#0x340+var_340]
    CMP R7, R11
    IT 
    ADDHI R5, #1
    MOV R4, R12
    ADDS.W R11, R2, R11
    LDR R7, [SP,#0x340+var_314]
    MOV LR, R2
    MOV.W R6, R6,LSL#30
    ITE 
    MOVCS.W LR, #1
    MOVCC.W LR, #0
    ADDS.W R12, R11, R9
    STR.W R12, [SP,#0x340+var_33C]
    ADC.W R2, R5, LR
    MOV.W R12, R3,LSL#4
    ADD R2, R7
    STR R2, [SP,#0x340+var_31C]
    MOV R2, R4
    STR R3, [SP,#0x340+var_318]
    LSLS R7, R4, #4
    ORR.W R12, R12, R2,LSR#28
    MOV.W R9, R3,LSL#30
    ORR.W R6, R6, R3,LSR#2
    LSLS R4, R2, #0x19
    MOV R3, R2
    LDR R2, [SP,#0x340+var_334]
    EOR.W R6, R12, R6
    STR R3, [SP,#0x340+var_314]
    ADD R5, LR
    AND.W R8, R3, R2
    LDR R2, [SP,#0x340+var_328]
    STR R5, [SP,#0x340+var_304]
    ANDS R2, R3
    LDR R3, [SP,#0x340+var_318]
    LDR R5, [SP,#0x340+var_328]
    EOR.W R2, R2, R8
    ORR.W R3, R7, R3,LSR#28
    LDR R7, [SP,#0x340+var_314]
    MOV LR, R5
    LDR R5, [SP,#0x340+var_334]
    ORR.W R9, R9, R7,LSR#2
    LDR R7, [SP,#0x340+var_318]
    AND.W LR, LR, R5
    EOR.W R2, R2, LR
    MOV R12, R7
    LDR R7, [SP,#0x340+var_330]
    AND.W R12, R12, R7
    LDR R7, [SP,#0x340+var_318]
    STR.W R12, [SP,#0x340+var_300]
    LDR R5, [SP,#0x340+var_300]
    ORR.W R4, R4, R7,LSR#7
    MOV R12, R7
    EORS R4, R6
    LDR R6, [SP,#0x340+var_320]
    EOR.W R7, R3, R9
    LDR.W R3, [R0,#-0x30]
    AND.W R12, R12, R6
    LDR.W R6, [R1,#-0x30]
    EOR.W R12, R12, R5
    LDR R5, [SP,#0x340+var_318]
    ADD R6, R3
    LDR R3, [SP,#0x340+var_31C]
    ADD R2, R4
    MOV.W R9, R5,LSL#25
    LDR R5, [SP,#0x340+var_314]
    ORR.W R9, R9, R5,LSR#7
    LDR R5, [SP,#0x340+var_320]
    EOR.W R9, R7, R9
    LDR R7, [SP,#0x340+var_33C]
    MOV LR, R5
    LDR R5, [SP,#0x340+var_330]
    MOV.W R10, R7,LSL#18
    AND.W R5, LR, R5
    MOV.W LR, R7,LSL#14
    ORR.W R10, R10, R3,LSR#14
    MOV R7, R3
    ORR.W LR, LR, R3,LSR#18
    LDR R3, [SP,#0x340+var_324]
    EOR.W R5, R12, R5
    EOR.W LR, R10, LR
    ADD.W R12, R6, R3
    MOV R6, R7
    LSLS R3, R6, #0xE
    LDR R6, [SP,#0x340+var_33C]
    LSLS R7, R7, #0x12
    ADD R5, R9
    CMP R4, R2
    IT 
    ADDHI R5, #1
    LDR R4, [SP,#0x340+var_33C]
    MOV R10, R6
    ORR.W R6, R7, R6,LSR#14
    ORR.W R3, R3, R10,LSR#18
    ADDS.W R2, R11, R2
    EOR.W R7, R6, R3
    LDR R6, [SP,#0x340+var_31C]
    LDR R3, [SP,#0x340+var_308]
    MOV.W R6, R6,LSL#23
    ORR.W R6, R6, R10,LSR#9
    MOV R9, R3
    LDR R3, [SP,#0x340+var_31C]
    EOR.W LR, LR, R6
    LDR R6, [SP,#0x340+var_310]
    MOV R10, R3
    BIC.W R3, R9, R3
    AND.W R6, R6, R10
    EOR.W R6, R6, R3
    MOV.W R3, R4,LSL#23
    LDR R4, [SP,#0x340+var_30C]
    ORR.W R3, R3, R10,LSR#9
    ADD R6, R12
    EOR.W R3, R3, R7
    ADD R6, LR
    MOV R12, R4
    LDR R4, [SP,#0x340+var_33C]
    LDR R7, [SP,#0x340+var_32C]
    STR R2, [SP,#0x340+var_340]
    LDR R2, [SP,#0x340+var_304]
    MOV R9, R4
    BIC.W R4, R12, R4
    AND.W R12, R7, R9
    ADC.W R2, R2, R5
    LDR.W R7, [R1,#-0x2C]
    EOR.W R4, R4, R12
    LDR.W LR, [R0,#-0x2C]
    ADD R3, R4
    MOV R5, R2
    CMP R4, R3
    IT 
    ADDHI R6, #1
    LDR R2, [SP,#0x340+var_338]
    ADD R3, R7
    LDR R4, [SP,#0x340+var_340]
    CMP R7, R3
    IT 
    ADDHI R6, #1
    ADD R3, LR
    CMP LR, R3
    ITE 
    MOVLS R12, R6
    ADDHI.W R12, R6, #1
    ADDS.W LR, R3, R2
    LDR R2, [SP,#0x340+var_328]
    MOV.W R7, R4,LSL#4
    MOV R3, LR
    LDR R6, [SP,#0x340+var_320]
    ITE 
    MOVCS R3, #1
    MOVCC R3, #0
    STR.W LR, [SP,#0x340+var_338]
    ADDS.W LR, LR, R2
    STR.W LR, [SP,#0x340+var_328]
    ADC.W LR, R12, R3
    ADD LR, R6
    LDR R6, [SP,#0x340+var_318]
    LDR R2, [SP,#0x340+var_330]
    ORR.W R7, R7, R5,LSR#28
    STR.W LR, [SP,#0x340+var_304]
    MOV.W LR, R5,LSL#30
    MOV R10, R6
    LDR R6, [SP,#0x340+var_340]
    AND.W R11, R5, R2
    MOV R2, R5
    ADD R12, R3
    STR R2, [SP,#0x340+var_324]
    ORR.W LR, LR, R6,LSR#2
    LDR R3, [SP,#0x340+var_314]
    EOR.W LR, R7, LR
    LSLS R7, R2, #0x19
    LDR R2, [SP,#0x340+var_340]
    MOV.W R9, R4,LSL#30
    STR.W R12, [SP,#0x340+var_320]
    MOV R12, R3
    AND.W R12, R12, R2
    AND.W R10, R10, R5
    ORR.W R7, R7, R2,LSR#7
    LDR R2, [SP,#0x340+var_334]
    ORR.W R9, R9, R5,LSR#2
    LSLS R4, R5, #4
    LDR R5, [SP,#0x340+var_300]
    EOR.W R11, R11, R10
    LDR.W R3, [R1,#-0x28]
    ORR.W R4, R4, R6,LSR#28
    EOR.W R11, R11, R5
    LDR.W R6, [R0,#-0x28]
    MOV R5, R12
    MOV R12, R2
    LDR R2, [SP,#0x340+var_340]
    ADD R6, R3
    STR R5, [SP,#0x340+var_300]
    EOR.W R4, R4, R9
    AND.W R3, R2, R12
    EOR.W R7, LR, R7
    EORS R3, R5
    LDR R5, [SP,#0x340+var_324]
    MOV.W R9, R2,LSL#25
    LDR R2, [SP,#0x340+var_328]
    EOR.W R3, R3, R8
    ADD R7, R11
    ORR.W R9, R9, R5,LSR#7
    LDR R5, [SP,#0x340+var_304]
    EOR.W R9, R4, R9
    MOV.W R12, R2,LSL#18
    LDR R4, [SP,#0x340+var_308]
    ADD R3, R9
    LDR R2, [SP,#0x340+var_328]
    MOV.W R8, R5,LSL#18
    ADD R6, R4
    LSLS R4, R5, #0xE
    ORR.W R12, R12, R5,LSR#14
    CMP R9, R3
    IT 
    ADDHI R7, #1
    ORR.W R4, R4, R2,LSR#18
    MOV.W LR, R2,LSL#14
    ORR.W R8, R8, R2,LSR#14
    LDR R2, [SP,#0x340+var_328]
    ORR.W LR, LR, R5,LSR#18
    EOR.W R8, R8, R4
    EOR.W R12, R12, LR
    MOV.W LR, R5,LSL#23
    ORR.W LR, LR, R2,LSR#9
    LDR R2, [SP,#0x340+var_310]
    EOR.W LR, R12, LR
    BIC.W R4, R2, R5
    LDR R2, [SP,#0x340+var_31C]
    MOV R12, R2
    MOV R2, R5
    AND.W R12, R12, R5
    LDR R5, [SP,#0x340+var_328]
    EOR.W R12, R4, R12
    ADD R6, R12
    LSLS R4, R5, #0x17
    ADD R6, LR
    ORR.W R4, R4, R2,LSR#9
    LDR R2, [SP,#0x340+var_32C]
    EOR.W R4, R8, R4
    MOV R12, R2
    LDR R2, [SP,#0x340+var_33C]
    BIC.W R12, R12, R5
    AND.W R8, R2, R5
    LDR R5, [SP,#0x340+var_338]
    EOR.W R8, R12, R8
    LDR.W R12, [R1,#-0x24]
    ADDS R3, R5, R3
    ADD.W R9, R4, R8
    LDR.W R4, [R0,#-0x24]
    MOV R5, R3
    LDR R3, [SP,#0x340+var_320]
    STR R5, [SP,#0x340+var_338]
    ADC.W R7, R3, R7
    CMP R8, R9
    IT 
    ADDHI R6, #1
    MOV R3, R7
    ADD.W R7, R9, R12
    CMP R12, R7
    IT 
    ADDHI R6, #1
    ADD R7, R4
    MOV.W R9, R5,LSL#4
    MOV.W R8, R3,LSL#30
    MOV LR, R6
    CMP R4, R7
    IT 
    ADDHI.W LR, LR, #1
    LDR R4, [SP,#0x340+var_30C]
    ORR.W R9, R9, R3,LSR#28
    MOV R5, LR
    LDR R6, [SP,#0x340+var_334]
    ADDS.W LR, R7, R4
    LDR R4, [SP,#0x340+var_330]
    STR R5, [SP,#0x340+var_308]
    MOV R7, LR
    ITE 
    MOVCS.W LR, #1
    MOVCC.W LR, #0
    STR R7, [SP,#0x340+var_30C]
    MOV R2, LR
    ADDS.W LR, R7, R6
    ADC.W R6, R5, R2
    STR R2, [SP,#0x340+var_2FC]
    ADDS R7, R6, R4
    LDR R6, [SP,#0x340+var_338]
    LDR R2, [SP,#0x340+var_324]
    MOV R5, R7
    LDR.W R4, [R0,#-0x20]
    MOV.W R12, R6,LSL#30
    LDR R6, [SP,#0x340+var_318]
    LDR.W R7, [R1,#-0x20]
    ORR.W R12, R12, R3,LSR#2
    EORS R6, R2
    LDR R2, [SP,#0x340+var_338]
    ADD.W R11, R7, R4
    LDR R4, [SP,#0x340+var_338]
    STR.W LR, [SP,#0x340+var_334]
    ANDS R6, R3
    ORR.W R8, R8, R2,LSR#2
    LDR R7, [SP,#0x340+var_340]
    EOR.W LR, R9, R8
    MOV.W R8, R3,LSL#4
    ORR.W R4, R8, R4,LSR#28
    MOV R2, R3
    EOR.W R12, R4, R12
    LDR R4, [SP,#0x340+var_314]
    MOV.W R8, R3,LSL#25
    LDR R3, [SP,#0x340+var_338]
    EORS R7, R4
    LDR R4, [SP,#0x340+var_334]
    EOR.W R6, R6, R10
    STR R5, [SP,#0x340+var_320]
    ORR.W R8, R8, R3,LSR#7
    LDR R3, [SP,#0x340+var_338]
    MOV.W R10, R4,LSL#18
    EOR.W R8, LR, R8
    ORR.W R9, R10, R5,LSR#14
    LDR R5, [SP,#0x340+var_300]
    ANDS R7, R3
    LDR R3, [SP,#0x340+var_338]
    EORS R7, R5
    LDR R5, [SP,#0x340+var_320]
    MOV.W R10, R4,LSL#14
    ADD R6, R8
    LSLS R4, R3, #0x19
    MOV R3, R2
    ORR.W R4, R4, R2,LSR#7
    ORR.W R10, R10, R5,LSR#18
    LDR R2, [SP,#0x340+var_310]
    EOR.W R12, R12, R4
    EOR.W R10, R9, R10
    LDR R4, [SP,#0x340+var_304]
    MOV.W LR, R5,LSL#18
    MOV.W R9, R5,LSL#14
    LDR R5, [SP,#0x340+var_334]
    ADD R11, R2
    LDR R2, [SP,#0x340+var_31C]
    ADD R7, R12
    CMP R12, R7
    IT 
    ADDHI R6, #1
    ORR.W LR, LR, R5,LSR#14
    ORR.W R9, R9, R5,LSR#18
    MOV R5, R4
    LDR R4, [SP,#0x340+var_320]
    EOR.W R9, LR, R9
    MOV LR, R2
    ANDS R4, R5
    LDR R5, [SP,#0x340+var_320]
    LDR R2, [SP,#0x340+var_320]
    BIC.W LR, LR, R5
    MOV.W R8, R5,LSL#23
    LDR R5, [SP,#0x340+var_334]
    EOR.W R4, LR, R4
    ADD R4, R11
    MOV.W LR, R5,LSL#23
    ORR.W R8, R8, R5,LSR#9
    ORR.W LR, LR, R2,LSR#9
    LDR R5, [SP,#0x340+var_334]
    LDR R2, [SP,#0x340+var_33C]
    EOR.W R8, R10, R8
    EOR.W LR, R9, LR
    LDR.W R9, [R1,#-0x1C]
    BIC.W R11, R2, R5
    LDR R2, [SP,#0x340+var_328]
    ADD R8, R4
    AND.W R10, R2, R5
    LDR R5, [SP,#0x340+var_308]
    EOR.W R11, R11, R10
    ADD LR, R11
    MOV R10, R5
    LDR R5, [SP,#0x340+var_2FC]
    ADD R10, R5
    LDR R5, [SP,#0x340+var_30C]
    ADDS R5, R5, R7
    LDR.W R7, [R0,#-0x1C]
    MOV R2, R5
    ADC.W R5, R10, R6
    ADD.W R6, LR, R9
    CMP R11, LR
    ITE 
    MOVLS R11, R8
    ADDHI.W R11, R8, #1
    CMP R9, R6
    IT 
    ADDHI.W R11, R11, #1
    ADD R6, R7
    STR R5, [SP,#0x340+var_330]
    MOV.W R10, R2,LSL#30
    MOV R5, R11
    CMP R7, R6
    IT 
    ADDHI R5, #1
    LDR R7, [SP,#0x340+var_32C]
    STR R5, [SP,#0x340+var_310]
    ADDS.W LR, R7, R6
    LDR R7, [SP,#0x340+var_314]
    MOV R6, LR
    ITE 
    MOVCS.W LR, #1
    MOVCC.W LR, #0
    STR R6, [SP,#0x340+var_314]
    MOV R4, LR
    MOV LR, R7
    ADDS.W LR, LR, R6
    LDR R6, [SP,#0x340+var_330]
    LDR R7, [SP,#0x340+var_318]
    STR R4, [SP,#0x340+var_300]
    ADC.W R4, R5, R4
    MOV.W R12, R6,LSL#4
    LDR R6, [SP,#0x340+var_330]
    ADDS R7, R4, R7
    LSLS R4, R2, #4
    STR.W LR, [SP,#0x340+var_32C]
    MOV R5, R7
    MOV.W R9, R6,LSL#30
    MOV R7, R2
    ORR.W R10, R10, R6,LSR#2
    MOV R2, R7
    LDR.W R6, [R0,#-0x18]
    ORR.W R12, R12, R7,LSR#28
    MOV.W R8, R7,LSL#25
    ORR.W R9, R9, R7,LSR#2
    LDR R7, [SP,#0x340+var_340]
    STR R6, [SP,#0x340+var_318]
    EOR.W R10, R12, R10
    LDR R6, [SP,#0x340+var_330]
    MOV LR, R7
    LDR R7, [SP,#0x340+var_338]
    EOR.W LR, LR, R7
    ORR.W R4, R4, R6,LSR#28
    LSLS R7, R6, #0x19
    ORR.W R8, R8, R6,LSR#7
    AND.W LR, LR, R2
    MOV R6, R2
    LDR R2, [SP,#0x340+var_324]
    ORR.W R7, R7, R6,LSR#7
    STR R6, [SP,#0x340+var_30C]
    EOR.W R9, R4, R9
    LDR R6, [SP,#0x340+var_330]
    EOR.W R4, R2, R3
    LDR R2, [SP,#0x340+var_32C]
    EOR.W R7, R9, R7
    ANDS R4, R6
    LDR.W R6, [R1,#-0x18]
    MOV.W R9, R5,LSL#18
    EOR.W R8, R10, R8
    MOV.W R11, R2,LSL#18
    ORR.W R10, R9, R2,LSR#14
    MOV R12, R6
    LDR R6, [SP,#0x340+var_318]
    ORR.W R11, R11, R5,LSR#14
    MOV.W R9, R5,LSL#14
    ADD R12, R6
    LSLS R6, R2, #0xE
    ORR.W R6, R6, R5,LSR#18
    LDR R2, [SP,#0x340+var_31C]
    EOR.W R11, R11, R6
    LDR R6, [SP,#0x340+var_32C]
    STR R5, [SP,#0x340+var_318]
    ADD R12, R2
    MOV R2, R5
    LDR R5, [SP,#0x340+var_340]
    ORR.W R9, R9, R6,LSR#18
    LDR R6, [SP,#0x340+var_338]
    STR R3, [SP,#0x340+var_308]
    EOR.W R9, R10, R9
    ANDS R6, R5
    LDR R5, [SP,#0x340+var_324]
    EOR.W LR, LR, R6
    AND.W R6, R5, R3
    LDR R3, [SP,#0x340+var_304]
    MOV R5, R2
    EORS R4, R6
    BIC.W R6, R3, R2
    LDR R2, [SP,#0x340+var_320]
    ADD R7, R4
    ADD LR, R8
    AND.W R10, R2, R5
    LDR R2, [SP,#0x340+var_32C]
    EOR.W R10, R6, R10
    LSLS R6, R5, #0x17
    ADD R12, R10
    CMP R8, LR
    IT 
    ADDHI R7, #1
    LSLS R4, R2, #0x17
    ORR.W R6, R6, R2,LSR#9
    ORR.W R4, R4, R5,LSR#9
    LDR R2, [SP,#0x340+var_328]
    LDR R5, [SP,#0x340+var_32C]
    EOR.W R6, R11, R6
    EOR.W R4, R9, R4
    LDR.W R9, [R1,#-0x14]
    BIC.W R10, R2, R5
    LDR R2, [SP,#0x340+var_334]
    ADD R6, R12
    AND.W R11, R2, R5
    LDR R5, [SP,#0x340+var_310]
    EOR.W R10, R10, R11
    LDR R2, [SP,#0x340+var_340]
    ADD R4, R10
    MOV R11, R5
    LDR R5, [SP,#0x340+var_300]
    ADD R11, R5
    LDR R5, [SP,#0x340+var_314]
    ADDS.W LR, R5, LR
    STR.W LR, [SP,#0x340+var_310]
    ADC.W R12, R11, R7
    ADD.W R7, R4, R9
    CMP R10, R4
    ITE 
    MOVLS R4, R6
    ADDHI R4, R6, #1
    LDR.W LR, [R0,#-0x14]
    CMP R9, R7
    IT 
    ADDHI R4, #1
    MOV R5, R12
    ADD.W R8, R7, LR
    MOV R6, R5
    MOV R7, R4
    LDR R4, [SP,#0x340+var_33C]
    CMP LR, R8
    IT 
    ADDHI R7, #1
    MOV.W R9, R5,LSL#4
    ADDS.W LR, R4, R8
    LDR R4, [SP,#0x340+var_324]
    STR.W LR, [SP,#0x340+var_314]
    ITE 
    MOVCS.W R12, #1
    MOVCC.W R12, #0
    ADDS.W LR, R2, LR
    STR.W LR, [SP,#0x340+var_340]
    ADC.W R2, R7, R12
    STR R7, [SP,#0x340+var_304]
    ADD R4, R2
    STR R4, [SP,#0x340+var_33C]
    LDR R4, [SP,#0x340+var_310]
    LDR R2, [SP,#0x340+var_340]
    MOV R7, R4
    LSLS R5, R4, #4
    MOV.W R10, R4,LSL#30
    MOV R4, R6
    MOV.W R8, R2,LSL#18
    MOV R2, R4
    ORR.W R11, R5, R2,LSR#28
    STR R2, [SP,#0x340+var_31C]
    LDR.W R5, [R1,#-0x10]
    ORR.W R9, R9, R7,LSR#28
    ORR.W R10, R10, R4,LSR#2
    MOV R4, R7
    LDR R7, [SP,#0x340+var_340]
    EOR.W R10, R9, R10
    MOV LR, R5
    LDR.W R5, [R0,#-0x10]
    LSLS R6, R6, #0x1E
    LSLS R2, R4, #0x19
    ADD LR, R5
    LDR R5, [SP,#0x340+var_33C]
    LSLS R7, R7, #0xE
    ADD LR, R3
    LDR R3, [SP,#0x340+var_318]
    ORR.W R6, R6, R4,LSR#2
    ORR.W R8, R8, R5,LSR#14
    ORR.W R7, R7, R5,LSR#18
    LDR R5, [SP,#0x340+var_30C]
    EOR.W R7, R8, R7
    MOV R9, R5
    LDR R5, [SP,#0x340+var_338]
    EOR.W R9, R5, R9
    LDR R5, [SP,#0x340+var_31C]
    AND.W R9, R9, R4
    ORR.W R2, R2, R5,LSR#7
    EOR.W R5, R11, R6
    MOV R11, R3
    LDR R3, [SP,#0x340+var_33C]
    LDR R6, [SP,#0x340+var_31C]
    EOR.W R2, R10, R2
    AND.W R11, R11, R3
    LDR R3, [SP,#0x340+var_308]
    LSLS R6, R6, #0x19
    MOV R8, R3
    LDR R3, [SP,#0x340+var_330]
    ORR.W R6, R6, R4,LSR#7
    LDR R4, [SP,#0x340+var_31C]
    EOR.W R8, R8, R3
    LDR R3, [SP,#0x340+var_33C]
    EORS R6, R5
    AND.W R8, R8, R4
    LDR R4, [SP,#0x340+var_320]
    MOV.W R10, R3,LSL#18
    LSLS R5, R3, #0xE
    LDR R3, [SP,#0x340+var_340]
    STR R6, [SP,#0x340+var_324]
    MOV R6, R4
    ORR.W R10, R10, R3,LSR#14
    ORR.W R5, R5, R3,LSR#18
    LDR R3, [SP,#0x340+var_304]
    EOR.W R5, R10, R5
    ADD R12, R3
    LDR R3, [SP,#0x340+var_33C]
    BIC.W R4, R6, R3
    MOV.W R10, R3,LSL#23
    LDR R3, [SP,#0x340+var_30C]
    EOR.W R4, R4, R11
    ADD R4, LR
    MOV R11, R3
    LDR R3, [SP,#0x340+var_338]
    AND.W R11, R3, R11
    LDR R3, [SP,#0x340+var_340]
    EOR.W R9, R9, R11
    ADD R9, R2
    ORR.W R10, R10, R3,LSR#9
    LDR R3, [SP,#0x340+var_308]
    EOR.W R10, R7, R10
    LDR R7, [SP,#0x340+var_32C]
    ADD R4, R10
    MOV R11, R3
    LDR R3, [SP,#0x340+var_330]
    MOV R6, R7
    AND.W R11, R11, R3
    LDR R3, [SP,#0x340+var_340]
    EOR.W R11, R8, R11
    MOV.W R8, R3,LSL#23
    LDR R3, [SP,#0x340+var_33C]
    ORR.W R8, R8, R3,LSR#9
    LDR R3, [SP,#0x340+var_334]
    EOR.W R5, R5, R8
    MOV LR, R3
    LDR R3, [SP,#0x340+var_340]
    AND.W R7, R6, R3
    LDR R6, [SP,#0x340+var_324]
    BIC.W LR, LR, R3
    ADD R6, R11
    EOR.W R7, LR, R7
    CMP R2, R9
    IT 
    ADDHI R6, #1
    LDR R2, [SP,#0x340+var_314]
    LDR.W R11, [R1,#-0xC]
    ADD R5, R7
    ADDS.W R9, R2, R9
    LDR.W R2, [R0,#-0xC]
    ADC.W R6, R12, R6
    CMP R7, R5
    IT 
    ADDHI R4, #1
    MOV.W R10, R9,LSL#4
    MOV.W R7, R9,LSL#25
    MOV R3, R6
    ADD.W R6, R5, R11
    CMP R11, R6
    IT 
    ADDHI R4, #1
    ADD R6, R2
    CMP R2, R6
    IT 
    ADDHI R4, #1
    LDR R2, [SP,#0x340+var_328]
    STR R3, [SP,#0x340+var_314]
    ORR.W R10, R10, R3,LSR#28
    ADDS R5, R2, R6
    LDR R2, [SP,#0x340+var_338]
    MOV.W R6, R9,LSL#30
    MOV.W R11, R3,LSL#4
    ITE 
    MOVCS.W R8, #1
    MOVCC.W R8, #0
    MOV.W R12, R3,LSL#30
    ADDS.W LR, R2, R5
    ORR.W R6, R6, R3,LSR#2
    LDR R3, [SP,#0x340+var_308]
    STR R5, [SP,#0x340+var_328]
    ADC.W R5, R4, R8
    ADD R5, R3
    LDR R2, [SP,#0x340+var_310]
    LDR R3, [SP,#0x340+var_30C]
    ORR.W R11, R11, R9,LSR#28
    STR R5, [SP,#0x340+var_324]
    EOR.W R6, R11, R6
    EOR.W R5, R3, R2
    LDR R2, [SP,#0x340+var_314]
    STR.W LR, [SP,#0x340+var_338]
    ORR.W R12, R12, R9,LSR#2
    EOR.W R12, R10, R12
    AND.W R5, R5, R9
    MOV.W LR, R2,LSL#25
    ORR.W R7, R7, R2,LSR#7
    LDR R2, [SP,#0x340+var_330]
    EORS R7, R6
    MOV R6, R3
    LDR R3, [SP,#0x340+var_310]
    ORR.W LR, LR, R9,LSR#7
    ADD R8, R4
    MOV R10, R2
    LDR R2, [SP,#0x340+var_31C]
    ANDS R3, R6
    EOR.W LR, R12, LR
    EOR.W R11, R10, R2
    LDR R2, [SP,#0x340+var_314]
    EORS R5, R3
    LDR R3, [SP,#0x340+var_330]
    AND.W R11, R11, R2
    LDR R2, [SP,#0x340+var_31C]
    LDR.W R6, [R0,#-8]
    ADD R5, R7
    MOV R10, R3
    AND.W R10, R10, R2
    LDR R2, [SP,#0x340+var_338]
    EOR.W R3, R11, R10
    LDR R4, [SP,#0x340+var_33C]
    ADD R3, LR
    CMP R7, R5
    IT 
    ADDHI R3, #1
    MOV.W R11, R2,LSL#18
    MOV.W R12, R2,LSL#14
    LDR R2, [SP,#0x340+var_324]
    MOV.W R10, R2,LSL#18
    LDR.W R2, [R1,#-8]
    ADDS R2, R6, R2
    STR R2, [SP,#0x340+var_308]
    LDR R2, [SP,#0x340+var_324]
    MOV R6, R4
    AND.W R4, R6, R2
    LDR R6, [SP,#0x340+var_328]
    ORR.W R12, R12, R2,LSR#18
    MOV.W LR, R2,LSL#14
    ORR.W R11, R11, R2,LSR#14
    LDR R2, [SP,#0x340+var_338]
    ADDS R6, R6, R5
    LDR R5, [SP,#0x340+var_318]
    STR R6, [SP,#0x340+var_328]
    EOR.W R11, R11, R12
    ORR.W LR, LR, R2,LSR#18
    ORR.W R10, R10, R2,LSR#14
    LDR R2, [SP,#0x340+var_320]
    MOV R6, R5
    LDR R5, [SP,#0x340+var_324]
    ADC.W R12, R8, R3
    EOR.W R10, R10, LR
    BIC.W R7, R6, R5
    MOV R6, R2
    LDR R2, [SP,#0x340+var_308]
    EORS R4, R7
    LDR R5, [SP,#0x340+var_324]
    ADD R2, R6
    MOV R6, R2
    LDR R2, [SP,#0x340+var_338]
    LDR R7, [SP,#0x340+var_338]
    LSLS R5, R5, #0x17
    LDR R3, [SP,#0x340+var_324]
    ADD R6, R4
    LSLS R2, R2, #0x17
    STR.W R12, [SP,#0x340+var_320]
    ORR.W R5, R5, R7,LSR#9
    LDR R7, [SP,#0x340+var_32C]
    ORR.W R3, R2, R3,LSR#9
    LDR R2, [SP,#0x340+var_338]
    EOR.W R11, R11, R5
    EOR.W R3, R10, R3
    MOV LR, R7
    LDR R7, [SP,#0x340+var_340]
    BIC.W R12, LR, R2
    ADD R6, R11
    MOV LR, R7
    AND.W R8, LR, R2
    LDR.W R2, [R0,#-4]
    EOR.W R8, R12, R8
    LDR.W R7, [R1,#-4]
    ADD R3, R8
    STR R2, [SP,#0x340+var_304]
    LDR R2, [SP,#0x340+var_328]
    STR R7, [SP,#0x340+var_308]
    LDR R7, [SP,#0x340+var_320]
    MOV.W R10, R2,LSL#30
    MOV.W R11, R2,LSL#4
    CMP R8, R3
    ITE 
    MOVLS R2, R6
    ADDHI R2, R6, #1
    LDR R6, [SP,#0x340+var_308]
    MOV.W LR, R7,LSL#30
    ORR.W R11, R11, R7,LSR#28
    ADD R3, R6
    LDR R6, [SP,#0x340+var_328]
    LSLS R5, R7, #4
    ORR.W R10, R10, R7,LSR#2
    LDR R7, [SP,#0x340+var_308]
    MOV R4, R6
    ORR.W R5, R5, R6,LSR#28
    ORR.W LR, LR, R4,LSR#2
    LDR R4, [SP,#0x340+var_310]
    CMP R7, R3
    IT 
    ADDHI R2, #1
    STR R2, [SP,#0x340+var_308]
    EOR.W R8, R4, R9
    LDR R4, [SP,#0x340+var_320]
    LDR R2, [SP,#0x340+var_304]
    LSLS R6, R6, #0x19
    EOR.W R10, R5, R10
    LDR R5, [SP,#0x340+var_31C]
    ADD R3, R2
    LSLS R7, R4, #0x19
    MOV R2, R4
    ORR.W R6, R6, R4,LSR#7
    LDR R4, [SP,#0x340+var_328]
    MOV R12, R5
    LDR R5, [SP,#0x340+var_314]
    EOR.W LR, R11, LR
    AND.W R8, R8, R4
    EOR.W R6, R10, R6
    ORR.W R7, R7, R4,LSR#7
    LDR R4, [SP,#0x340+var_310]
    EOR.W R12, R12, R5
    EOR.W R7, LR, R7
    AND.W R12, R12, R2
    AND.W R5, R4, R9
    MOV R11, R4
    LDR R2, [SP,#0x340+var_308]
    LDR R4, [SP,#0x340+var_304]
    EOR.W R5, R8, R5
    ADD R5, R6
    CMP R4, R3
    IT 
    ADDHI R2, #1
    LDR R4, [SP,#0x340+var_31C]
    STR R2, [SP,#0x340+var_308]
    LDR R2, [SP,#0x340+var_334]
    MOV R10, R4
    LDR R4, [SP,#0x340+var_314]
    ADDS R3, R2, R3
    LDR R2, [SP,#0x340+var_30C]
    AND.W R4, R10, R4
    EOR.W R4, R12, R4
    ITE 
    MOVCS.W R11, #1
    MOVCC.W R11, #0
    ADD R7, R4
    ADDS R2, R2, R3
    STR R2, [SP,#0x340+var_30C]
    LDR R4, [SP,#0x340+var_308]
    ADC.W R10, R4, R11
    CMP R6, R5
    IT 
    ADDHI R7, #1
    MOV R2, R4
    ADDS R4, R3, R5
    LDR R3, [SP,#0x340+var_330]
    ADD R2, R11
    STR R4, [SP,#0x340+var_334]
    ADD R3, R10
    STR R3, [SP,#0x340+var_308]
    ADC.W R3, R2, R7
    STR R3, [SP,#0x340+var_330]
    LDR R3, =unk_44028
    CMP R3, R1
    BNE.W loc_30B2C
loc_3169C:
    LDR R1, [SP,#0x340+var_2BC]
    MOV R10, R4
    LDR R0, [SP,#0x340+var_2B8]
    ADD R1, R4
    LDR R4, [SP,#0x340+var_330]
    LDR R3, [SP,#0x340+var_2C]
    ADD R0, R4
    LDR R4, [SP,#0x340+var_2C0]
    MOV R8, R1
    LDR R1, [SP,#0x340+var_2B4]
    STR R3, [SP,#0x340+var_304]
    MOV R5, R0
    LDR R3, [SP,#0x340+var_328]
    CMP R10, R8
    IT 
    ADDHI R5, #1
    LDR R0, [SP,#0x340+var_2C4]
    LDR R1, [R1]
    ADD R0, R3
    LDR R7, [SP,#0x340+var_2D0]
    MOV R12, R0
    LDR R0, [SP,#0x340+var_320]
    STR R1, [SP,#0x340+var_300]
    ADD R0, R4
    LDR R4, [SP,#0x340+var_2C8]
    LDR R1, [SP,#0x340+var_310]
    MOV R6, R0
    LDR R0, [SP,#0x340+var_2CC]
    STR.W R9, [SP,#0x340+var_320]
    ADD R0, R9
    MOV LR, R0
    LDR R0, [SP,#0x340+var_314]
    ADD R0, R4
    LDR R4, [SP,#0x340+var_2D4]
    STR R0, [SP,#0x340+var_314]
    ADD R4, R1
    STR R4, [SP,#0x340+var_334]
    LDR R4, [SP,#0x340+var_31C]
    LDR R0, [SP,#0x340+var_30C]
    ADD R4, R7
    LDR R7, [SP,#0x340+var_2DC]
    STR R4, [SP,#0x340+var_31C]
    ADD R7, R0
    LDR R4, [SP,#0x340+var_308]
    STR R7, [SP,#0x340+var_330]
    LDR R7, [SP,#0x340+var_2D8]
    LDR R0, [SP,#0x340+var_324]
    ADD R7, R4
    LDR R4, [SP,#0x340+var_2E4]
    MOV R9, R4
    LDR R4, [SP,#0x340+var_338]
    ADD R9, R4
    LDR R4, [SP,#0x340+var_2E0]
    MOV R1, R9
    MOV R9, R0
    LDR R0, [SP,#0x340+var_2EC]
    ADD R9, R4
    LDR R4, [SP,#0x340+var_340]
    LDR R3, [SP,#0x340+var_2E8]
    ADD R0, R4
    LDR R4, [SP,#0x340+var_33C]
    MOV R11, R4
    LDR R4, [SP,#0x340+var_2F4]
    ADD R11, R3
    LDR R3, [SP,#0x340+var_32C]
    ADD R4, R3
    LDR R3, [SP,#0x340+var_318]
    MOV R2, R3
    LDR R3, [SP,#0x340+var_2F0]
    ADD R2, R3
    LDR R3, [SP,#0x340+var_328]
    STR R2, [SP,#0x340+var_33C]
    CMP R3, R12
    IT 
    ADDHI R6, #1
    LDR R3, [SP,#0x340+var_2F8]
    STR R6, [R3,#8]
    LDR R6, [SP,#0x340+var_31C]
    STR R5, [R3]
    LDR R5, [SP,#0x340+var_314]
    LDR R3, [SP,#0x340+var_334]
    MOV R2, R6
    LDR R6, [SP,#0x340+var_310]
    MOV R10, R5
    LDR R5, [SP,#0x340+var_320]
    CMP R6, R3
    IT 
    ADDHI R2, #1
    LDR R3, [SP,#0x340+var_2F8]
    CMP R5, LR
    IT 
    ADDHI.W R10, R10, #1
    LDR R5, [SP,#0x340+var_30C]
    MOV R6, R2
    MOV R2, R3
    LDR R3, [SP,#0x340+var_330]
    STR.W R10, [R2,#0x10]
    CMP R5, R3
    IT 
    ADDHI R7, #1
    LDR R3, [SP,#0x340+var_2F8]
    LDR R5, [SP,#0x340+var_338]
    STR R6, [R3,#0x18]
    CMP R5, R1
    ITE 
    MOVLS R5, R9
    ADDHI.W R5, R9, #1
    STR R7, [R3,#0x20]
    STR R5, [R3,#0x28]
    LDR R7, [SP,#0x340+var_32C]
    LDR R6, [SP,#0x340+var_340]
    LDR R5, [SP,#0x340+var_33C]
    CMP R6, R0
    ITE 
    MOVLS R6, R11
    ADDHI.W R6, R11, #1
    STR R6, [R3,#0x30]
    CMP R7, R4
    IT 
    ADDHI R5, #1
    STR R5, [R3,#0x38]
    STR.W R8, [R3,#4]
    MOV R7, R3
    LDR R2, [SP,#0x340+var_334]
    STR.W R12, [R3,#0xC]
    STR.W LR, [R3,#0x14]
    STR R2, [R3,#0x1C]
    LDR R3, [SP,#0x340+var_330]
    STR R1, [R7,#0x2C]
    LDR R1, [SP,#0x340+var_300]
    STR R3, [R7,#0x24]
    LDR R3, [SP,#0x340+var_304]
    STR R0, [R7,#0x34]
    CMP R3, R1
    STR R4, [R7,#0x3C]
    BNE loc_317C4
loc_317BC:
    ADD.W SP, SP, #0x31C
    POP.W {R4-R11,PC}
loc_317C4:
    BLX __stack_chk_fail
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ssh2_userkey_encrypted:
loc_26550:
    PUSH.W {R4-R8,LR}
    MOV R4, #0x4C188
    SUB SP, SP, #0x30
    MOV R7, R1
    LDR R3, [R4]
    STR R3, [SP,#0x48+var_1C]
    CBZ R1, loc_2656A
loc_26566:
    MOVS R3, #0
    STR R3, [R1]
loc_2656A:
    MOVW R1, #0x8DAC
    MOVS R2, #0
    MOVT.W R1, #3
    BL sub_2CC3C
    MOV R6, R0
    MOV R5, R0
    CBZ R0, loc_265D8
loc_2657E:
    ADD R1, SP, #0x48+s1
    BL sub_24F80
    CBZ R0, loc_265D0
loc_26586:
    MOVW R1, #0x8F3C
    ADD R0, SP, #0x48+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_265A6
loc_26596:
    MOVW R1, #0x8F54
    ADD R0, SP, #0x48+s1
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_265D0
loc_265A6:
    MOV R0, R6
    BL sub_250A4
    MOV R5, R0
    CBZ R0, loc_2661C
loc_265B0:
    BL sub_17E14
    ADD R1, SP, #0x48+s1
    MOV R0, R6
    BL sub_24F80
    CBZ R0, loc_265D0
loc_265BE:
    MOVW R1, #0x8F6C
    ADD R0, SP, #0x48+s1
    MOVT.W R1, #3
    BLX strcmp
    MOV R5, R0
    CBZ R0, loc_265E8
loc_265D0:
    MOV R0, R6
    MOVS R5, #0
    BLX fclose
loc_265D8:
    LDR R2, [SP,#0x48+var_1C]
    MOV R0, R5
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_2665A
loc_265E2:
    ADD SP, SP, #0x30
    POP.W {R4-R8,PC}
loc_265E8:
    MOV R0, R6
    BL sub_250A4
    MOV R8, R0
    CBZ R0, loc_2661C
loc_265F2:
    ADD R1, SP, #0x48+s1
    MOV R0, R6
    BL sub_24F80
    CBZ R0, loc_2660C
loc_265FC:
    MOVW R1, #0xFC
    ADD R0, SP, #0x48+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_26624
loc_2660C:
    MOV R0, R6
    MOVS R5, #1
    BLX fclose
    MOV R0, R8
    BL sub_17E14
    B loc_265D8
loc_2661C:
    MOV R0, R6
    BLX fclose
    B loc_265D8
loc_26624:
    MOV R0, R6
    BL sub_250A4
    CMP R0, #0
    BEQ loc_2660C
loc_2662E:
    CBZ R7, loc_26654
loc_26630:
    STR R0, [R7]
loc_26632:
    MOV R0, R6
    BLX fclose
    MOV R0, R8
    MOV R1, #aAes256Cbc
    BLX strcmp
    CLZ.W R5, R0
    MOV R0, R8
    LSRS R5, R5, #5
    BL sub_17E14
    B loc_265D8
loc_26654:
    BL sub_17E14
    B loc_26632
loc_2665A:
    BLX __stack_chk_fail
```
Output:[
    "The function `exit` is designed to return control to the caller.",
    "It uses the `LW` instruction to load the value at the address stored in `off_45B040` into register `$t9`, which is then used as the argument for the `JALR` instruction to jump to the caller's instruction."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
conf_get_int:
loc_131B0:
    PUSH {R4,R5,LR}
    MOVW R5, #0xC188
    MOVW R4, #0xF2B0
    MOVT.W R5, #4
    MOVT.W R4, #2
    SUB SP, SP, #0x14
    LDR R3, [R5]
    LDR.W R2, [R4,R1,LSL#2]
    STR R3, [SP,#0x20+var_14]
    CBNZ R2, loc_131F8
loc_131CE:
    ADD.W R3, R4, R1,LSL#2
    LDR.W R3, [R3,#0x2E0]
    CMP R3, #1
    BNE loc_13234
loc_131DA:
    ADD R3, SP, #0x20+var_10
    LDR R0, [R0]
    STR.W R1, [R3,#-0xC]!
    MOV R1, R3
    BL sub_2BDC8
    CBZ R0, loc_13218
loc_131EA:
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R5]
    LDR R0, [R0,#8]
    CMP R2, R3
    BNE loc_13214
loc_131F4:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_131F8:
    MOVW R1, #0xF9B4
    MOVW R0, #0xF9D0
    ADDW R3, R4, #0x5CC
    MOVT.W R1, #2
    MOVT.W R0, #2
    MOV.W R2, #0x108
    BLX __assert_fail
loc_13214:
    BLX __stack_chk_fail
loc_13218:
    MOVW R1, #0xF9B4
    MOVW R0, #0xF9C8
    ADDW R3, R4, #0x5CC
    MOVT.W R1, #2
    MOVT.W R0, #2
    MOV.W R2, #0x10C
    BLX __assert_fail
loc_13234:
    MOVW R1, #0xF9B4
    MOVW R0, #0xF9F4
    ADDW R3, R4, #0x5CC
    MOVT.W R1, #2
    MOVT.W R0, #2
    MOVW R2, #0x109
    BLX __assert_fail
```
Output:[
    "encrypt_blk",
    "aes_ssh2_encrypt_blk"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ec_alg_oid:
loc_238F4:
    LDR R3, [R0,#0x38]
    LDR R2, [R3,#0xC]
    LDR R0, [R3,#8]
    STR R2, [R1]
    BX LR
```
Output:```json
[
    "The `pclose` function is defined in a separate section called `pclose`. This section contains the implementation of the `close` system call in x86 assembly.",
    "The function `pclose` is responsible for closing a file descriptor. It takes an integer argument representing the file descriptor to be closed."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
dss_private_blob:
loc_1FF78:
    PUSH.W {R3-R11,LR}
    MOV R6, R0
    LDR R0, [R0,#0x10]
    MOV R10, R1
    BL sub_1C53C
    MOVS R1, #1
    ADD.W R5, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R5, R0
    MOV.W R8, R5,ASR#3
    ADD.W R9, R8, #4
    MOV R0, R9
    BL sub_17928
    ASRS R3, R5, #0x1B
    MOV R7, R0
    STRB R3, [R0]
    STRB.W R8, [R0,#3]
    ASRS R3, R5, #0x13
    ADD.W R11, R0, #4
    ASRS R5, R5, #0xB
    STRB R3, [R0,#1]
    STRB R5, [R0,#2]
    CMP.W R8, #0
    BEQ loc_1FFD6
loc_1FFBC:
    ADD.W R4, R8, #0xFFFFFFFF
    MOV R5, R11
loc_1FFC2:
    MOV R1, R4
    LDR R0, [R6,#0x10]
    BL sub_1C5F0
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R5],#1
    BNE loc_1FFC2
loc_1FFD4:
    ADD R11, R8
loc_1FFD6:
    ADD.W R3, R7, R9
    CMP R11, R3
    BNE loc_1FFE8
loc_1FFDE:
    STR.W R9, [R10]
    MOV R0, R7
    POP.W {R3-R11,PC}
loc_1FFE8:
    MOVW R1, #0x501C
    MOVW R0, #0x5028
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDssPrivateBlob
    MOVW R2, #0x16D
    BLX __assert_fail
```
Output:[
    "Succinctly, the function `internal_mod` performs several operations on registers and calculates various values based on input parameters.",
    "It uses `ADDIU`, `SW`, `SUBU`, `LW`, `SLL`, `OR`, `ADDU`, `SUBU`, `SLT`, `BEQZ`, `BNEZ`, `ANDI`, `NEGU`, `SRLV`, `BGEZ`, and `JR` instructions.",
    "It modifies the stack pointer (`$sp`), updates variables (`$a1` to `$a3`, `$a2` to `$a0`, `$a3` to `$a1`, `$a4` to `$a0`, `$a5` to `$a1`, `$a6` to `$a1`, `$a7` to `$a1`, `$a8` to `$a0`, `$a9` to `$a0`, `$b` to `$a1`, `$c` to `$a1`, `$d` to `$a1`, `$e` to `$a1`, `$f` to `$a1`, `$g` to `$a1`, `$h` to `$a1`, `$i` to `$a1`, `$j` to `$a1`, `$k` to `$a1`, `$l` to `$a1`, `$m` to `$a1`, `$n` to `$a1`, `$o` to `$a1`, `$p` to `$a1`, `$q` to `$a1`, `$r` to `$a1`, `$s` to `$a1`, `$t` to `$a1`, `$u` to `$a1`, `$v` to `$a1`, `$w` to `$a1`, `$x` to `$a1`, `$y` to `$a1`, `$z` to `$a1", "The function is called when the program encounters a specific instruction (e.g., `sub_4143C0`)."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
f_open:
loc_11140:

loc_111A8:

loc_3694C:
    CBZ R2, loc_36974
loc_3694E:
    PUSH {R4,LR}
    MOV R4, R1
    LDRB R3, [R1]
    CMP R3, #0x77
    BNE loc_3697E
loc_36958:
    LDR R0, [R0]
    MOV.W R2, #0x180
    MOVW R1, #0x241
    BLX open
    CMP R0, #0
    BLT loc_3697A
loc_3696A:
    MOV R1, R4
    POP.W {R4,LR}
    B.W j_fdopen
loc_36974:
    LDR R0, [R0]
    B.W j_fopen
loc_3697A:
    MOVS R0, #0
    POP {R4,PC}
loc_3697E:
    MOVW R3, #0x4FEC
    MOVW R1, #0x5260
    MOVW R0, #0x5270
    MOVT.W R3, #4
    MOVT.W R1, #4
    MOVS R2, #0xFE
    MOVT.W R0, #4
    BLX __assert_fail
```
Output:```json
[
    "Strchr is a function that searches for a character in a string."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__libc_start_main:
loc_11344:
    ADR R12, 0x1134C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__libc_start_main_ptr - 0x5534C)]!
```
Output:[
    "reads a big number from the SSH1 module",
    "uses safe memory allocation and memset for padding",
    "handles different sizes of numbers",
    "supports multiple operations on the number"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
des_ssh1_make_context:
loc_2284C:
    MOVS R1, #0x88
    MOVS R0, #2
    B.W sub_193B8
```
Output:[
    "enum_settings_next",
    "loc_1004D480",
    "loc_1004D4E0",
    "loc_1004D514",
    "loc_1004D538",
    "loc_1004D5B4",
    "loc_1004D5CC",
    "loc_1004D628",
    "loc_1004D640",
    "loc_1004D668"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__assert_fail:
loc_1155C:
    ADR R12, 0x11564
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__assert_fail_ptr - 0x55564)]!
```
Output:[
    "Subroutine `modsub` performs a subtraction operation on two integer arguments.",
    "It uses the `sub_8058440` function for the subtraction.",
    "The function takes three parameters: `edi` and `esi`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058440` function for the subtraction.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function for the addition.",
    "The function takes three parameters: `edi`, `esi`, and `ebx`, and returns an integer.",
    "It checks if the result is zero before proceeding.",
    "It uses the `sub_8058000` function
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
[
    "loadrsakey_main",
    "loc_41C2FD",
    "push r15",
    "push r14",
    "push r13",
    "push r12",
    "push rbp",
    "push rbx",
    "SUB rsp, 40B8h",
    "MOV r12, rdi",
    "MOV r13, rsi",
    "MOV [rsp+40E8h+var_40DC], edx",
    "MOV [rsp+40E8h+var_40D8], rcx",
    "MOV [rsp+40E8h+var_40D0], r8",
    "MOV rbp, r9",
    "MOV rax, fs:28h",
    "MOV [rsp+40E8h+var_40], rax",
    "XOR eax, eax",
    "MOV qword ptr [r9], 0",
    "MOV rcx, rdi",
    "MOV edx, 4000h",
    "MOV esi, 1",
    "LEA rdi, [rsp+40E8h+ptr]",
    "CALL _fread",
    "MOV rbx, rax",
    "MOV rdi, r12",
    "CALL _fclose",
    "MOV eax, ebx",
    SHR eax, 1Fh",
    "TEST al, al",
    "JNZ loc_41C375",
    "loc_41C36D",
    "CMP ebx, 4000h",
    "JNZ loc_41C388",
    "loc_41C375",
    "MOV qword ptr [rbp+0], offset aErrorReadingFi",
    "MOV r12d, 0",
    JMP loc_41C720",
    "loc_41C388",
    "MOV qword ptr [rbp+0], offset aFileFormatErro",
    "TEST ebx, ebx",
    "LEZ loc_41C6E2",
    "loc_41C398",
    "MOV r12d, 0",
    CMP [rsp+40E8h+ptr], 0,
    "JNZ loc_41C720",
    "loc_41C3AC",
    "LEA eax, [rbx-1]",
    "TEST eax, eax",
    "JLE loc_41C6EA",
    "loc_41C3B7",
    "MOVZX r14d, [rsp+40E8h+var_4047]",
    "TEST r14d, r14d",
    "SETNZ r15b",
    "CMP r14d, 3",
    "JZ loc_41C3D6",
    "loc_41C3CD",
    "TEST r15b, r15b",
    "JNZ loc_41C720",
    "loc_41C3D6",
    "LEA eax, [rbx-2]",
    "MOV r12d, 0",
    CMP eax, 3,
    "JLE loc_41C720",
    "loc_41C3E8",
    "CMP [rsp+40E8h+var_4046], 0",
    "JNZ loc_41C720",
    "loc_41C3F6",
    "CMP [rsp+40E8h+var_4045], 0",
    "JNZ loc_41C720",
    "loc_41C404",
    "CMP [rsp+40E8h+var_4044], 0",
    "JNZ loc_41C720",
    "loc_41C412",
    "CMP [rsp+40E8h+var_4043], 0",
    "JNZ loc_41C720",
    "loc_41C420",
    "LEA esi, [rbx-6]",
    "MOV r8d, 1",
    MOV ecx, 0,
    MOV rdx, r13",
    LEA rdi, [rsp+40E8h+var_4042]",
    CALL sub_420F02",
    TEST eax, eax
    JS loc_41C720
    loc_41C446:
    MOV r12d, eax
    ADD eax, 6
    CDQE 
    MOVZX edi, [rsp+rax+40E8h+ptr]
    SHL edi, 18h
    MOVZX edx, [rsp+rax+40E8h+var_4045]
    OR edi, edx
    MOVZX edx, [rsp+rax+40E8h+var_4047]
    SHL edx, 10h
    OR edi, edx
    MOVZX eax, [rsp+rax+40E8h+var_4046]
    SHL eax, 8
    OR edi, eax
    CALL sub_40A26B
    MOV [rsp+40E8h+var_40C8], eax
    MOV edx, r12d
    ADD edx, 0Ah
    MOV ecx, edx
    MOV [rsp+40E8h+var_40C4], edx
    MOV edx, eax
    TEST eax, eax
    JS loc_41C6F2
    loc_41C49C:
    MOV eax, ebx
    SUB eax, ecx
    MOV r12d, 0
    CMP edx, eax
    JG loc_41C720
    loc_41C4AE:
    LEA edi, [rdx+1]
    MOVSXD rdi, edi
    MOV esi, 1
    CALL sub_40A5C6
    MOV r12, rax
    TEST rax, rax
    JZ loc_41C4EF
    loc_41C4C6:
    MOVSXD rdx, [rsp+40E8h+var_40C8]
    MOVSXD rax, [rsp+40E8h+var_40C4]
    LEA rsi, [rsp+rax+40E8h+ptr]
    MOV [rsp+40E8h+var_40C0], rdx
    MOV rdi, r12
    CALL _memcpy
    MOV rax, [rsp+40E8h+var_40C0]
    MOV byte ptr [r12+rax], 0
loc_41C4EF:
    CMP [rsp+40E8h+var_40D8], 0
    JZ loc_41C507
    loc_41C4F7:
    MOV rdi, r12
    CALL sub_40A6BA
    MOV rdx, [rsp+40E8h+var_40D8]
    MOV [rdx], rax
loc_41C507:
    TEST r13, r13
    JZ loc_41C522
    loc_41C50C:
    MOV [r13+38h], r12
    MOV r12d, 1
    CMP [rsp+40DC], 0
    JZ loc_41C546
loc_41C51D:
    JMP loc_41C720
loc_41C522:
    MOV rdi, r12
    CALL sub_40AE30
    CMP [rsp+40DC], 0
    JNZ loc_41C6FA
loc_41C535:
    MOVZX r12d, r15b
    MOV qword ptr [rbp+0], 0
    JMP loc_41C720
loc_41C546:
    MOV r15d, [rsp+40E8h+var_40C8]
    ADD r15d, [rsp+40E8h+var_40C4]
    TEST r14d, r14d
    JZ loc_41C5D2
loc_41C555:
    LEA rdi, [rsp+40E8h+var_40B8]
    CALL sub_41AC99
    MOV eax, 0
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV rdi, [rsp+40E8h+var_40D0]
    REPNE 
    MOV rax, rcx
    NOT rax
    LEA rdx, [rax-1]
    MOV rsi, [rsp+
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
put_string:
loc_13F40:
    PUSH {R4,LR}
    MOV R4, R2
    ASRS R3, R2, #0x18
    STRB R3, [R0]
    ASRS R3, R2, #0x10
    STRB R3, [R0,#1]
    ASRS R3, R2, #8
    STRB R3, [R0,#2]
    STRB R2, [R0,#3]
    ADDS R0, #4
    BLX memcpy
    ADDS R0, R4, #4
    POP {R4,PC}
```
Output:```json
[
    "Extracts data from an external location."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__imp_strtoul:
loc_4C8A8:
    IMPORT 
```
Output:[
    "Initialize stack",
    "Push arguments",
    "Calculate modpow",
    "Call sub_410860",
    "Store results",
    "Pop registers"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
des3_encrypt_pubkey:
loc_1F750:
    PUSH.W {R4-R8,LR}
    MOV R4, R0
    LDRB R5, [R0,#5]
    MOV R7, R1
    LDRB.W LR, [R0,#4]
    MOV R8, R2
    LDRB R3, [R0,#1]
    MOVW R6, #0xC188
    LDRB R0, [R0]
    LSLS R5, R5, #0x10
    LDRB R2, [R4,#7]
    ORR.W R5, R5, LR,LSL#24
    LDRB R1, [R4,#6]
    MOVT.W R6, #4
    LSLS R3, R3, #0x10
    ORRS R5, R2
    ORR.W R3, R3, R0,LSL#24
    LDRB R2, [R4,#3]
    LDRB R0, [R4,#2]
    ORR.W R1, R5, R1,LSL#8
    LDR R5, [R6]
    SUB SP, SP, #0x1A0
    ORRS R3, R2
    ADD R2, SP, #0x1B8+var_1B4
    ORR.W R0, R3, R0,LSL#8
    STR R5, [SP,#0x1B8+var_1C]
    BL sub_1DA58
    LDRB R5, [R4,#0xD]
    ADD R2, SP, #0x1B8+var_12C
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R5, R5, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R5, R5, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R5, R5, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R5, R1,LSL#8
    ORR.W R3, R3, LR
    ORR.W R0, R3, R0,LSL#8
    BL sub_1DA58
    LDRB R5, [R4,#5]
    LDRB R1, [R4,#4]
    ADD R2, SP, #0x1B8+var_A4
    LDRB R3, [R4,#1]
    LDRB R0, [R4]
    LSLS R5, R5, #0x10
    LDRB.W LR, [R4,#7]
    ORR.W R5, R5, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#6]
    ORR.W R3, R3, R0,LSL#24
    ORR.W R5, R5, LR
    LDRB R0, [R4,#2]
    LDRB.W LR, [R4,#3]
    ORR.W R1, R5, R1,LSL#8
    ORR.W R3, R3, LR
    ORR.W R0, R3, R0,LSL#8
    BL sub_1DA58
    ADD R2, SP, #0x1B8+var_1B4
    MOV R1, R8
    MOV R0, R7
    BL sub_1F258
    ADD R0, SP, #0x1B8+var_1B4
    MOV.W R1, #0x198
    BL sub_17E64
    LDR R2, [SP,#0x1B8+var_1C]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_1F826
loc_1F820:
    ADD SP, SP, #0x1A0
    POP.W {R4-R8,PC}
loc_1F826:
    BLX __stack_chk_fail
```
Output:[
    "blowfish_ssh1_decrypt_blk",
    "push r15",
    "push r14",
    "push r13",
    "push r12",
    "push rbp",
    "push rbx",
    "mov rbx, rsi",
    "sub rsp, 28h",
    "mov rsi, fs:28h",
    "MOV [rsp+58h+var_40], rsi",
    "XOR esi, esi",
    "TEST dl, 7",
    "MOV [rsp+58h+var_50], rdi",
    "JNZ loc_40E849",
    "loc_40E76F",
    "MOV rax, [rsp+58h+var_50]",
    "TEST edx, edx",
    "MOV r14d, [rax+2098h]",
    "MOV r12d, [rax+209Ch]",
    "JLE loc_40E83C",
    "loc_40E78A",
    "SUB edx, 1",
    "LEA rbp, [rdi+1050h]",
    SHR edx, 3,
    LEA rax, [rbx+rdx*8+8]",
    "MOV [rsp+58h+var_58], rax",
    "MOV r13d, [rbx]",
    "MOV r15d, [rbx+4]",
    "LEA rdx, [rsp+58h+var_48]",
    "MOV rcx, rbp",
    "ADD rbx, 8",
    "MOV esi, r15d",
    MOV edi, r13d",
    "CALL sub_40E430",
    "MOV edx, [rsp+58h+var_48]",
    "MOV eax, [rsp+58h+var_44]",
    "XOR edx, r14d",
    "XOR eax, r12d",
    "MOV r14d, r13d",
    "MOV ecx, edx",
    "MOV [rbx-8], dl",
    "MOV [rbx-4], al",
    SHR ecx, 8,
    MOV r12d, r15d",
    MOV [rbx-7], cl",
    "MOV ecx, edx",
    SHR edx, 18h",
    MOV [rbx-5], dl,
    MOV edx, eax,
    SHR ecx, 10h",
    SHR edx, 8,
    MOV [rbx-6], cl,
    MOV [rbx-3], dl,
    MOV edx, eax,
    SHR eax, 18h,
    SHR edx, 10h,
    MOV [rbx-1], al",
    MOV [rbx-2], dl,
    CMP [rsp+58h+var_58], rbx,
    JNZ loc_40E7A0",
    loc_40E80A,
    MOV rax, [rsp+58h+var_50],
    MOV [rax+2098h], r13d,
    MOV [rax+209Ch], r15d,
    MOV rax, [rsp+58h+var_40],
    XOR rax, fs:28h,
    JNZ loc_40E844
    CALL ___stack_chk_fail
    loc_40E849:
    MOV ecx, offset aBlowfishLsbDec
    MOV edx, 161h
    MOV esi, offset aSshblowfC
    MOV edi, offset aLen70
    CALL ___assert_fail
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
```json
[
    "strbuf_catf",
    "strbuf_catf: loc_1000F3E4",
    "strbuf_catf: STWU r1, back_chain(r1)",
    "strbuf_catf: MFLR r0, lr",
    "strbuf_catf: STW r0, 0x90+sender_lr(r1)",
    "strbuf_catf: STW r31, 0x90+var_4(r1)",
    "strbuf_catf: MR r31, r1",
    "strbuf_catf: STW r3, 0x6C(r31)",
    "strbuf_catf: STW r4, 0x68(r31)",
    "strbuf_catf: STW r5, 0x10(r31)",
    "strbuf_catf: STW r6, 0x14(r31)",
    "strbuf_catf: STW r7, 0x18(r31)",
    "strbuf_catf: STW r8, 0x1C(r31)",
    "strbuf_catf: STW r9, 0x20(r31)",
    "strbuf_catf: STW r10, 0x24(r31)",
    "strbuf_catf: BNE cr1, loc_1000F43C",
    "strbuf_catf: loc_1000F41C",
    "strbuf_catf: STFD f1, 0x28(r31)",
    "strbuf_catf: STFD f2, 0x30(r31)",
    "strbuf_catf: STFD f3, 0x38(r31)",
    "strbuf_catf: STFD f4, 0x40(r31)",
    "strbuf_catf: STFD f5, 0x48(r31)",
    "strbuf_catf: STFD f6, 0x50(r31)",
    "strbuf_catf: STFD f7, 0x58(r31)",
    "strbuf_catf: STFD f8, 0x60(r31)",
    "strbuf_catf: loc_1000F43C",
    "strbuf_catf: LWZ r9, -0x7008(r2)",
    "strbuf_catf: STW r9, 0x7C(r31)",
    "strbuf_catf: LI r9, 0",
    "strbuf_catf: LI r9, 0",
    "strbuf_catf: STB r9, 0x70(r31)",
    "strbuf_catf: LI r9, 0",
    "strbuf_catf: STB r9, 0x71(r31)",
    "ADDI r9, r31, 0x98",
    "strbuf_catf: STW r9, 0x74(r31)",
    "strbuf_catf: ADDI r9, r31, 8",
    "strbuf_catf: STW r9, 0x78(r31)",
    "strbuf_catf: ADDI r9, r31, 0x70",
    "MR r5, r9",
    "lwz r4, 0x68(r31)",
    "lwz r3, 0x6C(r31)",
    "BL sub_1000F328",
    "nop",
    "lwz r10, 0x7C(r31)",
    "lwz r9, -0x7008(r2)",
    "CMPLW cr7, r10, r9",
    "LI r10, 0",
    "LI r9, 0",
    "BEQ cr7, loc_1000F49C"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
MD5Init:
loc_28FF0:
    MOVW R2, #0x2301
    MOVW R3, #0xAB89
    MOVT.W R2, #0x6745
    MOVT.W R3, #0xEFCD
    STM.W R0, {R2,R3}
    MOVW R2, #0xDCFE
    MOVW R3, #0x5476
    MOVT.W R2, #0x98BA
    MOVT.W R3, #0x1032
    STR R2, [R0,#8]
    STR R3, [R0,#0xC]
    MOVS R3, #0
    STR R3, [R0,#0x50]
    STR R3, [R0,#0x58]
    STR R3, [R0,#0x54]
    BX LR
```
Output:```json
[
    "LIS"  // Load index into register r11
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
_start:
loc_12C08:
    MOV.W R11, #0
    MOV.W LR, #0
    POP {R1}
    MOV R2, SP
    PUSH {R2}
    PUSH {R0}
    LDR.W R12, =(nullsub_5+1)
    PUSH.W {R12}
    LDR R0, =(sub_116D4+1)
    LDR R3, =(sub_38A04+1)
    BLX __libc_start_main
    BLX abort
```
Output:[
    "duplicates the value in `r1` to `back_chain`",
    "stores the current value of `lr` in `r0`",
    "stores the value in `r9` at the address `0x20 + sender_lr(r1)`",
    "stores the value in `r9` at the address `0x20 + var_4(r1)`",
    "initializes `r9` to 0",
    "adds 0x20 to `pre_back_chain` and stores the result in `r5`",
    "stores the value in `r9` at the address `-8(r5)`",
    "stores the value in `r7` at the address `r4`",
    "stores the value in `r6` at the address `r3`",
    "initializes `r4` to 0",
    "initializes `r3` to 0",
    "calls `sub_1000B070` with `r1` as the argument",
    "loads the value from `r10` into `r1`",
    "loads the value from `r9` into `r9`",
    "inverts `r10` and `r9`",
    "loads the value from `r9` into `r9`",
    "beq+ `cr0` to `loc_1000B214`",
    "bl __stack_chk_fail",
    "bl lr"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
random_get_savedata:
loc_2CBB0:

loc_2D250:
    PUSH.W {R4-R8,LR}
    MOV R7, R0
    MOV R8, R1
    MOV.W R0, #0x258
    MOVS R1, #1
    MOVW R4, #0x62CC
    BL sub_193B8
    MOVT.W R4, #5
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    MOV R5, R0
    CBZ R3, loc_2D29A
loc_2D272:
    LDR.W R1, [R4,#(dword_5677C - 0x562CC)]
    MOV.W R6, #0x258
    MOV R2, R6
    MOV R0, R5
    ADD R1, R4
    BLX memcpy
    STR.W R6, [R8]
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    STR R5, [R7]
    CBZ R3, loc_2D294
loc_2D290:
    POP.W {R4-R8,PC}
loc_2D294:
    POP.W {R4-R8,LR}
    B sub_2CBB0
loc_2D29A:
    BL sub_2CBB0
    B loc_2D272
```
Output:[
    "Retrieving environment variable from PLT"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
help:
loc_11328:

loc_12FD4:
    PUSH {R3,LR}
    MOVW R2, #0x56DC
    MOVW R1, #0x8BCC
    MOVT.W R2, #4
    MOVT.W R1, #3
    MOVS R0, #1
    BLX __printf_chk
    MOV R3, #0x5619C
    MOVW R0, #0x8B28
    MOVS R2, #0xA0
    MOVT.W R0, #3
    LDR R3, [R3]
    MOVS R1, #1
    BLX fwrite
    MOVW R0, #0x8C0C
    POP.W {R3,LR}
    MOVT.W R0, #3
    B.W j_puts
```
Output:[
    "duplicates the string",
    "stores the last character of the string in r31",
    "stores the sender's LR in r31",
    "calculates the length of the string and stores it in r4",
    "adds 1 to r3 and stores the result in r4",
    "subtracts 1 from r3 and stores the result in r4",
    "copies the sender's LR into r4",
    "loads the sender's LR from r4",
    "stores the sender's LR in r31",
    "blr lr",
    "loads the sender's LR from r4",
    "stores the sender's LR in r31",
    "blr lr"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
ssh2_pubkey_openssh_str_internal:
loc_2A480:
    CMP R2, #3
    PUSH.W {R4-R9,LR}
    MOV R8, R0
    SUB SP, SP, #0xC
    MOV R7, R1
    MOV R6, R2
    BLE loc_2A4B2
loc_2A490:
    LDRB R3, [R1,#1]
    LDRB R1, [R1]
    LDRB R5, [R7,#3]
    LSLS R3, R3, #0x10
    LDRB R2, [R7,#2]
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R5
    ORR.W R5, R3, R2,LSL#8
    CMP R5, #0
    BLE loc_2A4B2
loc_2A4A8:
    SUBS R3, R6, #4
    CMP R5, R3
    BGE loc_2A54E
loc_2A4AE:
    ADDS R4, R7, #4
    BNE loc_2A4BC
loc_2A4B2:
    MOV R4, #0x432D0
    MOVS R5, #0x11
loc_2A4BC:
    ADDS R3, R6, #2
    MOV R0, #0x55555556
    SMULL.W R0, R1, R3, R0
    MOV R0, R8
    SUB.W R3, R1, R3,ASR#31
    ADD.W R9, R5, R3,LSL#2
    CMP.W R8, #0
    BEQ loc_2A4DE
loc_2A4DA:
    BLX strlen
loc_2A4DE:
    ADD.W R9, R9, #3
    MOVS R1, #1
    ADD R0, R9
    BL sub_193B8
    STR R5, [SP,#0x28+var_28]
    STR R4, [SP,#0x28+var_24]
    MOVW R3, #0x32E4
    MOV.W R2, #0xFFFFFFFF
    MOVT.W R3, #4
    MOVS R1, #1
    MOV R9, R0
    BLX __sprintf_chk
    CMP R6, #0
    ADD.W R5, R9, R0
    BLE loc_2A528
loc_2A50A:
    MOVS R4, #0
loc_2A50C:
    SUBS R1, R6, R4
    MOV R2, R5
    CMP R1, #3
    ADD.W R0, R7, R4
    ADD.W R5, R5, #4
    IT 
    MOVGE R1, #3
    ADD R4, R1
    BL sub_18FA4
    CMP R6, R4
    BGT loc_2A50C
loc_2A528:
    LDRB.W R3, [R8]
    CBNZ R3, loc_2A538
loc_2A52E:
    MOV R0, R9
    STRB R3, [R5]
    ADD SP, SP, #0xC
    POP.W {R4-R9,PC}
loc_2A538:
    MOV R0, R5
    MOVS R3, #0x20
    MOV R1, R8
    STRB.W R3, [R0],#1
    BLX strcpy
    MOV R0, R9
    ADD SP, SP, #0xC
    POP.W {R4-R9,PC}
loc_2A54E:
    MOVW R4, #0x32D0
    MOVS R5, #0x11
    MOVT.W R4, #4
    B loc_2A4BC
```
Output:[
    "String Length Calculation"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
ec_p256:
loc_24FDC:
    PUSH {R3-R5,LR}
    MOV R4, #0x561A8
    LDRB.W R5, [R4,#(byte_56250 - 0x561A8)]
    CMP R5, #0
    BNE loc_25064
loc_24FEE:
    MOVS R1, #0x20
    LDR R0, =unk_3F8B0
    MOV.W R3, #0x100
    STR.W R5, [R4,#(dword_56254 - 0x561A8)]
    STR.W R3, [R4,#(dword_56260 - 0x561A8)]
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56264 - 0x561A8)]
    LDR R0, =unk_3F8D0
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56268 - 0x561A8)]
    LDR R0, =unk_3F8F0
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_5626C - 0x561A8)]
    LDR R0, =unk_3F910
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56270 - 0x561A8)]
    LDR R0, =unk_3F930
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56278 - 0x561A8)]
    LDR R0, =unk_3F950
    BL sub_1EDA8
    ADD.W R2, R4, #0xAC
    MOVW R3, #0xFD08
    STR.W R2, [R4,#(dword_56274 - 0x561A8)]
    MOVT.W R3, #3
    MOVS R2, #1
    STRB.W R5, [R4,#(byte_56284 - 0x561A8)]
    STR.W R3, [R4,#(dword_56258 - 0x561A8)]
    STR.W R3, [R4,#(dword_5625C - 0x561A8)]
    STRB.W R2, [R4,#(byte_56250 - 0x561A8)]
    STR.W R0, [R4,#(dword_5627C - 0x561A8)]
loc_25064:
    LDR R0, =dword_56254
    POP {R3-R5,PC}
```
Output:[
    "clear chain",
    "back chain",
    "sender lr",
    "var_4",
    "free",
    "lr",
    "r31"
]<|im_end|>
loadrsakey:
loc_24894:
    PUSH {R4-R7,LR}
    SUB SP, SP, #0x54
    MOV R6, R1
    MOV R7, R2
    MOV R4, R3
    MOV R3, #0x4B188
    LDR R3, [R3]
    STR R3, [SP,#0x68+var_1C]
    MOVS R2, #0
    STR R2, [SP,#0x68+var_60]
    MOV R1, #0x38180
    BL sub_2BF48
    CBNZ R0, loc_248C8
loc_248BC:
    MOV R3, #0x38184
    STR R3, [SP,#0x68+var_60]
    B loc_2490C
loc_248C8:
    MOV R5, R0
    MOV R2, R0
    MOVS R1, #0x40
    ADD R0, SP, #0x68+s
    BLX fgets
    CBZ R0, loc_248FA
loc_248D6:
    MOV R1, #aSshPrivateKeyF
    ADD R0, SP, #0x68+s
    BLX strcmp
    CBNZ R0, loc_248FA
loc_248E6:
    ADD R3, SP, #0x68+var_60
    STR R3, [SP,#0x68+var_64]
    STR R7, [SP,#0x68+var_68]
    MOVS R3, #0
    MOV R2, R3
    MOV R1, R6
    MOV R0, R5
    BL sub_24360
    B loc_2490C
loc_248FA:
    MOV R3, #0x381B8
    STR R3, [SP,#0x68+var_60]
    MOV R0, R5
    BLX fclose
    MOVS R0, #0
loc_2490C:
    CMP R0, #1
    IT 
    CMPNE R4, #0
    ITT 
    LDRNE R3, [SP,#0x68+var_60]
    STRNE R3, [R4]
    MOV R3, #0x4B188
    LDR R2, [SP,#0x68+var_1C]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_2492C
loc_24928:
    BLX __stack_chk_fail
loc_2492C:
    ADD SP, SP, #0x54
    POP {R4-R7,PC}
```
Output:```json
[
    "hmacsha1_verresult",
    "lea edi, [esp+0FCh+var_A8]",
    "lea esi, [ebp+0C0h]",
    "MOV eax, large gs:14h",
    "MOV [esp+104h+var_F0], eax",
    "lea esi, [ebp+0C0h]",
    "MOV eax, large gs:14h",
    "MOV [esp+104h+var_20], eax",
    "xor eax, eax",
    "lea ebx, [esp+104h+var_34]",
    "REP",
    "push ebx",
    "lea esi, [ebp+60h]",
    "LEA eax, [esp+108h+var_A8]",
    "push eax",
    "CALL sub_8079320",
    "lea edi, [esp+10Ch+var_A8]",
    "MOV ecx, 18h",
    "REP",
    "MOV eax, [esp+10Ch+var_4C]",
    "ADD eax, 14h",
    "MOV [esp+10Ch+var_4C], eax",
    "ADD esp, 10h",
    "CMP eax, 13h",
    "SETBE al",
    "MOVZX eax, al",
    "ADD [esp+0FCh+var_50], eax",
    "MOV eax, [esp+0FCh+var_54]",
    "TEST eax, eax",
    "JZ loc_8079B97",
    "loc_8079B8E",
    "CMP eax, 2Bh",
    "LEJ loc_8079DA0",
    "loc_8079B97",
    "CMP eax, 2Bh",
    "LEJ loc_8079DE4",
    "loc_8079BA0",
    "lea ebp, [esp+0FCh+var_94]",
    "MOV esi, 14h",
    "MOV edi, 40h",
    "MOV edx, eax",
    "MOV [esp+0FCh+var_F8], ebp",
    "LEA esi, [esi+0]",
    "loc_8079BB8",
    "MOV eax, [esp+0FCh+var_F8]",
    "MOV ebp, edi",
    "SUB ebp, edx",
    "ADD eax, edx",
    "CMP ebp, 4",
    "JNB loc_8079D40",
    "loc_8079BCB",
    "TEST ebp, ebp",
    "JZ loc_8079BE0",
    "loc_8079BCF",
    "MOVZX edx, byte ptr [ebx]",
    "TEST ebp, 2",
    "MOV [eax], dl",
    "JNZ loc_8079D88",
    "loc_8079BE0",
    "MOV eax, edi",
    "SUB eax, [esp+0FCh+var_54]",
    SUB esp, 8,
    ADD ebx, eax,
    SUB esi, eax,
    MOV eax, [esp+104h+var_94]",
    BSWAP eax,
    MOV [esp+104h+var_E8], eax,
    MOV eax, [esp+104h+var_90],
    BSWAP eax,
    MOV [esp+104h+var_E4], eax,
    MOV eax, [esp+104h+var_8C],
    BSWAP eax,
    MOV [esp+104h+var_E0], eax,
    MOV eax, [esp+104h+var_88],
    BSWAP eax,
    MOV [esp+104h+var_DC], eax,
    MOV eax, [esp+104h+var_84],
    BSWAP eax,
    MOV [esp+104h+var_D8], eax,
    MOV eax, [esp+104h+var_80],
    BSWAP eax,
    MOV [esp+104h+var_D4], eax,
    MOV eax, [esp+104h+var_7C],
    BSWAP eax,
    MOV [esp+104h+var_D0], eax,
    MOV eax, [esp+104h+var_78],
    BSWAP eax,
    MOV [esp+104h+var_CC], eax,
    MOV eax, [esp+104h+var_74],
    BSWAP eax,
    MOV [esp+104h+var_C8], eax,
    MOV eax, [esp+104h+var_C4], eax,
    MOV eax, [esp+104h+var_B8],
    MOV eax, [esp+104h+var_B6],
    MOV eax, [esp+104h+var_B4],
    MOV eax, [esp+104h+var_B0],
    MOV eax, [esp+104h+var_B8],
    MOV eax, [esp+104h+var_B4],
    MOV eax, [esp+104h+var_5C],
    BSWAP eax,
    MOV [esp+104h+var_B0], eax,
    MOV eax, [esp+104h+var_58],
    BSWAP eax,
    MOV [esp+104h+var_AC], eax,
    LEA eax, [esp+104h+var_E8],
    PUSH eax,
    LEA eax, [esp+108h+var_A8],
    PUSH eax,
    CALL sub_8078530,
    MOV [esp+10Ch+var_54], 0,
    XOR edx, edx,
    ADD esp, 10h
    CMP esi, 3Fh,
    JG loc_8079BB8
    loc_8079CDC:
    MOV ebp, [esp+0FCh+var_F8]
    MOV eax, esi
    loc_8079CE2:
    PUSH 4Ch
    PUSH eax
    PUSH ebx
    PUSH ebp
    CALL ___memcpy_chk
    MOV [esp+10Ch+var_54], esi
    ADD esp, 10h
loc_8079CF6:
    SUB esp, 8
    LEA ebx, [esp+104h+var_48]
    PUSH ebx
    LEA eax, [esp+108h+var_A8]
    PUSH eax
    CALL sub_8079320
    ADD esp, 0Ch
    PUSH 14h
    PUSH [esp+104h+var_F0]
    PUSH ebx
    CALL sub_8055000
    ADD esp, 10h
    MOV edi, [esp+0FCh+var_20]
    XOR edi, large gs:14h
    JNZ loc_8079DF7
loc_8079D31:
    ADD esp, 0ECh
    POP ebx
    POP esi
    POP edi
    POP ebp
    RETN 
loc_8079D40:
    MOV edx, [ebx]
    MOV ecx, ebx
    MOV [eax], edx
    MOV edx, [ebx+ebp-4]
    MOV [eax+ebp-4], edx
    LEA edx, [eax+4]
    AND edx, 0FFFFFFFCh
    SUB eax, edx
    SUB ecx, eax
    ADD eax, ebp
    AND eax, 0FFFFFFFCh
    CMP eax, 4
    JB loc_8079BE0
loc_8079D66:
    AND eax, 0FFFFFFFCh
    XOR ebp, ebp
    MOV [esp+0FCh+var_F4], ebx
loc_8079D6F:
    MOV ebx, [ecx+ebp]
    MOV [edx+ebp], ebx
    ADD ebp, 4
    CMP ebp, eax
    JB loc_8079D6F
loc_8079D7C:
    MOV ebx, [esp+0FCh+var_F4]
    JMP loc_8079BE0
loc_8079D88:
    MOVZX edx, word ptr [ebx+ebp-2]
    MOV [eax+ebp-2], dx
    JMP loc_8079BE0
loc_8079DA0:
    MOV edx, [esp+0FCh+var_34]
    MOV [esp+eax+0FCh+var_94], edx
    MOV edx, [esp+0FCh+var_30]
    MOV [esp+eax+0FCh+var_90], edx
    MOV edx, [esp+0FCh+var_2C]
    MOV [esp
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__imp_open:
loc_4B8B0:
    IMPORT 
```
Output:[
    "decrypt_blk" is a function that takes three arguments: an integer `esp` and two integers `arg_0` and `arg_8`. The function uses these arguments to perform a decryption operation on the memory at the specified address `eax + 88h`. The `LEA ecx, [eax+88h]` instruction moves the value at `eax + 88h` into the `ecx` register, which is then used as the key for decryption. The `MOV eax, [esp+arg_4]` instruction moves the value at `esp + arg_4` into the `eax` register. The `JMP sub_8060070` instruction jumps to the address `sub_8060070`, which contains the decryption logic.<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__assert_fail:
loc_11510:
    ADR R12, 0x11518
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(__assert_fail_ptr - 0x4A518)]!
```
Output:```json
[
    "Subroutine for HMAC computation",
    "Pushing RBP and RSP onto stack",
    "Calculating input parameters",
    "Moving values to registers",
    "Calling sub_42CAE7 for HMAC computation",
    "No return instruction",
    "LEAVE and RETN"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
dss_private_blob:
loc_1F20C:
    PUSH.W {R3-R11,LR}
    MOV R6, R0
    MOV R10, R1
    LDR R0, [R0,#0x10]
    BL sub_1BED4
    ADD.W R4, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R4, R0
    MOV.W R8, R4,ASR#3
    ADD.W R9, R8, #4
    MOVS R1, #1
    MOV R0, R9
    BL sub_175D4
    MOV R7, R0
    ASRS R3, R4, #0x1B
    STRB R3, [R0]
    ASRS R3, R4, #0x13
    STRB R3, [R0,#1]
    ASRS R4, R4, #0xB
    STRB R4, [R0,#2]
    STRB.W R8, [R0,#3]
    ADD.W R11, R0, #4
    CMP.W R8, #0
    BEQ loc_1F26C
loc_1F250:
    ADD.W R4, R8, #0xFFFFFFFF
    MOV R5, R11
loc_1F256:
    MOV R1, R4
    LDR R0, [R6,#0x10]
    BL sub_1BF6C
    STRB.W R0, [R5],#1
    SUBS R4, #1
    CMP.W R4, #0xFFFFFFFF
    BNE loc_1F256
loc_1F26A:
    ADD R11, R8
loc_1F26C:
    ADD.W R3, R7, R9
    CMP R11, R3
    BEQ loc_1F294
loc_1F274:
    MOV R3, #aDssPrivateBlob
    MOVW R2, #0x16D
    MOV R1, #aSshdssC
    MOV R0, #aPBlobBloblen
    BLX __assert_fail
loc_1F294:
    STR.W R9, [R10]
    MOV R0, R7
    POP.W {R3-R11,PC}
```
Output:[
    "decrypt_blk",
    "sub_4173F2",
    "nop"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__sprintf_chk:
loc_113E4:
    ADR R12, 0x113EC
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(__sprintf_chk_ptr - 0x4A3EC)]!
```
Output:ec_public:
loc_22A40:
    PUSH.W {R4-R8,LR}
    SUB SP, SP, #0x120
    MOV R6, R0
    MOV R8, R1
    MOV R3, #0x4B188
    LDR R3, [R3]
    STR R3, [SP,#0x138+var_1C]
    LDR R3, [R1]
    CBNZ R3, loc_22A66
loc_22A5A:
    MOV R1, R0
    ADD.W R0, R8, #0x20
    BL sub_21ED4
    B loc_22AE2
loc_22A66:
    CMP R3, #2
    IT 
    MOVNE R0, #0
    BNE loc_22AE2
loc_22A6E:
    ADD R0, SP, #0x138+var_130
    BL sub_28D48
    LDR.W R5, [R8,#0xC]
    LSRS R5, R5, #3
    BEQ loc_22A9E
loc_22A7C:
    MOVS R4, #0
    MOVS R7, #1
loc_22A80:
    MOV R1, R4
    MOV R0, R6
    BL sub_1BF6C
    STRB.W R0, [SP,#0x138+var_131]
    MOV R2, R7
    ADD.W R1, SP, #0x138+var_131
    ADD R0, SP, #0x138+var_130
    BL sub_28DE8
    ADDS R4, #1
    CMP R5, R4
    BNE loc_22A80
loc_22A9E:
    ADD R1, SP, #0x138+var_5C
    ADD R0, SP, #0x138+var_130
    BL sub_29B20
    LDRB.W R3, [SP,#0x138+var_5C]
    BIC.W R3, R3, #7
    STRB.W R3, [SP,#0x138+var_5C]
    LDRB.W R3, [SP,#0x138+var_3D]
    AND.W R3, R3, #0x7F
    ORR.W R3, R3, #0x40
    STRB.W R3, [SP,#0x138+var_3D]
    MOVS R1, #0x20
    ADD R0, SP, #0x138+var_5C
    BL sub_1BDF0
    MOV R5, R0
    MOV R1, R0
    ADD.W R0, R8, #0x1C
    BL sub_21ED4
    MOV R4, R0
    MOV R0, R5
    BL sub_1BAD4
    MOV R0, R4
    B loc_22AE2
loc_22AE2:
    MOV R3, #0x4B188
    LDR R2, [SP,#0x138+var_1C]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_22AF6
loc_22AF2:
    BLX __stack_chk_fail
loc_22AF6:
    ADD SP, SP, #0x120
    POP.W {R4-R8,PC}
```
Output:[
    "Extracts the OpenSSH key from an ECDSA signature",
    "Uses the `sub_8058170` and `sub_8058200` functions to extract the private key",
    "Uses the `strlen` function to determine the length of the key",
    "Uses the `memcpy` function to copy the private key into a buffer",
    "Stores the private key in a buffer",
    "Returns the extracted private key"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
rsa_generate:
loc_28334:
    PUSH.W {R4-R9,LR}
    SUB SP, SP, #0x24
    MOV R4, R0
    MOV R8, R1
    MOV R5, R2
    MOV R6, R3
    MOV R3, #0x4B188
    LDR R3, [R3]
    STR R3, [SP,#0x40+var_24]
    MOV.W R3, #0x10000
    MOVS R2, #1
    MOVS R1, #4
    MOV R0, R6
    BLX R5
    ADD.W R7, R8, R8,LSR#31
    ASRS R7, R7, #1
    MOV R1, R7
    MOV R0, #0xFFE2A83C
    BL sub_2D5B0
    MOV R3, R0
    MOVS R2, #1
    MOVS R1, #3
    MOV R0, R6
    BLX R5
    MOV.W R3, #0x10000
    MOVS R2, #2
    MOVS R1, #4
    MOV R0, R6
    BLX R5
    SUB.W R9, R8, R7
    MOV R1, R9
    MOV R0, #0xFFE2A83C
    BL sub_2D5B0
    MOV R3, R0
    MOVS R2, #2
    MOVS R1, #3
    MOV R0, R6
    BLX R5
    MOV.W R3, #0x4000
    MOVS R2, #3
    MOVS R1, #4
    MOV R0, R6
    BLX R5
    MOVS R3, #5
    MOVS R2, #3
    MOVS R1, #2
    MOV R0, R6
    BLX R5
    MOVS R3, #0
    MOV R2, R3
    MOVS R1, #5
    MOV R0, R6
    BLX R5
    MOVS R0, #0x25
    BL sub_1C6D8
    STR R0, [R4,#0xC]
    ADD R1, SP, #0x40+var_28
    ADD R0, SP, #0x40+var_2C
    BL sub_24330
    LDR R3, [SP,#0x40+var_2C]
    STR R3, [SP,#0x40+var_34]
    STR R6, [SP,#0x40+var_38]
    STR R5, [SP,#0x40+var_3C]
    MOV.W R8, #1
    STR.W R8, [SP,#0x40+var_40]
    MOVS R3, #0
    MOV R2, R8
    MOVS R1, #0x25
    MOV R0, R7
    BL sub_23E24
    STR R0, [R4,#0x14]
    LDR R3, [SP,#0x40+var_28]
    STR R3, [SP,#0x40+var_34]
    STR R6, [SP,#0x40+var_38]
    STR R5, [SP,#0x40+var_3C]
    MOVS R3, #2
    STR R3, [SP,#0x40+var_40]
    MOVS R3, #0
    MOV R2, R8
    MOVS R1, #0x25
    MOV R0, R9
    BL sub_23E24
    MOV R1, R0
    STR R0, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1C0C0
    CMP R0, #0
    ITTTT 
    LDRLT R3, [R4,#0x14]
    LDRLT R2, [R4,#0x18]
    STRLT R2, [R4,#0x14]
    STRLT R3, [R4,#0x18]
    MOVS R3, #1
    MOVS R2, #3
    MOVS R1, #6
    MOV R0, R6
    BLX R5
    LDR R1, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1C540
    STR R0, [R4,#8]
    MOVS R3, #2
    MOVS R2, #3
    MOVS R1, #6
    MOV R0, R6
    BLX R5
    LDR R0, [R4,#0x14]
    BL sub_1BAAC
    MOV R8, R0
    BL sub_1BD08
    LDR R0, [R4,#0x18]
    BL sub_1BAAC
    MOV R7, R0
    BL sub_1BD08
    MOV R1, R7
    MOV R0, R8
    BL sub_1C540
    MOV R9, R0
    MOVS R3, #3
    MOV R2, R3
    MOVS R1, #6
    MOV R0, R6
    BLX R5
    MOV R0, R8
    BL sub_1BAD4
    MOV R0, R7
    BL sub_1BAD4
    MOV R1, R9
    LDR R0, [R4,#0xC]
    BL sub_1CCB4
    STR R0, [R4,#0x10]
    CBNZ R0, loc_2849C
loc_2847E:
    MOV R3, #aRsaGenerate
    MOVS R2, #0x61
    MOV R1, #aSshrsagC
    MOV R0, #aKeyPrivateExpo
    BLX __assert_fail
loc_2849C:
    MOVS R3, #4
    MOVS R2, #3
    MOVS R1, #6
    MOV R0, R6
    BLX R5
    LDR R1, [R4,#0x14]
    LDR R0, [R4,#0x18]
    BL sub_1CCB4
    STR R0, [R4,#0x1C]
    CBNZ R0, loc_284D0
loc_284B2:
    MOV R3, #aRsaGenerate
    MOVS R2, #0x64
    MOV R1, #aSshrsagC
    MOV R0, #aKeyIqmp
    BLX __assert_fail
loc_284D0:
    MOVS R3, #5
    MOVS R2, #3
    MOVS R1, #6
    MOV R0, R6
    BLX R5
    MOV R0, R9
    BL sub_1BAD4
    MOVS R0, #1
    MOV R3, #0x4B188
    LDR R2, [SP,#0x40+var_24]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_284F6
loc_284F2:
    BLX __stack_chk_fail
loc_284F6:
    ADD SP, SP, #0x24
    POP.W {R4-R9,PC}
```
Output:```json
[
    "Extracting features from the 'free' function",
    "Extracting basic data types and variables",
    "Finding loop control structures"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
abort:
loc_114E0:
    ADR R12, 0x114E8
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(abort_ptr - 0x4A4E8)]!
```
Output:[
    "Function `sub_805C310` is called."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
ec_generate:
loc_2316C:
    PUSH {R4,LR}
    MOV R4, R0
    MOV R0, R1
    MOV R2, R4
    ADDS R1, R4, #4
    BL sub_23104
    MOV R3, R0
    CBZ R0, loc_231BE
loc_2317E:
    LDR R2, [R4,#4]
    MOV R3, #0x4B174
    LDR R1, [R2,#0x1C]
    LDR R0, [R3]
    BL sub_1C1B8
    STR R0, [R4,#0x18]
    MOVS R3, #0
    CBZ R0, loc_231BE
loc_23196:
    LDR R1, [R4,#4]
    BL sub_22A40
    CBNZ R0, loc_231AA
loc_2319E:
    LDR R0, [R4,#0x18]
    BL sub_1BAD4
    MOVS R3, #0
    STR R3, [R4,#0x18]
    B loc_231BE
loc_231AA:
    LDR R2, [R0,#4]
    STR R2, [R4,#8]
    LDR R2, [R0,#8]
    STR R2, [R4,#0xC]
    MOVS R2, #0
    STR R2, [R4,#0x10]
    BL sub_17A78
    MOVS R3, #1
    B loc_231BE
loc_231BE:
    MOV R0, R3
    POP {R4,PC}
```
Output:```json
[
    "Extracts the current date and time in a specified format from the system's internal representation."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
rsakey_encrypted:
loc_24930:
    PUSH {R4,R5,LR}
    SUB SP, SP, #0x54
    MOV R5, R1
    MOV R3, #0x4B188
    LDR R3, [R3]
    STR R3, [SP,#0x60+var_14]
    MOVS R2, #0
    MOV R1, #0x38180
    BL sub_2BF48
    CBZ R0, loc_2498E
loc_24952:
    MOV R4, R0
    MOV R2, R0
    MOVS R1, #0x40
    ADD R0, SP, #0x60+s
    BLX fgets
    CBZ R0, loc_24984
loc_24960:
    MOV R1, #aSshPrivateKeyF
    ADD R0, SP, #0x60+s
    BLX strcmp
    CBNZ R0, loc_24984
loc_24970:
    ADD R3, SP, #0x60+var_58
    STR R3, [SP,#0x60+var_5C]
    MOVS R1, #0
    STR R1, [SP,#0x60+var_60]
    MOV R3, R5
    MOV R2, R1
    MOV R0, R4
    BL sub_24360
    B loc_24990
loc_24984:
    MOV R0, R4
    BLX fclose
    MOVS R0, #0
    B loc_24990
loc_2498E:
    MOVS R0, #0
loc_24990:
    MOV R3, #0x4B188
    LDR R2, [SP,#0x60+var_14]
    LDR R3, [R3]
    CMP R2, R3
    BEQ loc_249A4
loc_249A0:
    BLX __stack_chk_fail
loc_249A4:
    ADD SP, SP, #0x54
    POP {R4,R5,PC}
```
Output:import_ssh2:
loc_14D04:

loc_15BD8:

loc_163F8:

loc_16CF0:
    CMP R1, #5
    PUSH {R4}
    MOV R4, R2
    BEQ loc_16D14
loc_16CF8:
    CMP R1, #6
    BEQ loc_16D20
loc_16CFC:
    CMP R1, #7
    BNE loc_16D0C
loc_16D00:
    MOV R1, R4
    MOV R2, R3
    POP.W {R4}
    B.W sub_163F8
loc_16D0C:
    MOVS R0, #0
    POP.W {R4}
    BX LR
loc_16D14:
    MOV R1, R4
    MOV R2, R3
    POP.W {R4}
    B.W sub_14D04
loc_16D20:
    MOV R1, R4
    MOV R2, R3
    POP.W {R4}
    B.W sub_15BD8
```
Output:[
    "SHA256_Final",
    "Push r14, r13, r12, rbp",
    "MOV rbp, rsi",
    "MOV rbx, rdi",
    "SUB rsp, 50h",
    "MOV rax, fs:28h",
    "MOV [rsp+78h+var_30], rax",
    "XOR eax, eax",
    "MOV eax, [rdi+60h]",
    "CMP eax, 37h",
    "JLE loc_42FB58",
    "loc_42F9AE",
    "MOV r14d, 78h",
    "SUB r14d, eax",
    "MOV r12d, [rbx+68h]",
    "MOV eax, [rbx+64h]",
    "MOV ecx, 40h",
    "XOR esi, esi",
    "MOVSXD rdx, r14d",
    "MOV rdi, rsp",
    "LEA r13d, ds:0[rax*8]",
    "MOV eax, r12d",
    "SHL r12d, 3",
    " SHR eax, 1Dh",
    "OR r13d, eax",
    "CALL ___memset_chk",
    "MOV edx, r14d",
    "MOV rsi, rsp",
    "RDI, rbx",
    "MOV [rsp+78h+var_78], 80h",
    "CALL sub_42F2E0",
    "MOV eax, r13d",
    "MOV edx, 8",
    "RDI, rsp",
    SHR eax, 18h",
    "MOV rdi, rbx",
    "MOV [rsp+78h+var_75], r13b",
    "MOV [rsp+78h+var_78], al",
    "MOV eax, r13d",
    "MOV [rsp+78h+var_71], r12b",
    SHR eax, 10h",
    "MOV [rsp+78h+var_77], al",
    "MOV eax, r13d",
    "MOV [rsp+78h+var_76], al",
    "MOV eax, r12d",
    "SHR eax, 8",
    "MOV [rsp+78h+var_74], al",
    "MOV eax, r12d",
    "SHR eax, 10h",
    "MOV [rsp+78h+var_73], al",
    "MOV eax, r12d",
    "SHR eax, 8",
    "MOV [rsp+78h+var_72], al",
    CALL sub_42F2E0",
    "MOV eax, [rbx]",
    SHR eax, 18h",
    MOV [rbp+0], al,
    MOV eax, [rbx],
    SHR eax, 10h,
    MOV [rbp+1], al,
    MOV eax, [rbx],
    SHR eax, 8,
    MOV [rbp+2], al,
    MOV eax, [rbx],
    MOV [rbp+3], al,
    MOVZX eax, byte ptr [rbx+7],
    MOV [rbp+4], al,
    MOVZX eax, word ptr [rbx+6],
    MOV [rbp+5], al,
    MOV eax, [rbx+4],
    SHR eax, 8,
    MOV [rbp+6], al,
    MOV eax, [rbx+4],
    MOV [rbp+7], al,
    MOVZX eax, byte ptr [rbx+0Bh],
    MOV [rbp+8], al,
    MOVZX eax, word ptr [rbx+0Ah],
    MOV [rbp+9], al,
    MOV eax, [rbx+8],
    SHR eax, 8,
    MOV [rbp+0Ah], al,
    MOV eax, [rbx+8],
    MOV [rbp+0Bh], al,
    MOVZX eax, byte ptr [rbx+13h],
    MOV [rbp+10h], al,
    MOVZX eax, word ptr [rbx+12h],
    MOV [rbp+11h], al,
    MOV eax, [rbx+10h],
    SHR eax, 8,
    MOV [rbp+12h], al,
    MOV eax, [rbx+10h],
    MOV [rbp+13h], al,
    MOVZX eax, byte ptr [rbx+17h],
    MOV [rbp+14h], al,
    MOVZX eax, word ptr [rbx+16h],
    MOV [rbp+15h], al,
    MOV eax, [rbx+14h],
    SHR eax, 8,
    MOV [rbp+16h], al,
    MOV eax, [rbx+14h],
    MOV [rbp+17h], al,
    MOVZX eax, byte ptr [rbx+1Bh],
    MOV [rbp+18h], al,
    MOVZX eax, word ptr [rbx+1Ah],
    MOV [rbp+19h], al,
    MOV eax, [rbx+18h],
    SHR eax, 8,
    MOV [rbp+1Ah], al,
    MOV eax, [rbx+18h],
    MOV [rbp+1Bh], al,
    MOVZX eax, byte ptr [rbx+1Fh],
    MOV [rbp+1Ch], al,
    MOVZX eax, word ptr [rbx+1Eh],
    MOV [rbp+1Dh], al,
    MOV eax, [rbx+1Ch],
    SHR eax, 8,
    MOV [rbp+1Eh], al,
    MOV eax, [rbx+1Ch],
    MOV [rbp+1Fh], al,
    RDI, rbx,
    MOV rax, [rsp+78h+var_30],
    XOR rax, fs:28h
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
hmacsha256_verresult:
loc_293FC:
    PUSH {R4,R5,LR}
    MOV R4, #0x4C188
    SUB SP, SP, #0x2C
    MOV R5, R1
    ADD R1, SP, #0x38+var_34
    LDR R3, [R4]
    STR R3, [SP,#0x38+var_14]
    BL sub_293A4
    MOVS R2, #0x20
    MOV R1, R5
    ADD R0, SP, #0x38+var_34
    BL sub_18078
    LDR R2, [SP,#0x38+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_2942A
loc_29426:
    ADD SP, SP, #0x2C
    POP {R4,R5,PC}
loc_2942A:
    BLX __stack_chk_fail
```
Output:[
    "Subtracts two integers and returns the result",
    "Stores the result in a variable",
    "Subtracts two integers and returns the result",
    "Stores the result in a variable",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two integers and returns the result",
    "Subtracts two
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ssh2_load_userkey:
loc_258FC:
    PUSH.W {R4-R11,LR}
    MOV R5, #0x4C188
    SUB SP, SP, #0x124
    MOV R4, R0
    MOV R8, R2
    LDR R3, [R5]
    MOV R7, R1
    STR R3, [SP,#0x148+var_2C]
    CMP R1, #0
    BEQ.W loc_25A56
loc_2591A:
    MOV R0, R1
    BLX strlen
    STR R0, [SP,#0x148+var_13C]
loc_25922:
    MOV R0, R4
    MOVW R1, #0x8DAC
    MOVS R2, #0
    MOVT.W R1, #3
    BL sub_2CC3C
    MOV R4, R0
    CMP R0, #0
    BEQ loc_259F2
loc_25938:
    ADD R1, SP, #0x148+s1
    BL sub_24F80
    CBNZ R0, loc_259A4
loc_25940:
    MOV R7, R0
    MOV R10, R0
loc_25944:
    MOV R0, R4
    MOV R4, R10
    BLX fclose
    CMP.W R10, #0
    BEQ loc_25988
loc_25952:
    MOVS R4, #0
    MOV R9, R4
    MOV R6, R4
    MOV R11, R4
loc_2595A:
    MOV R0, R10
    BL sub_17E14
    CMP.W R11, #0
    BEQ loc_2596C
loc_25966:
    MOV R0, R11
    BL sub_17E14
loc_2596C:
    CMP.W R9, #0
    BEQ loc_25978
loc_25972:
    MOV R0, R9
    BL sub_17E14
loc_25978:
    CBZ R6, loc_25988
loc_2597A:
    MOV R0, R6
    LDR R1, [SP,#0x148+var_10C]
    BL sub_17E64
    MOV R0, R6
    BL sub_17E14
loc_25988:
    CMP.W R8, #0
    BEQ loc_25A00
loc_2598E:
    MOV R0, R4
    STR.W R7, [R8]
loc_25994:
    LDR R2, [SP,#0x148+var_2C]
    LDR R3, [R5]
    CMP R2, R3
    BNE.W loc_25B66
loc_2599E:
    ADD SP, SP, #0x124
    POP.W {R4-R11,PC}
loc_259A4:
    MOVW R1, #0x8F3C
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ loc_25A5A
loc_259B6:
    MOVW R1, #0x8F54
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_25A04
loc_259C6:
    ADD R0, SP, #0x148+s1
    MOVW R1, #0x8E84
    MOVS R2, #0x14
    MOVT.W R1, #3
    BLX strncmp
    MOVW R7, #0x8F1C
    MOVW R3, #0x8F00
    MOVT.W R7, #3
    MOVT.W R3, #3
    MOV.W R10, #0
    CMP R0, R10
    IT 
    MOVEQ R7, R3
    B loc_25944
loc_259F2:
    MOV R7, #0x38DB0
    CMP.W R8, #0
    BNE loc_2598E
loc_25A00:
    MOV R0, R4
    B loc_25994
loc_25A04:
    BL sub_2C4E8
    MOVS R3, #1
    STR R3, [SP,#0x148+var_134]
loc_25A0C:
    MOV R0, R4
    BL sub_250A4
    MOV R6, R0
    CBZ R0, loc_25A48
loc_25A16:
    BLX strlen
    MOV R1, R6
    BL sub_2562C
    MOV R3, R0
    STR R0, [SP,#0x148+var_130]
    MOV R0, R6
    CMP R3, #0
    BEQ loc_25AB4
loc_25A2A:
    BL sub_17E14
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_24F80
    CBZ R0, loc_25A48
loc_25A38:
    MOVW R1, #0x8F6C
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_25A5E
loc_25A48:
    MOVW R7, #0x8D68
    MOV.W R10, #0
    MOVT.W R7, #3
    B loc_25944
loc_25A56:
    STR R1, [SP,#0x148+var_13C]
    B loc_25922
loc_25A5A:
    STR R0, [SP,#0x148+var_134]
    B loc_25A0C
loc_25A5E:
    MOV R0, R4
    BL sub_250A4
    MOV R10, R0
    CMP R0, #0
    BEQ loc_25A48
loc_25A6A:
    MOV R1, #aAes256Cbc
    BLX strcmp
    CBZ R0, loc_25AC4
loc_25A78:
    MOVW R1, #0x44
    MOV R0, R10
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_25AAA
loc_25A88:
    MOVS R3, #1
    STR R0, [SP,#0x148+var_12C]
    STR R3, [SP,#0x148+s2]
loc_25A8E:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_24F80
    CBZ R0, loc_25AAA
loc_25A98:
    MOVW R1, #0xFC
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    MOV R6, R0
    CBZ R0, loc_25ACE
loc_25AAA:
    MOV R7, #0x38D68
    B loc_25944
loc_25AB4:
    MOV R10, R3
    MOVW R7, #0x8D68
    BL sub_17E14
    MOVT.W R7, #3
    B loc_25944
loc_25AC4:
    MOVS R3, #0x10
    STR R3, [SP,#0x148+s2]
    MOVS R3, #1
    STR R3, [SP,#0x148+var_12C]
    B loc_25A8E
loc_25ACE:
    MOV R0, R4
    BL sub_250A4
    STR R0, [SP,#0x148+s]
    CMP R0, #0
    BEQ loc_25AAA
loc_25ADA:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_24F80
    CMP R0, #0
    BEQ loc_25B60
loc_25AE6:
    MOVW R1, #0x8F78
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    MOV R11, R0
    CBZ R0, loc_25B14
loc_25AF8:
    MOV R9, R6
loc_25AFA:
    MOV R0, R4
    MOVW R7, #0x8D68
    BLX fclose
    MOVS R4, #0
    MOVT.W R7, #3
    MOV R11, R4
loc_25B0C:
    LDR R0, [SP,#0x148+s]
    BL sub_17E14
    B loc_2595A
loc_25B14:
    MOV R0, R4
    BL sub_250A4
    MOV R6, R0
    CMP R0, #0
    BEQ loc_25AF8
loc_25B20:
    MOVS R2, #0xA
    MOV R1, R11
    BLX strtol
    MOV R9, R0
    MOV R0, R6
    BL sub_17E14
    MOV R1, R9
    ADD R2, SP, #0x148+var_110
    MOV R0, R4
    BL sub_11594
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_25E56
loc_25B42:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_24F80
    CBZ R0, loc_25B6A
loc_25B4C:
    MOVW R1, #0x8F88
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_25B6E
loc_25B5C:
    MOV R6, R11
    B loc_25AFA
loc_25B60:
    MOV R6, R0
    MOV R9, R0
    B loc_25AFA
loc_25B66:
    BLX __stack_chk_fail
loc_25B6A:
    MOV R6, R0
    B loc_25AFA
loc_25B6E:
    MOV R0, R4
    BL sub_250A4
    MOV R6, R0
    CMP R0, #0
    BEQ.W loc_25E52
loc_25B7C:
    MOVS R2, #0xA
    MOVS R1, #0
    BLX strtol
    MOV R11, R0
    MOV R0, R6
    BL sub_17E14
    MOV R1, R11
    ADD R2, SP, #0x148+var_10C
    MOV R0, R4
    BL sub_11594
    MOV R6, R0
    CMP R0, #0
    BEQ loc_25AFA
loc_25B9C:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_24F80
    CMP R0, #0
    BEQ loc_25AFA
loc_25BA8:
    MOVW R1, #0x8F98
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_25E5A
loc_25BBC:
    MOVW R1, #0x8FA4
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_25AFA
loc_25BCE:
    LDR R3, [SP,#0x148+var_134]
    CMP R3, #0
    BEQ loc_25AFA
loc_25BD4:
    MOV R0, R4
    BL sub_250A4
    MOV R11, R0
    CMP R0, #0
    BEQ loc_25AFA
loc_25BE0:
    MOVS R3, #0
    STR R3, [SP,#0x148+var_120]
loc_25BE4:
    MOV R0, R4
    BLX fclose
    LDR R3, [SP,#0x148+var_12C]
    CMP R3, #0
    BNE.W loc_25DE4
loc_25BF2:
    ADD R3, SP, #0x148+var_58
    STR R3, [SP,#0x148+s2]
loc_25BF6:
    LDR R3, [SP,#0x148+var_134]
    CMP R3, #0
    BEQ loc_25CF4
loc_25BFC:
    LDR R3, [SP,#0x148+var_10C]
    STR R6, [SP,#0x148+var_134]
    STR R3, [SP,#0x148+var_124]
    MOVS R3, #0
    STR R3, [SP,#0x148+var_11C]
loc_25C06:
    LDR R3, [SP,#0x148+var_120]
    CMP R3, #0
    BEQ loc_25CE6
loc_25C0C:
    MOV LR, #0x38FBC
    LDR R4, [SP,#0x148+s2]
    LDM.W LR!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W LR, {R0-R3}
    STM R4!, {R0-R2}
    ADD R0, SP, #0x148+var_108
    STRH.W R3, [R4],#2
    LSRS R3, R3, #0x10
    STRB R3, [R4]
    BL sub_2AA60
    ADD R0, SP, #0x148+var_108
    MOVS R2, #0x1E
    LDR R1, [SP,#0x148+s2]
    BL sub_2AA9C
    CBZ R7, loc_25C4A
loc_25C3C:
    LDR R3, [SP,#0x148+var_12C]
    CBZ R3, loc_25C4A
loc_25C40:
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R7
    ADD R0, SP, #0x148+var_108
    BL sub_2AA9C
loc_25C4A:
    ADD R0, SP, #0x148+var_108
    ADD R1, SP, #0x148+var_94
    BL sub_2AD34
    ADD R7, SP, #0x148+var_A8
    ADD R0, SP, #0x148+var_94
    LDR R3, [SP,#0x148+var_124]
    LDR R2, [SP,#0x148+var_134]
    MOVS R1, #0x14
    STR R7, [SP,#0x148+var_148]
    BL sub_2B0BC
    ADD R0, SP, #0x148+var_94
    MOVS R1, #0x14
    BL sub_17E64
    ADD R0, SP, #0x148+var_108
    MOVS R1, #0x60
    BL sub_17E64
loc_25C72:
    LDR R3, [SP,#0x148+var_11C]
    CBZ R3, loc_25C86
loc_25C76:
    LDR R4, [SP,#0x148+var_134]
    LDR R1, [SP,#0x148+var_124]
    MOV R0, R4
    BL sub_17E64
    MOV R0, R4
    BL sub_17E14
loc_25C86:
    MOVS R4, #0
    MOV R3, #0x38FB4
    STR R3, [SP,#0x148+var_13C]
loc_25C92:
    LDRB.W LR, [R7,R4]
    MOVS R1, #1
    LDR R0, [SP,#0x148+s2]
    MOV.W R2, #0xFFFFFFFF
    LDR R3, [SP,#0x148+var_13C]
    ADD.W R0, R0, R4,LSL#1
    STR.W LR, [SP,#0x148+var_148]
    ADD R4, R1
    BLX __sprintf_chk
    CMP R4, #0x14
    BNE loc_25C92
loc_25CB2:
    LDR R1, [SP,#0x148+s2]
    MOV R0, R11
    BLX strcmp
    STR R0, [SP,#0x148+var_13C]
    CMP R0, #0
    BEQ.W loc_25E6E
loc_25CC2:
    LDR R3, [SP,#0x148+var_12C]
    MOVW R7, #0xF100
    MOVW R4, #0xC2B8
    MOVT.W R7, #2
    CMP R3, #0
    MOV R3, #0x38EE0
    MOVT.W R4, #4
    ITT 
    MOVEQ R4, #0
    MOVEQ R7, R3
    B loc_25B0C
loc_25CE6:
    ADD R7, SP, #0x148+var_A8
    LDR R1, [SP,#0x148+var_124]
    LDR R0, [SP,#0x148+var_134]
    MOV R2, R7
    BL sub_2B044
    B loc_25C72
loc_25CF4:
    LDR R3, [SP,#0x148+var_130]
    MOVS R2, #1
    STR R2, [SP,#0x148+var_11C]
    LDR R0, [R3,#0x30]
    BLX strlen
    MOV R4, R0
    MOV R0, R10
    BLX strlen
    STR R0, [SP,#0x148+var_134]
    LDR R0, [SP,#0x148+s]
    BLX strlen
    LDR R3, [SP,#0x148+var_134]
    LDR R2, [SP,#0x148+var_110]
    ADDS R1, R4, R3
    STR R3, [SP,#0x148+n]
    ADD R1, R0
    STR R0, [SP,#0x148+var_118]
    ADD R2, R1
    LDR R0, [SP,#0x148+var_10C]
    ADDS R2, #0x14
    MOVS R1, #1
    ADD R2, R0
    STR R2, [SP,#0x148+var_124]
    MOV R0, R2
    BL sub_17928
    ASRS R1, R4, #0x18
    ASRS R2, R4, #0x10
    STRB R1, [R0]
    ASRS R1, R4, #8
    STRB R1, [R0,#2]
    LDR R1, [SP,#0x148+var_130]
    STRB R4, [R0,#3]
    STRB R2, [R0,#1]
    MOV R2, R4
    STR R0, [SP,#0x148+var_134]
    ADDS R0, #4
    LDR R1, [R1,#0x30]
    BLX memcpy
    LDR R0, [SP,#0x148+var_134]
    LDR R3, [SP,#0x148+n]
    ADDS R2, R4, #4
    ADDS R4, R0, R2
    MOV.W R12, R3,ASR#24
    ASRS R1, R3, #0x10
    STRB.W R12, [R0,R2]
    ASRS R2, R3, #8
    STRB R3, [R4,#3]
    ADDS R0, R4, #4
    STRB R1, [R4,#1]
    MOV R1, R10
    STRB R2, [R4,#2]
    MOV R2, R3
    BLX memcpy
    LDR R3, [SP,#0x148+n]
    LDR R0, [SP,#0x148+var_118]
    ADDS R2, R3, #4
    ADDS R3, R4, R2
    STR R3, [SP,#0x148+var_118]
    ASRS R1, R0, #0x18
    STRB R1, [R4,R2]
    MOV R4, R0
    ASRS R1, R0, #0x10
    STRB R0, [R3,#3]
    ASRS R2, R0, #8
    STRB R1, [R3,#1]
    ADDS R0, R3, #4
    STRB R2, [R3,#2]
    MOV R2, R4
    LDR R1, [SP,#0x148+s]
    BLX memcpy
    LDRSB.W R0, [SP,#0x148+var_110+3]
    LDR R3, [SP,#0x148+var_118]
    ADDS R2, R4, #4
    MOV R1, R9
    ADDS R4, R3, R2
    STRB R0, [R3,R2]
    ADDS R0, R4, #4
    LDRSH.W R3, [SP,#0x148+var_110+2]
    STRB R3, [R4,#1]
    LDR R3, [SP,#0x148+var_110]
    ASRS R3, R3, #8
    STRB R3, [R4,#2]
    LDR R3, [SP,#0x148+var_110]
    STRB R3, [R4,#3]
    LDR R3, [SP,#0x148+var_110]
    MOV R2, R3
    STR R3, [SP,#0x148+var_118]
    BLX memcpy
    LDR R3, [SP,#0x148+var_118]
    LDRSB.W R2, [SP,#0x148+var_10C+3]
    MOV R1, R6
    ADDS R0, R3, #4
    ADDS R3, R4, R0
    STRB R2, [R4,R0]
    ADDS R0, R3, #4
    LDRSH.W R2, [SP,#0x148+var_10C+2]
    STRB R2, [R3,#1]
    LDR R2, [SP,#0x148+var_10C]
    ASRS R2, R2, #8
    STRB R2, [R3,#2]
    LDR R2, [SP,#0x148+var_10C]
    STRB R2, [R3,#3]
    LDR R2, [SP,#0x148+var_10C]
    BLX memcpy
    B loc_25C06
loc_25DE4:
    CBZ R7, loc_25DF0
loc_25DE6:
    LDR R1, [SP,#0x148+s2]
    LDR R0, [SP,#0x148+var_10C]
    BL sub_2E49C
    CBZ R1, loc_25DFC
loc_25DF0:
    MOVW R7, #0x8D68
    MOVS R4, #0
    MOVT.W R7, #3
    B loc_25B0C
loc_25DFC:
    ADD R3, SP, #0x148+var_58
    ADD R0, SP, #0x148+var_108
    STR R3, [SP,#0x148+s2]
    MOV R4, R3
    BL sub_2AA60
    ADD R0, SP, #0x148+var_108
    MOVS R2, #4
    LDR R1, =unk_38CE0
    BL sub_2AA9C
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R7
    ADD R0, SP, #0x148+var_108
    BL sub_2AA9C
    MOV R1, R4
    ADD R0, SP, #0x148+var_108
    BL sub_2AD34
    ADD R0, SP, #0x148+var_108
    BL sub_2AA60
    ADD R0, SP, #0x148+var_108
    MOVS R2, #4
    LDR R1, =unk_38CE8
    BL sub_2AA9C
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R7
    ADD R0, SP, #0x148+var_108
    BL sub_2AA9C
    ADD R0, SP, #0x148+var_108
    ADD R1, SP, #0x148+var_44
    BL sub_2AD34
    MOV R0, R4
    LDR R2, [SP,#0x148+var_10C]
    MOV R1, R6
    BL sub_1A130
    B loc_25BF6
loc_25E52:
    MOVS R6, #0
    B loc_25AFA
loc_25E56:
    MOV R6, R0
    B loc_25AFA
loc_25E5A:
    MOV R0, R4
    BL sub_250A4
    MOV R11, R0
    CMP R0, #0
    BEQ.W loc_25AFA
loc_25E68:
    MOVS R3, #1
    STR R3, [SP,#0x148+var_120]
    B loc_25BE4
loc_25E6E:
    MOV R0, R11
    BL sub_17E14
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_17928
    LDR R2, [SP,#0x148+var_10C]
    LDR R7, [SP,#0x148+var_130]
    MOV R3, R6
    LDR R1, [SP,#0x148+s]
    MOV R4, R0
    MOV R0, R7
    STR R1, [R4,#8]
    MOV R1, R9
    STR R7, [R4]
    STR R2, [SP,#0x148+var_148]
    LDR.W R11, [R7,#0x14]
    LDR R2, [SP,#0x148+var_110]
    BLX R11
    MOV R3, R0
    STR R0, [R4,#4]
    CBZ R0, loc_25ECA
loc_25E9E:
    MOV R0, R9
    BL sub_17E14
    LDR R1, [SP,#0x148+var_10C]
    MOV R0, R6
    BL sub_17E64
    MOV R0, R6
    BL sub_17E14
    MOV R0, R10
    BL sub_17E14
    CMP.W R8, #0
    BEQ.W loc_25A00
loc_25EC0:
    LDR R3, [SP,#0x148+var_13C]
    MOV R0, R4
    STR.W R3, [R8]
    B loc_25994
loc_25ECA:
    MOV R0, R4
    MOV R11, R3
    MOVW R7, #0x8EEC
    BL sub_17E14
    MOV R4, R11
    MOVT.W R7, #3
    B loc_25B0C[
    "encrypts a message from the SSH server",
    "uses the RSA algorithm",
    "with an initial length of 0",
    "and a maximum length of 2048 bytes",
    "to be sent over SSH",
    "and returns the encrypted message"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
bignum_from_long:
loc_1C6D8:
    PUSH {R4,LR}
    MOV R4, R0
    MOVS R0, #1
    BL sub_1BA40
    MOVS R3, #0
    STR R3, [R0]
    STR R4, [R0,#4]
    CBZ R4, locret_1C6EE
loc_1C6EA:
    MOVS R3, #1
    STR R3, [R0]
loc_1C6EE:
    POP {R4,PC}
```
Output:[
    "Subtracting from a negative number",
    "Calculating the sum of two integers",
    "Modifying the value of an integer",
    "Adding two integers",
    "Handling overflow in addition"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
.divsi3_skip_div0_test:
loc_2E20E:
    EOR.W R12, R0, R1
    IT 
    NEGMI R1, R1
    SUBS R2, R1, #1
    BEQ.W loc_2E45A
loc_2E21C:
    MOVS R3, R0
    IT 
    NEGMI R3, R0
    CMP R3, R1
    BLS.W loc_2E464
loc_2E228:
    TST R1, R2
    BEQ.W loc_2E474
loc_2E22E:
    CLZ.W R2, R3
    CLZ.W R0, R1
    SUB.W R2, R0, R2
    RSB.W R2, R2, #0x1F
    ADR R0, loc_2E250
    ADD.W R2, R0, R2,LSL#4
    MOV.W R0, #0
    MOV PC, R2
loc_2E24C:
    NOP.W 
loc_2E250:
    CMP.W R3, R1,LSL#31
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#31
    CMP.W R3, R1,LSL#30
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#30
    CMP.W R3, R1,LSL#29
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#29
    CMP.W R3, R1,LSL#28
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#28
    CMP.W R3, R1,LSL#27
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#27
    CMP.W R3, R1,LSL#26
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#26
    CMP.W R3, R1,LSL#25
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#25
    CMP.W R3, R1,LSL#24
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#24
    CMP.W R3, R1,LSL#23
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#23
    CMP.W R3, R1,LSL#22
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#22
    CMP.W R3, R1,LSL#21
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#21
    CMP.W R3, R1,LSL#20
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#20
    CMP.W R3, R1,LSL#19
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#19
    CMP.W R3, R1,LSL#18
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#18
    CMP.W R3, R1,LSL#17
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#17
    CMP.W R3, R1,LSL#16
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#16
    CMP.W R3, R1,LSL#15
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#15
    CMP.W R3, R1,LSL#14
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#14
    CMP.W R3, R1,LSL#13
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#13
    CMP.W R3, R1,LSL#12
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#12
    CMP.W R3, R1,LSL#11
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#11
    CMP.W R3, R1,LSL#10
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#10
    CMP.W R3, R1,LSL#9
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#9
    CMP.W R3, R1,LSL#8
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#8
    CMP.W R3, R1,LSL#7
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#7
    CMP.W R3, R1,LSL#6
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#6
    CMP.W R3, R1,LSL#5
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#5
    CMP.W R3, R1,LSL#4
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#4
    CMP.W R3, R1,LSL#3
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#3
    CMP.W R3, R1,LSL#2
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#2
    CMP.W R3, R1,LSL#1
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#1
    CMP.W R3, R1
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1
    CMP.W R12, #0
    IT 
    NEGMI R0, R0
    BX LR
loc_2E45A:
    TEQ.W R12, R0
    IT 
    NEGMI R0, R0
    BX LR
loc_2E464:
    IT 
    MOVCC R0, #0
    ITT 
    MOVEQ.W R0, R12,ASR#31
    ORREQ.W R0, R0, #1
    BX LR
loc_2E474:
    CLZ.W R2, R1
    RSB.W R2, R2, #0x1F
    CMP.W R12, #0
    LSR.W R0, R3, R2
    IT 
    NEGMI R0, R0
    BX LR
```
Output:[
    "Adds 234 to the value at the address pointed to by RDI (register 16-bit) if it is not zero.",
    "Subtracts 1 from the value at the address pointed to by RDI (register 16-bit) if it is zero."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
internal_mul_low:
loc_1BE00:
    PUSH.W {R4-R11,LR}
    CMP R3, #0x32
    SUB SP, SP, #0x14
    MOV R8, R1
    LDR R6, [SP,#0x38+arg_0]
    BGT loc_1BEAC
loc_1BE0E:
    CMP R3, #0
    MOV.W R12, R3,LSL#2
    ITTT 
    ADDGT.W R4, R2, R12
    MOVGT R3, R2
    MOVGT R1, #0
    BLE loc_1BE28
loc_1BE20:
    STR.W R1, [R3],#4
    CMP R3, R4
    BNE loc_1BE20
loc_1BE28:
    ADD.W R3, R0, R12
    ADD.W R1, R2, R12
    CMP R0, R3
    SUB.W R7, R3, #4
    BCS loc_1BEA6
loc_1BE38:
    RSB.W R9, R0, #3
    RSB.W R10, R2, #3
    ADD R9, R7
    MVN.W R9, R9
    BIC.W R9, R9, #3
    ADD R9, R1
loc_1BE4C:
    CMP R2, R1
    SUB.W LR, R1, #4
    BCS loc_1BE9C
loc_1BE54:
    ADD.W R6, LR, R10
    ADD.W R5, R8, R12
    BIC.W R6, R6, #3
    MOV R3, LR
    SUBS R6, R1, R6
    MOVS R0, #0
    SUBS R6, #8
    MOV R11, R2
    STR.W R9, [SP,#0x38+var_30]
    STR.W R8, [SP,#0x38+var_2C]
loc_1BE72:
    LDR R2, [R7]
    MOVS R1, #0
    LDR.W R4, [R5,#-4]!
    UMLAL.W R0, R1, R4, R2
    LDR R2, [R3]
    ADDS.W R8, R0, R2
    STR.W R8, [R3],#-4
    ADC.W R9, R1, #0
    CMP R3, R6
    MOV R0, R9
    BNE loc_1BE72
loc_1BE92:
    LDR.W R9, [SP,#0x38+var_30]
    MOV R2, R11
    LDR.W R8, [SP,#0x38+var_2C]
loc_1BE9C:
    CMP LR, R9
    SUB.W R7, R7, #4
    MOV R1, LR
    BNE loc_1BE4C
loc_1BEA6:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_1BEAC:
    ASRS R7, R3, #1
    STR R2, [SP,#0x38+var_2C]
    SUB.W R10, R3, R7
    ADD.W R5, R6, R3,LSL#3
    MOV.W R9, R7,LSL#2
    ADD.W R2, R6, R7,LSL#3
    SUB.W R3, R2, R9
    MOV R4, R0
    STR R3, [SP,#0x38+var_30]
    ADD R1, R9
    MOV R3, R10
    ADD R0, R9
    MOV.W R11, R10,LSL#2
    STR R5, [SP,#0x38+var_38]
    BL sub_1BAB8
    LDR R2, [SP,#0x38+var_30]
    ADD.W R1, R8, R11
    MOV R3, R7
    MOV R0, R4
    STR R5, [SP,#0x38+var_38]
    BL sub_1BE00
    ADD.W R0, R4, R11
    STR R5, [SP,#0x38+var_38]
    MOV R1, R8
    MOV R3, R7
    MOV R2, R6
    BL sub_1BE00
    CMP.W R10, #0
    BLE loc_1BF9E
loc_1BEFE:
    LDR R3, [SP,#0x38+var_2C]
    MOV.W R12, R7,LSL#1
    ADD R3, R9
    MOV R2, R3
    ADD.W R3, R10, R12
    ADD.W R4, R10, R3
    MOV R1, R2
    ADD.W R3, R6, R3,LSL#2
    ADD.W R4, R6, R4,LSL#2
loc_1BF1A:
    LDR.W R0, [R3],#4
    CMP R3, R4
    STR.W R0, [R1],#4
    BNE loc_1BF1A
loc_1BF26:
    LDR R1, [SP,#0x38+var_30]
    MOVS R4, #0
    ADD.W LR, R6, R9,LSL#1
    MOV R8, R7
    MOV R0, R4
    STR.W R12, [SP,#0x38+var_30]
    MOV R3, R1
    MOV R5, R1
loc_1BF3A:
    LDR.W R7, [LR,#-4]!
    MOV.W R12, #0
    LDR.W R4, [R3,#-4]
    ADDS R0, R0, R7
    ADC.W R1, R12, #0
    ADDS.W R11, R0, R4
    ADC.W R12, R1, #0
    STR.W R11, [R3,#-4]!
    CMP R3, R6
    MOV R0, R12
    BNE loc_1BF3A
loc_1BF5E:
    LDR.W R12, [SP,#0x38+var_30]
    SUB.W R7, R10, R8
    MOV R1, R5
    MOVS R0, #0
    ADD.W R3, R7, R12
    ADD.W R3, R9, R3,LSL#2
    ADD R3, R6
loc_1BF74:
    LDR.W R4, [R3,#-4]!
    MOVS R5, #0
    LDR.W R7, [R1,#-4]!
    ADDS.W R8, R4, R7
    ADC.W R9, R5, #0
    ADDS.W R4, R8, R0
    ADC.W R5, R9, #0
    CMP R6, R1
    STR.W R4, [R2,#-4]!
    MOV R0, R5
    BNE loc_1BF74
loc_1BF98:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_1BF9E:
    LDR R3, [SP,#0x38+var_2C]
    MOV.W R12, R7,LSL#1
    ADD R3, R9
    MOV R2, R3
    B loc_1BF26
```
Output:[
    "decrypt",
    "AES",
    "CBC",
    "DES",
    "CBC3"
]<|im_end|>
############
Binary: putty
Platform: arm

```
Output:[
    "Decrypts an SSH2 block",
    "Uses AES encryption for decryption",
    "Stores the decrypted data in back_chain(r1)",
    "Stores the decrypted data in r4",
    "Stores the decrypted data in r5",
    "Stores the decrypted data in r3",
    "Adds 0x10 to r1",
    "Branches to sub_1000E550"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
fdopen:
loc_11144:
    ADR R12, 0x1114C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fdopen_ptr - 0x5514C)]!
```
Output:[
    "puts": This is the name of the function.
    "LIS": This instruction loads the value at the address pointed to by register `r11` into the index register `r11`.
    "LWZ": This instruction loads the value at the address pointed to by register `r11` into the value register `r11`.
    "MTCTR ctr, r11": This instruction sets the carry flag to 1.
    "BCTR ctr": This instruction clears the carry flag.
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
toint:
loc_18BEC:
    BX LR
```
Output:```json
[
    "AES-256 encryption with public key",
    "Encrypts a message using AES-256 with a public key",
    "Uses a back chain and sender/recipient LR values",
    "Updates the back chain with the sender's LR value",
    "Updates the sender's LR value with the receiver's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Subtracts the sender's LR value from the back chain",
    "Updates the back chain with the sender's LR value",
    "Sub

```
Output:[
    "Cleanup and Exit Function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
rsa2_fmtkey:
loc_282C4:
    PUSH {R3-R5,LR}
    MOV R5, R0
    BL sub_281A4
    MOVS R1, #1
    BL sub_17928
    MOV R1, R5
    MOV R4, R0
    BL sub_281D8
    MOV R0, R4
    POP {R3-R5,PC}
```
Output:[
    "Load the stack pointer",
    "Push the arguments onto the stack",
    "Move the stack pointer to a variable",
    "Load the general-purpose register gp",
    "Push the general-purpose register arg_0",
    "Load the general-purpose register arg_4",
    "Load the argument from bytes",
    "Convert the bytes to a bignum",
    "Allocate memory for bignum",
    "Load the bignum into a register",
    "Add the first argument to the bignum",
    "Check if the result is zero",
    "Jump to loc_42FDF4 if the result is zero",
    "Pop the arguments from the stack",
    "Move the stack pointer back to its original location",
    "Jump to loc_42FE48 if the stack pointer is not zero"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
strerror:
loc_1131C:
    ADR R12, 0x11324
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(strerror_ptr - 0x4B324)]!
```
Output:[
    "Extracts a substring from a given string.",
    "Uses a loop to find the substring.",
    "Uses bitwise operations to perform substring extraction."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__imp_malloc:
loc_4C874:
    IMPORT 
```
Output:```json
[
    "Stores the result of the square operation in the variable `a2`",
    "Calculates the square of the first two arguments",
    "Uses a helper function `modmul` to multiply the first two arguments",
    "Stores the result of the multiplication in the variable `a2`",
    "Subtracts the second argument from the first argument",
    "Subtracts the first argument from the first argument",
    "Stores the result of the subtraction in the variable `a2`",
    "Moves the result of the subtraction into the variable `a1`"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
reciprocal_word:
loc_1B4C8:
    PUSH.W {R3-R9,LR}
    SUBS R7, R0, #0
    BGE loc_1B56E
loc_1B4D0:
    LSRS R0, R7, #0x10
    MOV.W R9, #0
    ADDS R1, R0, #1
    ADD.W R0, R0, #0x80000000
    BL sub_2DF90
    MOVS R3, #0
    MOV R4, R7
    MOVS R5, #0
    LSLS R0, R0, #0x10
    MOV R2, R0
    UMLAL.W R2, R3, R7, R0
    MVN.W R8, R2
    ADDS.W R8, R8, #1
    ADC.W R9, R9, #0
    MVNS R2, R3
    ADD R2, R9
    MOV.W R9, #0
    UMULL.W R2, R3, R0, R2
    LSRS R0, R2, #0x1F
    ORR.W R0, R0, R3,LSL#1
    MOV R8, R0
    UMLAL.W R8, R9, R0, R7
    CMP.W R9, #0
    MOV R1, R9
    BLT loc_1B544
loc_1B51A:
    ADDS.W R2, R7, R8
    ADD.W R6, R7, R8
    ADC.W R3, R5, #0
    ADDS.W R1, R3, R9
    BMI locret_1B56A
loc_1B52C:
    MOV R2, R6
    ADDS R2, R2, R4
    MOV.W R3, #0
    ADCS R3, R5
    ADDS R1, R1, R3
    ADD.W R0, R0, #1
    ADD R6, R7
    BPL loc_1B52C
loc_1B540:
    POP.W {R3-R9,PC}
loc_1B544:
    MVNS R2, R7
    ADDS R2, #1
    MOV.W R3, #0
    ADC.W R3, R3, #0
    MOV R6, R2
loc_1B552:
    ADDS.W R4, R2, R8
    ADD.W R0, R0, #0xFFFFFFFF
    ADC.W R5, R3, #0
    ADD R8, R6
    SUBS R4, R5, #1
    ADDS R1, R1, R4
    BMI loc_1B552
loc_1B566:
    POP.W {R3-R9,PC}
loc_1B56A:
    POP.W {R3-R9,PC}
loc_1B56E:
    MOVW R3, #0x414C
    MOVW R1, #0x422C
    MOVW R0, #0x4234
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x22C
    MOVT.W R0, #3
    BLX __assert_fail
```
Output:[
    "Load the error location from the off_456040 offset",
    "Jump to the error location with the return address",
    "Load the return address into the t9 register",
    "Jump to the t9 register with the return address",
    "Load the error code (ECX) into the t7 register"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
conf_insert:
loc_1306C:
    PUSH {R4-R6,LR}
    MOV R5, R0
    LDR R0, [R0]
    MOV R4, R1
    BL sub_2BC10
    CMP R0, #0
    IT 
    CMPNE R4, R0
    BNE loc_13082
loc_13080:
    POP {R4-R6,PC}
loc_13082:
    MOV R1, R0
    MOV R6, R0
    LDR R0, [R5]
    BL sub_2BE40
    MOV R0, R6
    BL sub_12F6C
    MOV R1, R4
    LDR R0, [R5]
    BL sub_2BC10
    CMP R4, R0
    BEQ locret_13080
loc_1309E:
    MOVW R1, #0xF9B4
    MOVW R0, #0xF9BC
    MOVT.W R1, #2
    MOVT.W R0, #2
    LDR R3, =aConfInsert
    MOVS R2, #0xE6
    BLX __assert_fail
```
Output:[
    "modinv",
    "sub_4186DC",
    "sub_418612",
    "sub_41873C",
    "sub_41C730",
    "sub_41BB7F",
    "sub_41C730",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873C",
    "sub_41873
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
__imp_strncmp:
loc_4B860:
    IMPORT 
```
Output:```json
[
    "Loads the value of the register `rdi` into the variable `rax`."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 1
```assembly
fwrite:
loc_112A0:
    ADR R12, 0x112A8
    ADD R12, R12, #0x39000
    LDR PC, [R12,#(fwrite_ptr - 0x4A2A8)]!
```
Output:```json
[
    "Loads a string from the provided address",
    "Initializes the register stack pointers",
    "Allocates memory for the string",
    "Copies the first four bytes of the string to the register",
    "Shifts the first two bytes to the left by 18 bits and then shifts the first byte to the left by 10 bits",
    "Ors the shifted bytes with the first byte of the string",
    "Subtracts 4 from the current address",
    "Adds 4 to the current address",
    "Moves the current address to the register",
    "Cmps the current address with the second address",
    "Jumps to loc_414FAB if the addresses are not equal",
    "Subtracts 4 from the current address",
    "Adds 4 to the current address",
    "Copies the first four bytes of the string to the register",
    "Shifts the first two bytes to the left by 18 bits and then shifts the first byte to the left by 10 bits",
    "Ors the shifted bytes with the first byte of the string",
    "Subtracts 4 from the current address",
    "Adds 4 to the current address",
    "Moves the current address to the register",
    "Cmps the current address with the third address",
    "Jumps to loc_414FAB if the addresses are not equal",
    "Subtracts 4 from the current address",
    "Adds 4 to the current address",
    "Copies the first four bytes of the string to the register",
    "Shifts the first two bytes to the left by 18 bits and then shifts the first byte to the left by 10 bits",
    "Ors the shifted bytes with the first byte of the string",
    "Subtracts 4 from the current address",
    "Adds 4 to the current address",
    "Moves the current address to the register",
    "Cmps the current address with the fourth address",
    "Jumps to loc_414FAB if the addresses are not equal"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
dss_private_blob:
loc_1FF78:
    PUSH.W {R3-R11,LR}
    MOV R6, R0
    LDR R0, [R0,#0x10]
    MOV R10, R1
    BL sub_1C53C
    MOVS R1, #1
    ADD.W R5, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R5, R0
    MOV.W R8, R5,ASR#3
    ADD.W R9, R8, #4
    MOV R0, R9
    BL sub_17928
    ASRS R3, R5, #0x1B
    MOV R7, R0
    STRB R3, [R0]
    STRB.W R8, [R0,#3]
    ASRS R3, R5, #0x13
    ADD.W R11, R0, #4
    ASRS R5, R5, #0xB
    STRB R3, [R0,#1]
    STRB R5, [R0,#2]
    CMP.W R8, #0
    BEQ loc_1FFD6
loc_1FFBC:
    ADD.W R4, R8, #0xFFFFFFFF
    MOV R5, R11
loc_1FFC2:
    MOV R1, R4
    LDR R0, [R6,#0x10]
    BL sub_1C5F0
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R5],#1
    BNE loc_1FFC2
loc_1FFD4:
    ADD R11, R8
loc_1FFD6:
    ADD.W R3, R7, R9
    CMP R11, R3
    BNE loc_1FFE8
loc_1FFDE:
    STR.W R9, [R10]
    MOV R0, R7
    POP.W {R3-R11,PC}
loc_1FFE8:
    MOVW R1, #0x501C
    MOVW R0, #0x5028
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDssPrivateBlob
    MOVW R2, #0x16D
    BLX __assert_fail
```
Output:```json
[
    "Copies the contents of the source pointer to the destination pointer."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
bigadd:
loc_1CC24:
    PUSH.W {R3-R9,LR}
    MOV R5, R0
    LDR R3, [R0]
    MOV R6, R1
    LDR R4, [R1]
    CMP R4, R3
    IT 
    MOVLT R4, R3
    ADDS R7, R4, #1
    MOV R0, R7
    BL sub_1BA70
    CMP R7, #0
    MOV R9, R0
    BLE loc_1CC9C
loc_1CC44:
    MOV.W R8, #0
    ADD.W R12, R4, #2
    MOV R2, R8
    MOV LR, R0
    MOVS R3, #1
loc_1CC52:
    LDR R1, [R5]
    MOVS R0, #0
    LDR R7, [R6]
    MOVS R4, #0
    CMP R1, R3
    MOV.W R1, #0
    IT 
    LDRGE.W R0, [R5,R3,LSL#2]
    CMP R7, R3
    IT 
    LDRGE.W R4, [R6,R3,LSL#2]
    ADDS.W R0, R0, R8
    ADC.W R1, R1, #0
    ADDS R0, R0, R4
    STR.W R0, [LR,#4]!
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R2
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R12
    MOV R8, R1
    BNE loc_1CC52
loc_1CC92:
    STR.W R2, [R9]
    MOV R0, R9
    POP.W {R3-R9,PC}
loc_1CC9C:
    MOVS R2, #0
    B loc_1CC92
```
Output:[
    "Calculate the ECDSA signature of a message",
    "Store the resulting signature in a buffer"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
openssh_pem_write:
loc_1541C:
    MOV R3, #0x34FE0
    CMP R0, R3
    BEQ.W loc_15794
loc_1542A:
    MOVW R3, #0x55F8
    MOVW R2, #0x55B0
    MOVT.W R3, #3
    MOVT.W R2, #3
    CMP R0, R2
    IT 
    CMPNE R0, R3
    MOV R2, #0x35634
    ITE 
    MOVEQ R3, #1
    MOVNE R3, #0
    CMP R0, R2
    IT 
    ORREQ.W R3, R3, #1
    CMP R3, #0
    BEQ.W loc_15B68
loc_1545C:
    ADD R1, SP, #0x158+n
    BL sub_238F4
    LDR R4, [R4,#4]
    LDR R2, [SP,#0x158+var_130]
    MOVS R3, #0
    MOVS R1, #4
    LDR R4, [R4,#4]
    SUBS R2, #4
    LDR R7, [R4,#0xC]
    ADDS R7, #7
    LSRS R7, R7, #3
    LSLS R7, R7, #1
    ADD.W R8, R7, #2
    MOV R6, R0
    MOV R0, R3
    BL sub_13E40
    LDR R4, [SP,#0x158+var_130]
    MOVS R3, #0
    LDR R2, [SP,#0x158+n]
    MOVS R1, #6
    ADD R4, R0
    MOV R0, R3
    BL sub_13E40
    LDR R2, [SP,#0x158+n]
    MOVS R1, #0
    MOVS R3, #0xA0
    SUBS R4, #1
    ADD R2, R0
    MOV R0, R1
    BL sub_13E40
    MOVS R3, #0
    LDR R2, [SP,#0x158+n]
    MOVS R1, #6
    ADD R4, R0
    MOV R0, R3
    BL sub_13E40
    MOVS R3, #0
    MOV R2, R8
    MOVS R1, #3
    LDR R5, [SP,#0x158+n]
    ADD R4, R0
    MOV R0, R3
    BL sub_13E40
    MOVS R3, #0xA0
    MOVS R1, #1
    ADD R5, R4
    ADD.W R2, R8, R0
    MOVS R0, #0
    BL sub_13E40
    MOVS R3, #0
    MOV R2, R8
    MOVS R1, #3
    ADD R5, R0
    MOV R0, R3
    BL sub_13E40
    MOVS R3, #0x20
    MOVS R1, #0x10
    ADD R5, R0
    MOVS R0, #0
    ADD R5, R8
    MOV R2, R5
    BL sub_13E40
    MOVS R1, #1
    ADD.W R9, R5, R0
    MOV R0, R9
    BL sub_17928
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_15B30
loc_15502:
    MOVS R3, #0x20
    MOV R2, R5
    MOVS R1, #0x10
    BL sub_13E40
    ADDS R3, R4, R0
    BEQ loc_1551C
loc_15510:
    MOVS R2, #2
    STRB R2, [R4,R0]
    ADDS R2, R3, #1
    ITT 
    MOVNE R2, #1
    STRBNE R2, [R3,#1]
loc_1551C:
    MOV.W R2, #1
    STRB R2, [R3,#2]
    LDR R2, [SP,#0x158+var_130]
    ADDS R5, R0, #3
    ADDS R0, R4, R5
    MOVS R3, #0
    SUBS R2, #4
    MOVS R1, #4
    BL sub_13E40
    LDR R3, [SP,#0x158+var_158]
    LDR R2, [SP,#0x158+var_130]
    MOV.W R10, #0
    ADDS R1, R3, #4
    STR.W R10, [SP,#0x158+var_144]
    SUBS R2, #4
    MOVW R3, #0x28C
    STR.W R10, [SP,#0x158+var_150]
    MOVT.W R3, #3
    STR R3, [SP,#0x158+var_13C]
    MOV R3, #0x302AC
    STR R3, [SP,#0x158+var_140]
    ADDS R7, #1
    ADD R5, R0
    ADDS R0, R4, R5
    BLX memcpy
    LDR R1, [SP,#0x158+var_130]
    MOV R3, R10
    LDR R2, [SP,#0x158+n]
    SUB.W LR, R1, #4
    MOV R0, R10
    MOVS R1, #6
    ADD R5, LR
    BL sub_13E40
    ADD.W LR, R4, R5
    LDR R2, [SP,#0x158+n]
    MOVS R3, #0xA0
    MOV R1, R10
    ADD R2, R0
    MOV R0, LR
    BL sub_13E40
    MOV R3, R10
    LDR R2, [SP,#0x158+n]
    MOVS R1, #6
    ADD R5, R0
    ADDS R0, R4, R5
    BL sub_13E40
    MOV R1, R6
    LDR R2, [SP,#0x158+n]
    ADD R5, R0
    ADDS R0, R4, R5
    BLX memcpy
    MOV R3, R10
    MOV R2, R8
    MOVS R1, #3
    MOV R0, R10
    LDR R6, [SP,#0x158+n]
    BL sub_13E40
    MOVS R1, #1
    ADD R5, R6
    MOVS R3, #0xA0
    ADDS R6, R4, R5
    ADD.W R2, R8, R0
    MOV R0, R6
    BL sub_13E40
    MOV R2, R8
    MOV R3, R10
    MOVS R1, #3
    ADD R5, R0
    ADDS R0, R4, R5
    BL sub_13E40
    MOV R2, R7
    ADD.W R1, R11, #0x27
    ADD R0, R5
    ADDS R3, R0, #1
    STRB.W R10, [R4,R0]
    ADDS R0, R4, R3
    ADDS R5, R3, R7
    BLX memcpy
    LDR R3, [SP,#0x158+s]
    CMP R3, #0
    BEQ.W loc_15908
loc_155F0:
    ADD.W R6, R9, #8
    MOVS R1, #1
    BIC.W R6, R6, #7
    MOV R0, R6
    BL sub_17928
    MOV R2, R9
    MOV R1, R4
    MOV R7, R0
    BLX memcpy
    MOV R1, R9
    MOV R0, R4
    BL sub_17E64
    MOV R0, R4
    BL sub_17E14
    CMP R5, R9
    BNE.W loc_15B4E
loc_1561E:
    CMP R5, R6
    ITTTT 
    SUBLT R3, R6, R5
    ADDLT R2, R7, R6
    ADDLT R5, R5, R7
    UXTBLT R3, R3
    BGE loc_15634
loc_1562C:
    STRB.W R3, [R5],#1
    CMP R2, R5
    BNE loc_1562C
loc_15634:
    ADDW R4, SP, #0x158+var_55
    ADDW R8, SP, #0x158+var_4D
    MOV R5, R4
loc_1563E:
    BL sub_272E8
    STRB.W R0, [R5,#1]!
    CMP R8, R5
    BNE loc_1563E
loc_1564A:
    ADD R0, SP, #0x158+var_B4
    BL sub_23A78
    LDR R5, [SP,#0x158+s]
    MOV R0, R5
    BLX strlen
    MOV R1, R5
    MOV R2, R0
    ADD R0, SP, #0x158+var_B4
    BL sub_23AAC
    MOVS R2, #8
    ADD R0, SP, #0x158+var_B4
    ADD R1, SP, #0x158+var_54
    BL sub_23AAC
    ADD R1, SP, #0x158+var_B4
    ADD R0, SP, #0x158+var_4C
    BL sub_242FC
    ADD R0, SP, #0x158+var_B4
    BL sub_23A78
    ADD R1, SP, #0x158+var_4C
    MOVS R2, #0x10
    ADD R0, SP, #0x158+var_B4
    BL sub_23AAC
    MOV R0, R5
    BLX strlen
    MOV R1, R5
    MOV R2, R0
    ADD R0, SP, #0x158+var_B4
    BL sub_23AAC
    MOVS R2, #8
    ADD R1, SP, #0x158+var_54
    ADD R0, SP, #0x158+var_B4
    BL sub_23AAC
    ADD R1, SP, #0x158+var_B4
    ADD R0, SP, #0x158+var_3C
    BL sub_242FC
    MOV R3, R6
    MOV R2, R7
    ADD R1, SP, #0x158+var_54
    ADD R0, SP, #0x158+var_4C
    BL sub_1F93C
    ADD R0, SP, #0x158+var_B4
    MOVS R1, #0x5C
    BL sub_17E64
    ADD R0, SP, #0x158+var_4C
    MOVS R1, #0x20
    BL sub_17E64
    LDR R0, [SP,#0x158+var_14C]
    MOVW R1, #0x30C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_2CC3C
    MOV R5, R0
    CBZ R0, loc_1573A
loc_156D6:
    MOV R1, R5
    LDR R0, [SP,#0x158+var_140]
    BLX fputs
    MOV R3, R5
    MOVW R0, #0x31C
    MOVS R2, #0x2E
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOV R9, #0x30310
loc_156F8:
    LDRB.W R3, [R4,#1]!
    MOV R2, R9
    MOVS R1, #1
    MOV R0, R5
    BLX __fprintf_chk
    CMP R4, R8
    BNE loc_156F8
loc_1570A:
    MOVW R0, #0x318
    MOV R3, R5
    MOVT.W R0, #3
    MOVS R2, #2
    MOVS R1, #1
    BLX fwrite
loc_1571C:
    MOVS R3, #0x40
    MOV R2, R6
    MOV R0, R5
    MOV R1, R7
    BL sub_26678
    MOV R1, R5
    LDR R0, [SP,#0x158+var_13C]
    BLX fputs
    MOV R0, R5
    BLX fclose
    MOVS R5, #1
    CBZ R7, loc_15748
loc_1573A:
    MOV R0, R7
    MOV R1, R6
    BL sub_17E64
    MOV R0, R7
    BL sub_17E14
loc_15748:
    LDR R4, [SP,#0x158+var_150]
    CBZ R4, loc_1575A
loc_1574C:
    MOV R0, R4
    LDR R1, [SP,#0x158+var_144]
    BL sub_17E64
    MOV R0, R4
    BL sub_17E14
loc_1575A:
    LDR R4, [SP,#0x158+var_158]
    CBZ R4, loc_1576C
loc_1575E:
    MOV R0, R4
    LDR R1, [SP,#0x158+var_130]
    BL sub_17E64
    MOV R0, R4
    BL sub_17E14
loc_1576C:
    CMP.W R11, #0
    BEQ loc_15780
loc_15772:
    MOV R0, R11
    LDR R1, [SP,#0x158+var_134]
    BL sub_17E64
    MOV R0, R11
    BL sub_17E14
loc_15780:
    LDR R3, [SP,#0x158+var_148]
    MOV R0, R5
    LDR R2, [SP,#0x158+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_15B4A
loc_1578E:
    ADD SP, SP, #0x134
    POP.W {R4-R11,PC}
loc_15794:
    LDRB.W R3, [R11,#1]
    ADD.W R9, SP, #0x158+var_124
    LDRB.W R1, [R11]
    ADD.W R8, SP, #0x158+var_11C
    LDRB.W R0, [R11,#2]
    MOV R2, R9
    LDRB.W R4, [R11,#3]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    LDR R1, [SP,#0x158+var_134]
    ORRS R4, R3
    ADD R7, SP, #0x158+var_114
    ORR.W R4, R4, R0,LSL#8
    ADD R6, SP, #0x158+var_10C
    ADDS R4, #4
    ADD R5, SP, #0x158+n
    SUBS R1, R1, R4
    ADD.W R0, R11, R4
    BL sub_14004
    LDR R1, [SP,#0x158+var_134]
    MOV R2, R8
    ADD R4, R0
    SUBS R1, R1, R4
    ADD.W R0, R11, R4
    BL sub_14004
    LDR R1, [SP,#0x158+var_134]
    MOV R2, R7
    ADD R4, R0
    SUBS R1, R1, R4
    ADD.W R0, R11, R4
    BL sub_14004
    LDR R1, [SP,#0x158+var_134]
    MOV R2, R6
    ADD R0, R4
    SUBS R1, R1, R0
    ADD R0, R11
    BL sub_14004
    MOV R2, R5
    LDR R1, [SP,#0x158+var_130]
    LDR R0, [SP,#0x158+var_158]
    BL sub_14004
    LDR R3, [SP,#0x158+var_10C]
    CMP R3, #0
    BEQ.W loc_15B82
loc_1580E:
    LDR R3, [SP,#0x158+n]
    CMP R3, #0
    BEQ.W loc_15B82
loc_15816:
    LDM.W R9, {R0,R1}
    ADD R2, SP, #0x158+var_F4
    ADD R3, SP, #0x158+var_EC
    ADD R4, SP, #0x158+var_E4
    MOV.W LR, #0
    ADD.W R10, SP, #0x158+var_58
    STM.W R2, {R0,R1}
    ADD R2, SP, #0x158+var_DC
    LDM.W R8, {R0,R1}
    MOV.W R8, #6
    STRB.W LR, [SP,#0x158+var_58]
    STR.W LR, [SP,#0x158+var_144]
    STM.W R3, {R0,R1}
    ADD R3, SP, #0x158+var_D4
    LDM.W R7, {R0,R1}
    MOVW R7, #0x248
    STR.W LR, [SP,#0x158+var_150]
    MOVT.W R7, #3
    STR.W R10, [SP,#0x158+var_FC]
    STM.W R4, {R0,R1}
    MOVW R1, #0x268
    MOV R4, R1
    LDM.W R6, {R0,R1}
    MOVT.W R4, #3
    STR R7, [SP,#0x158+var_13C]
    STR R4, [SP,#0x158+var_140]
    STM.W R2, {R0,R1}
    LDM.W R5, {R0,R1}
    STM.W R3, {R0,R1}
    MOVS R3, #1
    STR R3, [SP,#0x158+var_F8]
loc_1587E:
    ADD R6, SP, #0x158+var_F0
    ADD R3, SP, #0x158+var_FC
    ADD.W R8, R3, R8,LSL#3
    MOVS R7, #1
    ADD.W R8, R8, #0xC
    MOV R4, R6
    MOVS R5, #0
    B loc_15896
loc_15892:
    LDR.W R7, [R4,#-8]
loc_15896:
    MOVS R3, #0
    MOV R2, R7
    MOV R0, R3
    MOVS R1, #2
    BL sub_13E40
    ADDS R4, #8
    CMP R4, R8
    ADD R0, R5
    ADD.W R5, R0, R7
    BNE loc_15892
loc_158AE:
    MOV R2, R5
    MOVS R3, #0x20
    MOVS R1, #0x10
    MOVS R0, #0
    BL sub_13E40
    MOVS R1, #1
    MOV R7, R1
    ADD.W R9, R5, R0
    MOV R0, R9
    BL sub_17928
    MOV R2, R5
    MOVS R3, #0x20
    MOVS R1, #0x10
    MOV R4, R0
    BL sub_13E40
    MOV R5, R0
    B loc_158E0
loc_158D8:
    LDR.W R7, [R6,#-8]
    LDR.W R10, [R6,#-0xC]
loc_158E0:
    MOVS R3, #0
    MOV R2, R7
    MOVS R1, #2
    ADDS R0, R4, R5
    BL sub_13E40
    ADDS R6, #8
    MOV R1, R10
    MOV R2, R7
    ADD R5, R0
    ADDS R0, R4, R5
    ADD R5, R7
    BLX memcpy
    CMP R6, R8
    BNE loc_158D8
loc_15900:
    LDR R3, [SP,#0x158+s]
    CMP R3, #0
    BNE.W loc_155F0
loc_15908:
    LDR R0, [SP,#0x158+var_14C]
    MOVW R1, #0x30C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_2CC3C
    MOV R5, R0
    CBZ R0, loc_1592A
loc_1591C:
    LDR R0, [SP,#0x158+var_140]
    MOV R1, R5
    MOV R7, R4
    MOV R6, R9
    BLX fputs
    B loc_1571C
loc_1592A:
    MOV R7, R4
    MOV R6, R9
    LDR R5, [SP,#0x158+s]
    CMP R7, #0
    BNE.W loc_1573A
loc_15936:
    B loc_15748
loc_15938:
    LDRB.W R3, [R11,#1]
    ADD R2, SP, #0x158+var_124
    LDRB.W R1, [R11]
    ADD.W R9, SP, #0x158+n
    LDRB.W R0, [R11,#2]
    LDRB.W R4, [R11,#3]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    LDR R1, [SP,#0x158+var_134]
    ORRS R4, R3
    ORR.W R4, R4, R0,LSL#8
    ADDS R4, #4
    SUBS R1, R1, R4
    ADD.W R0, R11, R4
    BL sub_14004
    LDR R1, [SP,#0x158+var_134]
    ADD R2, SP, #0x158+var_12C
    ADD R0, R4
    SUBS R1, R1, R0
    ADD R0, R11
    BL sub_14004
    LDR R5, [SP,#0x158+var_158]
    ADD R2, SP, #0x158+var_11C
    LDR R1, [SP,#0x158+var_130]
    MOV R0, R5
    BL sub_14004
    LDR R1, [SP,#0x158+var_130]
    ADD R2, SP, #0x158+var_114
    MOV R4, R0
    ADDS R0, R5, R0
    SUBS R1, R1, R4
    BL sub_14004
    LDR R1, [SP,#0x158+var_130]
    ADD R2, SP, #0x158+var_10C
    ADD R4, R0
    SUBS R1, R1, R4
    ADDS R0, R5, R4
    BL sub_14004
    LDR R1, [SP,#0x158+var_130]
    MOV R2, R9
    ADD R0, R4
    SUBS R1, R1, R0
    ADD R0, R5
    BL sub_14004
    LDR R3, [SP,#0x158+var_124]
    CMP R3, #0
    BEQ.W loc_15B16
loc_159B4:
    LDR R3, [SP,#0x158+n]
    CMP R3, #0
    BEQ.W loc_15B16
loc_159BC:
    LDR R1, [SP,#0x158+var_118]
    LDR R0, [SP,#0x158+var_11C]
    BL sub_1C3C4
    LDR R1, [SP,#0x158+var_110]
    MOV R7, R0
    LDR R0, [SP,#0x158+var_114]
    BL sub_1C3C4
    LDR R1, [SP,#0x158+var_108]
    MOV R6, R0
    LDR R0, [SP,#0x158+var_10C]
    BL sub_1C3C4
    MOV R8, R0
    MOV R0, R6
    BL sub_1C380
    MOV R0, R8
    BL sub_1C380
    MOV R1, R6
    MOV R0, R7
    BL sub_1CF1C
    MOV R1, R8
    MOV R5, R0
    MOV R0, R7
    BL sub_1CF1C
    MOV R4, R0
    MOV R0, R7
    BL sub_1C114
    MOV R0, R6
    BL sub_1C114
    MOV R0, R8
    BL sub_1C114
    MOV R0, R5
    BL sub_1C53C
    ADD.W R6, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R6, R0
    MOV R0, R4
    BL sub_1C53C
    ASRS R6, R6, #3
    MOVS R1, #1
    ADD.W R7, R0, #0xF
    ADDS R0, #8
    IT 
    MOVMI R0, R7
    ASRS R7, R0, #3
    ADDS R3, R6, R7
    STR R3, [SP,#0x158+var_144]
    MOV R0, R3
    BL sub_17928
    CMP R6, #0
    IT 
    ADDGT.W R10, R6, #0xFFFFFFFF
    MOV R3, R0
    STR R0, [SP,#0x158+var_150]
    ADD R3, R6
    IT 
    LDRGT.W R8, [SP,#0x158+var_150]
    STR R3, [SP,#0x158+var_140]
    BLE loc_15A6A
loc_15A54:
    MOV R1, R10
    MOV R0, R5
    BL sub_1C5F0
    ADD.W R10, R10, #0xFFFFFFFF
    CMP.W R10, #0xFFFFFFFF
    STRB.W R0, [R8],#1
    BNE loc_15A54
loc_15A6A:
    CMP R7, #0
    ITT 
    ADDGT.W R10, R7, #0xFFFFFFFF
    LDRGT.W R8, [SP,#0x158+var_140]
    BLE loc_15A8E
loc_15A78:
    MOV R1, R10
    MOV R0, R4
    BL sub_1C5F0
    ADD.W R10, R10, #0xFFFFFFFF
    CMP.W R10, #0xFFFFFFFF
    STRB.W R0, [R8],#1
    BNE loc_15A78
loc_15A8E:
    MOV R0, R5
    ADD.W R10, SP, #0x158+var_58
    BL sub_1C114
    MOV R0, R4
    BL sub_1C114
    ADD R3, SP, #0x158+var_12C
    LDR R2, [SP,#0x158+var_150]
    ADD R4, SP, #0x158+var_EC
    LDM.W R3, {R0,R1}
    ADD R3, SP, #0x158+var_F4
    STR R6, [SP,#0x158+var_C8]
    ADD R6, SP, #0x158+var_D4
    STR R2, [SP,#0x158+var_CC]
    ADD R2, SP, #0x158+var_E4
    STM.W R3, {R0,R1}
    ADD R3, SP, #0x158+var_124
    LDR R5, [SP,#0x158+var_140]
    MOV.W R8, #9
    LDM.W R3, {R0,R1}
    ADD R3, SP, #0x158+var_DC
    STR R7, [SP,#0x158+var_C0]
    ADD R7, SP, #0x158+var_BC
    STR R5, [SP,#0x158+var_C4]
    MOVS R5, #1
    STM.W R4, {R0,R1}
    ADD R1, SP, #0x158+var_11C
    STR R5, [SP,#0x158+var_F8]
    MOVS R4, #0
    LDM R1, {R0,R1}
    MOVW R5, #0x204
    STR.W R10, [SP,#0x158+var_FC]
    MOVT.W R5, #3
    STRB.W R4, [SP,#0x158+var_58]
    STM.W R2, {R0,R1}
    ADD R2, SP, #0x158+var_114
    STR R5, [SP,#0x158+var_13C]
    LDM.W R2, {R0,R1}
    MOV R2, #0x30224
    STR R2, [SP,#0x158+var_140]
    STM.W R3, {R0,R1}
    ADD R3, SP, #0x158+var_10C
    LDM.W R3, {R0,R1}
    STM.W R6, {R0,R1}
    LDM.W R9, {R0,R1}
    STM.W R7, {R0,R1}
    B loc_1587E
loc_15B16:
    MOVW R1, #0xE4
    MOVW R0, #0x2CC
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x3D3
    BLX __assert_fail
loc_15B30:
    MOVW R1, #0xE4
    MOVW R0, #0x2F8
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x45D
    BLX __assert_fail
loc_15B4A:
    BLX __stack_chk_fail
loc_15B4E:
    MOVW R1, #0xE4
    MOVW R0, #0x300
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x4A3
    BLX __assert_fail
loc_15B68:
    MOVW R1, #0xE4
    MOVW R0, #0x42FC
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x477
    BLX __assert_fail
loc_15B82:
    MOVW R1, #0xE4
    MOVW R0, #0x2E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x40B
    BLX __assert_fail[
    "Saves the current program counter (SP) and initializes variables.",
    "Swaps the current program counter (SP) with the variable `var_s4`.",
    "Jumps to `loc_423D74` if the value in `var_s4` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x20.",
    "Jumps to `loc_423D10` if the value in `var_s0` is 1.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v0`.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s1` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D5C` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v0`.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D74` if the value in `var_s1` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D5C` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D74` if the value in `var_s1` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D5C` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D74` if the value in `var_s1` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D5C` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with 0x1.",
    "Jumps to `loc_423D38` if the value in `var_s0` is 0.",
    "Swaps the current program counter (SP) with the variable `var_s1`.",
    "Loads the zero value into `v1`.",
    "Swaps the current program counter (SP) with the variable `var_s0`.",
    "Adds the current program counter (SP) with
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp_popen:
loc_568DC:
    IMPORT 
```
Output:[
    "Opens a directory for reading and writing",
    "Returns a file descriptor"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
Optimization: 2
```assembly
__divsi3:
loc_2E208:
    CMP R1, #0
    BEQ.W loc_2E48A
```
Output:[
    "Extracts information from an interactive shell",
    "Uses XOR instruction to toggle the value of edi (the read file descriptor)",
    "Jumps to the _isatty function if edi is zero"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ssh1_bignum_length:
loc_1C570:
    LDR R3, [R0]
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1C5A0
loc_1C578:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1C58E
loc_1C584:
    B loc_1C5A0
loc_1C586:
    LDR.W R2, [R0,R2,LSL#2]
    LSRS R2, R1
    BNE loc_1C5A0
loc_1C58E:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R1, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1C586
loc_1C5A0:
    ADD.W R0, R3, #0xF
    ADDS R3, #8
    IT 
    MOVMI R3, R0
    ASRS R0, R3, #3
    ADDS R0, #2
    BX LR
```
Output:```json
[
    "Subtracts a blob from a private blob",
    "Calls another function to process the blob",
    "Stores the result in the private blob",
    "Releases resources"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
openssh_loadpub:
loc_261DC:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R11, R1
    MOV R10, R2
    STR R3, [SP,#0x30+var_2C]
    BL sub_17D9C
    BL sub_17658
    MOVS R1, #0x20
    MOV R9, R0
    BLX strchr
    CMP R0, #0
    BEQ loc_262F0
loc_261FC:
    ADDS R4, R0, #1
    MOVS R5, #0
    MOVS R1, #0x20
    STRB R5, [R0]
    MOV R0, R4
    BLX strchr
    MOV R8, R0
    CBZ R0, loc_26218
loc_2620E:
    STRB R5, [R0]
    ADDS R0, #1
    BL sub_17954
    MOV R8, R0
loc_26218:
    MOV R0, R4
    MOVS R5, #0
    BLX strlen
    MOVS R1, #1
    LSRS R0, R0, #2
    ADD.W R7, R0, R0,LSL#1
    MOV R0, R7
    BL sub_17928
    MOV R6, R0
    B loc_26244
loc_26232:
    ADDS R3, R5, #2
    CMP R7, R3
    BLE loc_262FE
loc_26238:
    ADDS R1, R6, R5
    MOV R0, R4
    BL sub_17720
    ADDS R4, #4
    ADD R5, R0
loc_26244:
    MOVS R2, #4
    MOVS R1, #0
    MOV R0, R4
    BLX memchr
    CMP R0, #0
    BEQ loc_26232
loc_26252:
    LDRB R3, [R4]
    CBZ R3, loc_26280
loc_26256:
    MOV R4, #0x39158
loc_2625E:
    MOV R0, R9
    BL sub_17E14
    MOV R0, R8
    BL sub_17E14
    MOV R0, R6
    BL sub_17E14
    LDR R3, [SP,#0x30+arg_0]
    CMP R3, #0
    BEQ loc_262E8
loc_26276:
    MOVS R0, #0
    STR R4, [R3]
loc_2627A:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_26280:
    MOV R0, R9
    BLX strlen
    ADDS R3, R0, #3
    CMP R5, R3
    BLE loc_262A4
loc_2628C:
    LDRB R1, [R6,#1]
    LDRB R4, [R6]
    LDRB R3, [R6,#3]
    LSLS R1, R1, #0x10
    LDRB R2, [R6,#2]
    ORR.W R1, R1, R4,LSL#24
    ORRS R3, R1
    ORR.W R3, R3, R2,LSL#8
    CMP R0, R3
    BEQ loc_262AE
loc_262A4:
    MOV R4, #0x39194
    B loc_2625E
loc_262AE:
    MOV R2, R0
    MOV R1, R9
    ADDS R0, R6, #4
    BLX memcmp
    CMP R0, #0
    BNE loc_262A4
loc_262BC:
    CMP.W R11, #0
    BEQ loc_262CC
loc_262C2:
    MOV R0, R9
    BL sub_17954
    STR.W R0, [R11]
loc_262CC:
    CMP.W R10, #0
    BEQ loc_262D6
loc_262D2:
    STR.W R5, [R10]
loc_262D6:
    LDR R3, [SP,#0x30+var_2C]
    CBZ R3, loc_26318
loc_262DA:
    STR.W R8, [R3]
loc_262DE:
    MOV R0, R9
    BL sub_17E14
    MOV R0, R6
    B loc_2627A
loc_262E8:
    LDR R0, [SP,#0x30+arg_0]
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_262F0:
    MOVW R4, #0x9130
    MOV R6, R0
    MOV R8, R0
    MOVT.W R4, #3
    B loc_2625E
loc_262FE:
    MOVW R1, #0x8E40
    MOVW R0, #0x91CC
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshLoadpub
    MOVW R2, #0x426
    BLX __assert_fail
loc_26318:
    MOV R0, R8
    BL sub_17E14
    B loc_262DE
```
Output:[
    "Extracts a value from a register",
    "Loads the value from a specific memory location into the register",
    "Jumps to the specified address",
    "Uses a local variable to store the result"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__imp_realloc:
loc_4C918:
    IMPORT 
```
Output:[
    "Function `ec_generate` is designed to generate a random NIST curve point and a public key.",
    "It uses the `bignum_random_in_range` function to generate random integers for the curve points.",
    "The `freebn` function is used to deallocate memory.",
    "The `safefree` function is used to free resources when they are no longer needed.",
    "The `jalr` instruction is used to jump back to the caller.",
    "The `addiu` instruction is used to increment the stack pointer.",
    "The `lw` instruction is used to load values from memory.",
    "The `sw` instruction is used to store values to memory.",
    "The `la` instruction is used to load a value from a specific address.",
    "The `bal` instruction is used to branch to another location if the condition is true.",
    "The `nop` instruction is used to perform no operations.",
    "The `ret` instruction is used to return from the function."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
abort:
loc_114F4:
    ADR R12, 0x114FC
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(abort_ptr - 0x4B4FC)]!
```
Output:[
    "strncmp",
    "strncpy is an inline assembly function that compares two null-terminated strings and returns the length of the first string that is longer.",
    "The function uses the `strncpy` instruction to copy the first string from memory to a temporary location, then compares it with the second string."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ecdsa_fmtkey:
loc_247EC:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #8
    LDR R6, [R0,#8]
    CMP R6, #0
    BEQ.W loc_24956
loc_247FA:
    LDR R3, [R0,#0xC]
    CMP R3, #0
    BEQ.W loc_24952
loc_24802:
    LDR R3, [R0,#4]
    CMP R3, #0
    BEQ.W loc_24952
loc_2480A:
    MOV R4, R0
    LDR R0, [R3,#4]
    MOVS R5, #7
    CBZ R0, loc_24818
loc_24812:
    BLX strlen
    ADDS R5, R0, #7
loc_24818:
    MOV R0, R6
    BL sub_1F158
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVPL R3, R0
    LDR R0, [R4,#0xC]
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    MOVS R1, #1
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVMI R0, R3
    ADD.W R0, R5, R0,ASR#2
    BL sub_193B8
    LDR R3, [R4,#4]
    LDR R3, [R3,#4]
    MOV R8, R0
    CMP R3, #0
    BEQ loc_24944
loc_24850:
    STR R3, [SP,#0x28+var_28]
    MOV.W R2, #0xFFFFFFFF
    MOVW R3, #0xFCE4
    MOVS R1, #1
    MOVT.W R3, #3
    BLX __sprintf_chk
    ADDS R6, R0, #2
loc_24866:
    MOV R3, #0x3F57C
    ADD.W R2, R8, R0
    LDRH R1, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    STRH.W R1, [R8,R0]
    STRB R3, [R2,#2]
    LDR R0, [R4,#8]
    BL sub_1F158
    ADDS R7, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R7, R0
    ASRS R7, R7, #2
    CMP R7, #0
    IT 
    ADDGT.W R7, R7, #0xFFFFFFFF
    BLE loc_2494E
loc_24896:
    MOVW R5, #0xF5B0
    ADD.W R10, R8, R6
    MOVT.W R5, #3
    MOV R9, R7
loc_248A4:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#8]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB.W R3, [R0,#0x28]
    STRB.W R3, [R10],#1
    BNE loc_248A4
loc_248D0:
    MOV R2, #0x3F580
    ADDS R3, R6, #1
    ADD R6, R7
    LDR R0, [R2]
    ADD R7, R3
    STR.W R0, [R8,R7]
    LDR R0, [R4,#0xC]
    BL sub_1F158
    ADDS R7, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R7, R0
    ASRS R7, R7, #2
    CMP R7, #0
    IT 
    ADDGT.W R7, R7, #0xFFFFFFFF
    BLE loc_2494A
loc_248FE:
    ADD.W R10, R6, #3
    MOV R9, R7
    ADD R10, R8
loc_24906:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R5
    LDRB.W R3, [R3,#0x28]
    STRB.W R3, [R10,#1]!
    BNE loc_24906
loc_24932:
    ADDS R6, #5
    MOV R0, R8
    ADD R8, R6
    MOVS R3, #0
    STRB.W R3, [R8,R7]
loc_2493E:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
loc_24944:
    MOV R0, R3
    MOVS R6, #2
    B loc_24866
loc_2494A:
    MOVS R7, #0
    B loc_248FE
loc_2494E:
    MOVS R7, #0
    B loc_24896
loc_24952:
    MOV R0, R3
    B loc_2493E
loc_24956:
    MOV R0, R6
    B loc_2493E
```
Output:```json
[
    "Reads a private key from a file",
    "Writes the public key to a file",
    "Handles buffer overflow"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
prompt_ensure_result_size:
loc_18868:
    PUSH.W {R4-R9,LR}
    MOV R5, #0x56190
    LDR.W R8, [R0,#0xC]
    SUB SP, SP, #0xD4
    LDR R3, [R5]
    CMP R8, R1
    STR R3, [SP,#0xF0+var_24]
    BLT loc_18890
loc_18882:
    LDR R2, [SP,#0xF0+var_24]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_18928
loc_1888A:
    ADD SP, SP, #0xD4
    POP.W {R4-R9,PC}
loc_18890:
    ADD.W R1, R1, R1,LSL#2
    MOV R7, R0
    ADDS R4, R1, #3
    BICS.W R1, R1, R1,ASR#32
    IT 
    MOVCS R1, R4
    ASRS R4, R1, #2
    ADD.W R4, R4, #0x200
    CMP.W R4, #0x80000000
    BCS loc_188FA
loc_188AC:
    CMP R4, #0
    ITE 
    MOVNE R0, R4
    MOVEQ R0, #1
    BLX malloc
    MOV R9, R0
    CBZ R0, loc_188FA
loc_188BC:
    LDR R6, [R7,#8]
    MOV R2, R8
    MOV R0, R9
    MOV R1, R6
    BLX memcpy
    MOV R0, R6
    CMP.W R8, #0
    BNE loc_188DC
loc_188D0:
    BLX free
loc_188D4:
    STR.W R9, [R7,#8]
    STR R4, [R7,#0xC]
    B loc_18882
loc_188DC:
    MOV R2, R8
    MOVS R1, #0
    MOV R0, R6
    BLX memset
    LDRB R3, [R6]
    CBZ R3, loc_188F2
loc_188EA:
    LDRB.W R3, [R6,#1]!
    CMP R3, #0
    BNE loc_188EA
loc_188F2:
    LDR R0, [R7,#8]
    CMP R0, #0
    BEQ loc_188D4
loc_188F8:
    B loc_188D0
loc_188FA:
    MOV R3, #0x3AE48
    ADD R6, SP, #0xF0+var_EC
    MOV.W R9, #0
    LDM R3, {R0-R3}
    STM R6!, {R0-R2}
    ADD R1, SP, #0xF0+var_EC
    STRH.W R3, [R6],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R6]
    BL sub_12E78
loc_18922:
    LDR.W R8, [R7,#0xC]
    B loc_188BC
loc_18928:
    BLX __stack_chk_fail
```
Output:```json
[
    "Writes a public key to the SSH2 server",
    "Checks for bad keys and returns an error code if found",
    "Handles the SSH2 protocol and data structures"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
SHA512_Simple:
loc_31FA8:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x16C
    LDR R6, =unk_44028
    MOV R10, R1
    STR R2, [SP,#0x190+var_18C]
    MOV R8, R0
    ADD R4, SP, #0x190+var_100
    MOVW R9, #0x6190
    LDM R6!, {R0-R3}
    MOVT.W R9, #5
    CMP.W R10, #0x7F
    MOV.W R5, #0
    LDR.W R7, [R9]
    STM R4!, {R0-R3}
    LDM R6!, {R0-R3}
    STR R7, [SP,#0x190+var_2C]
    STM R4!, {R0-R3}
    LDM R6!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W R6, {R0-R3}
    STM.W R4, {R0-R3}
    STR.W R10, [SP,#0x190+var_3C]
    STR R5, [SP,#0x190+var_40]
    STR R5, [SP,#0x190+var_38]
    STR R5, [SP,#0x190+var_34]
    STR R5, [SP,#0x190+var_30]
    BLE loc_320BC
loc_31FF0:
    SUB.W R3, R10, #0x80
    STR R3, [SP,#0x190+var_184]
    ADD.W R10, R8, #0x80
    ADD R7, SP, #0x190+dest
    LSRS R3, R3, #7
    ADD R4, SP, #0x190+var_80
    ADDS R6, R3, #2
    STR R3, [SP,#0x190+var_188]
    ADD.W R6, R8, R6,LSL#7
loc_32008:
    MOVS R2, #0x80
    SUB.W R1, R10, #0x80
    MOV R0, R7
    BLX memcpy
    ADD.W LR, SP, #0x190+var_100
    ADD.W R12, SP, #0x190+var_180
loc_3201C:
    LDRB.W R2, [LR,#0x45]
    ADD.W LR, LR, #8
    LDRB.W R1, [LR,#0x3C]
    ADD.W R12, R12, #8
    LDRB.W R3, [LR,#0x39]
    LDRB.W R0, [LR,#0x38]
    LSLS R2, R2, #0x10
    ORR.W R2, R2, R1,LSL#24
    LDRB.W R1, [LR,#0x3F]
    LSLS R3, R3, #0x10
    ORR.W R11, R3, R0,LSL#24
    ORRS R2, R1
    LDRB.W R0, [LR,#0x3E]
    LDRB.W R3, [LR,#0x3B]
    LDRB.W R1, [LR,#0x3A]
    CMP R4, LR
    ORR.W R3, R11, R3
    ORR.W R2, R2, R0,LSL#8
    STR.W R2, [R12,#-4]
    ORR.W R3, R3, R1,LSL#8
    STR.W R3, [R12,#-8]
    BNE loc_3201C
loc_3206A:
    ADD.W R10, R10, #0x80
    ADD R1, SP, #0x190+var_180
    ADD R0, SP, #0x190+var_100
    BL sub_30838
    CMP R6, R10
    STR R5, [SP,#0x190+var_40]
    BNE loc_32008
loc_3207C:
    LDR R2, [SP,#0x190+var_188]
    LDR R1, [SP,#0x190+var_184]
    MOV R3, R2
    ADDS R3, #1
    SUB.W R10, R1, R2,LSL#7
    ADD.W R8, R8, R3,LSL#7
loc_3208C:
    MOVS R3, #0x94
    MOV R2, R10
    MOV R1, R8
    MOV R0, R7
    BLX __memcpy_chk
    LDR R1, [SP,#0x190+var_18C]
    ADD R0, SP, #0x190+var_100
    STR.W R10, [SP,#0x190+var_40]
    BL sub_31B84
    ADD R0, SP, #0x190+var_100
    MOVS R1, #0xD4
    BL sub_194E4
    LDR R2, [SP,#0x190+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_320C0
loc_320B6:
    ADD SP, SP, #0x16C
    POP.W {R4-R11,PC}
loc_320BC:
    ADD R7, SP, #0x190+dest
    B loc_3208C
loc_320C0:
    BLX __stack_chk_fail
```
Output:[
    "Initialize libc start main function",
    "Load the main function from the start main plt",
    "Set the initial counter value",
    "Jump to the start main function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly

```
Output:```json
[
    "Loads two pointers (p1 and p2) from the stack to the memory locations pointed to by the arguments."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ec_public_0:
loc_23298:
    MOV R1, R4
    MOV R0, R6
    BL sub_1C5F0
    ADDS R4, #1
    MOVS R2, #1
    ADD.W R1, SP, #0x138+var_131
    STRB.W R0, [SP,#0x138+var_131]
    ADD R0, SP, #0x138+var_130
    BL sub_296A0
    CMP R5, R4
    BNE loc_23298
loc_232B6:
    ADD R0, SP, #0x138+var_130
    ADD R1, SP, #0x138+var_5C
    BL sub_2A5E8
    LDRB.W R3, [SP,#0x138+var_3D]
    LDRB.W R2, [SP,#0x138+var_5C]
    MOVS R1, #0x20
    ADD R0, SP, #0x138+var_5C
    AND.W R3, R3, #0x7F
    ORR.W R3, R3, #0x40
    BIC.W R2, R2, #7
    STRB.W R3, [SP,#0x138+var_3D]
    STRB.W R2, [SP,#0x138+var_5C]
    BL sub_1C460
    MOV R1, R0
    MOV R4, R0
    ADD.W R0, R8, #0x1C
    BL sub_22750
    MOV R5, R0
    MOV R0, R4
    BL sub_1C114
    LDR R2, [SP,#0x138+var_1C]
    LDR R3, [R7]
    MOV R0, R5
    CMP R2, R3
    BNE loc_23306
loc_23300:
    ADD SP, SP, #0x120
    POP.W {R4-R8,PC}
loc_23306:
    BLX __stack_chk_fail
```
Output:```json
[
    "MD5Simple: MD5 hash computation",
    "MD5Simple: Variable initialization and usage",
    "MD5Simple: Data manipulation and comparison",
    "MD5Simple: Memory access and copying",
    "MD5Simple: Stack management and error handling"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
hmacsha256_genresult:
loc_293A4:
    PUSH {R4-R6,LR}
    MOV R4, #0x4C188
    SUB SP, SP, #0x90
    MOV R5, R0
    MOVS R2, #0x6C
    LDR R3, [R4]
    MOV R6, R1
    MOV R0, SP
    ADD.W R1, R5, #0xD8
    STR R3, [SP,#0xA0+var_14]
    BLX memcpy
    MOV R0, SP
    ADD R1, SP, #0xA0+var_34
    BL sub_292BC
    ADD.W R1, R5, #0x6C
    MOVS R2, #0x6C
    MOV R0, SP
    BLX memcpy
    MOVS R2, #0x20
    ADD R1, SP, #0xA0+var_34
    MOV R0, SP
    BL sub_29074
    MOV R1, R6
    MOV R0, SP
    BL sub_292BC
    LDR R2, [SP,#0xA0+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_293F6
loc_293F2:
    ADD SP, SP, #0x90
    POP {R4-R6,PC}
loc_293F6:
    BLX __stack_chk_fail
```
Output:[
    "Locate the `errno_location` symbol in the assembly code.",
    "This symbol is typically used to store the current error number."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
getrusage:
loc_114C0:
    ADR R12, 0x114C8
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(getrusage_ptr - 0x4B4C8)]!
```
Output:```json
[
    "Creates a key for a given set of arguments.",
    "Stores the key in registers.",
    "Swaps registers.",
    "Moves registers back to their original positions.",
    "Calls `ssh1_read_bignum` to perform the operation.",
    "Jumps to the next instruction after the operation."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ec_ed_alg_and_curve_by_bits:
loc_23960:
    CMP.W R0, #0x100
    BEQ loc_2396C
loc_23966:
    MOVS R3, #0
    MOV R0, R3
    BX LR
loc_2396C:
    LDR R3, =off_35670
    PUSH {R4,LR}
    MOV R4, R1
    STR R3, [R2]
    BL sub_22674
    MOVS R3, #1
    STR R0, [R4]
    MOV R0, R3
    POP {R4,PC}
```
Output:[
    "Opens a file",
    "Returns the file descriptor",
    "Checks for errors",
    "Handles file operations"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
ssh2_userkey_loadpub:
loc_26324:
    PUSH.W {R4-R11,LR}
    MOV R4, #0x4C188
    SUB SP, SP, #0x44
    MOV R9, R1
    MOV R10, R2
    LDR R6, [R4]
    MOVW R1, #0x8DAC
    MOVS R2, #0
    MOVT.W R1, #3
    MOV R8, R3
    LDR R5, [SP,#0x68+arg_0]
    STR R6, [SP,#0x68+var_2C]
    BL sub_2CC3C
    MOV R7, R0
    CBZ R0, loc_26394
loc_26350:
    BL sub_256DC
    CMP R0, #9
    BEQ loc_2644E
loc_26358:
    CMP R0, #0xA
    BEQ.W loc_26466
loc_2635E:
    CMP R0, #3
    BEQ loc_263B6
loc_26362:
    MOV.W R9, #0
    MOV R6, #0x38F1C
    MOV R11, R9
loc_26370:
    MOV R0, R7
    BLX fclose
    CBZ R5, loc_2637A
loc_26378:
    STR R6, [R5]
loc_2637A:
    CMP.W R9, #0
    BNE loc_263A6
loc_26380:
    MOVS R6, #0
loc_26382:
    LDR R2, [SP,#0x68+var_2C]
    MOV R0, R6
    LDR R3, [R4]
    CMP R2, R3
    BNE.W loc_264EE
loc_2638E:
    ADD SP, SP, #0x44
    POP.W {R4-R11,PC}
loc_26394:
    CMP R5, #0
    BEQ loc_26380
loc_26398:
    MOVW R6, #0x8DB0
    MOV R9, R7
    MOVT.W R6, #3
    MOV R11, R7
    B loc_26378
loc_263A6:
    MOV R0, R11
    BL sub_17E14
    MOVS R3, #0
    MOV R6, R3
    STR.W R3, [R8]
    B loc_26382
loc_263B6:
    MOV R0, R7
    ADD R1, SP, #0x68+s1
    BL sub_24F80
    CBZ R0, loc_2642C
loc_263C0:
    MOVW R1, #0x8F3C
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_263E0
loc_263D0:
    MOVW R1, #0x8F54
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_2642C
loc_263E0:
    MOV R0, R7
    BL sub_250A4
    MOV R6, R0
    CBZ R0, loc_2641C
loc_263EA:
    BLX strlen
    MOV R1, R6
    BL sub_2562C
    MOV R11, R0
    STR R0, [SP,#0x68+var_60]
    MOV R0, R6
    BL sub_17E14
    MOV R3, R11
    CBZ R3, loc_2641C
loc_26402:
    ADD R1, SP, #0x68+s1
    MOV R0, R7
    BL sub_24F80
    CBZ R0, loc_2641C
loc_2640C:
    MOVW R1, #0x8F6C
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_2647E
loc_2641C:
    MOV.W R9, #0
    MOVW R6, #0x8D68
    MOV R11, R9
    MOVT.W R6, #3
    B loc_26370
loc_2642C:
    MOVW R1, #0x8E84
    ADD R0, SP, #0x68+s1
    MOVS R2, #0x14
    MOVT.W R1, #3
    BLX strncmp
    CMP R0, #0
    BNE loc_26362
loc_26440:
    MOVW R6, #0x8F00
    MOV R9, R0
    MOVT.W R6, #3
    MOV R11, R0
    B loc_26370
loc_2644E:
    STR R5, [SP,#0x68+var_68]
    MOV R3, R8
    MOV R2, R10
    MOV R1, R9
    MOV R0, R7
    BL sub_25EE8
    MOV R6, R0
    MOV R0, R7
    BLX fclose
    B loc_26382
loc_26466:
    STR R5, [SP,#0x68+var_68]
    MOV R3, R8
    MOV R2, R10
    MOV R1, R9
    MOV R0, R7
    BL sub_261DC
    MOV R6, R0
    MOV R0, R7
    BLX fclose
    B loc_26382
loc_2647E:
    MOV R0, R7
    BL sub_250A4
    CMP R0, #0
    BEQ loc_2641C
loc_26488:
    BL sub_17E14
    ADD R1, SP, #0x68+s1
    MOV R0, R7
    BL sub_24F80
    CMP R0, #0
    BEQ loc_2641C
loc_26498:
    MOVW R1, #0xFC
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_2641C
loc_264AA:
    MOV R0, R7
    BL sub_250A4
    MOV R11, R0
    CMP R0, #0
    BEQ loc_2641C
loc_264B6:
    CMP.W R8, #0
    BEQ loc_264F2
loc_264BC:
    STR.W R0, [R8]
loc_264C0:
    ADD R1, SP, #0x68+s1
    MOV R0, R7
    BL sub_24F80
    CBZ R0, loc_264DA
loc_264CA:
    MOVW R1, #0x8F78
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_264F8
loc_264DA:
    MOVS.W R9, R8
    MOV R6, #0x38D68
    IT 
    MOVNE.W R9, #1
    B loc_26370
loc_264EE:
    BLX __stack_chk_fail
loc_264F2:
    BL sub_17E14
    B loc_264C0
loc_264F8:
    STR R0, [SP,#0x68+endptr]
    MOV R0, R7
    BL sub_250A4
    LDR R1, [SP,#0x68+endptr]
    MOV R6, R0
    CMP R0, #0
    BEQ loc_264DA
loc_26508:
    MOVS R2, #0xA
    BLX strtol
    STR R0, [SP,#0x68+endptr]
    MOV R0, R6
    BL sub_17E14
    LDR R1, [SP,#0x68+endptr]
    ADD R2, SP, #0x68+var_58
    MOV R0, R7
    BL sub_11594
    MOV R6, R0
    CMP R0, #0
    BEQ loc_264DA
loc_26526:
    MOV R0, R7
    BLX fclose
    CMP.W R10, #0
    BEQ loc_26538
loc_26532:
    LDR R3, [SP,#0x68+var_58]
    STR.W R3, [R10]
loc_26538:
    CMP.W R9, #0
    BEQ.W loc_26382
loc_26540:
    LDR R3, [SP,#0x68+var_60]
    LDR R0, [R3,#0x30]
    BL sub_17954
    STR.W R0, [R9]
    B loc_26382
```
Output:[
    "Initializes SHA-384 hash state."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__imp___printf_chk:
loc_4C8C8:
    IMPORT 
```
Output:[
    "Reads a public key from a file and writes it to the SSH key file.",
    "Writes the SSH key file to the specified location.",
    "Moves the key from the stack to the registers for further processing."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
__xstat:
loc_11288:
    ADR R12, 0x11290
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(__xstat_ptr - 0x4B290)]!
```
Output:random_add_noise:
loc_2CEC8:
    PUSH.W {R4-R10,LR}
    MOV R4, #0x562CC
    LDR.W R3, [R4,#(dword_567DC - 0x562CC)]
    CMP R3, #0
    BEQ locret_2CF74
loc_2CEDC:
    MOV R6, R0
    LDR.W R0, [R4,#(dword_567D4 - 0x562CC)]
    MOV R5, R1
    RSB.W R2, R0, #0x40
    CMP R1, R2
    ITT 
    ADDLT.W R3, R4, #0x4C8
    ADDLT R0, R0, R3
    BLT loc_2CF62
loc_2CEF4:
    ADD.W R7, R4, #0x4C8
    ADDW R10, R4, #0x4C7
    MOV.W R9, #0
    MOV R8, R7
loc_2CF02:
    MOV R1, R6
    ADD R0, R7
    BLX memcpy
    LDR.W R3, [R4,#(dword_567D4 - 0x562CC)]
    MOV R1, R8
    LDR R0, =byte_56780
    RSB.W R3, R3, #0x40
    ADD R6, R3
    SUBS R5, R5, R3
    BL sub_322B0
    LDR.W R3, [R4,#(dword_5677C - 0x562CC)]
    LDR R1, =(dword_5677C+3)
loc_2CF24:
    ADDS R0, R3, #1
    LDRB.W LR, [R4,R3]
    LDRB.W R2, [R1,#1]!
    CMP.W R0, #0x4B0
    EOR.W R2, LR, R2
    STRB R2, [R4,R3]
    ITE 
    MOVLT R3, R0
    MOVGE R3, #0
    CMP R10, R1
    BNE loc_2CF24
loc_2CF42:
    CMP R3, #0x13
    STR.W R3, [R4,#(dword_5677C - 0x562CC)]
    BGT loc_2CF50
loc_2CF4A:
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2CF78
loc_2CF50:
    CMP R5, #0x3F
    STR.W R9, [R4,#(dword_567D4 - 0x562CC)]
    MOV.W R0, #0
    MOV.W R2, #0x40
    BGT loc_2CF02
loc_2CF60:
    LDR R0, =unk_56794
loc_2CF62:
    MOV R2, R5
    MOV R1, R6
    BLX memcpy
    LDR.W R3, [R4,#(dword_567D4 - 0x562CC)]
    ADD R5, R3
    STR.W R5, [R4,#(dword_567D4 - 0x562CC)]
loc_2CF74:
    POP.W {R4-R10,PC}
loc_2CF78:
    BL sub_2CBB0
    B loc_2CF50
```
Output:[
    "Creates a private pointer in the back chain.",
    "Stores the sender's LR in the sender_lr register.",
    "Adds a constant offset to the sender_lr register.",
    "Calls sub_10011DA8 to process the message.",
    "Loads the sender's LR from the sender_lr register.",
    "Moves the LR to the next frame.",
    "Calls lr."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
SHA256_Bytes:
loc_2FA48:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    LDR R4, [R0,#0x68]
    LDR R3, [R0,#0x64]
    MOV R10, R0
    LDR.W R7, [R9]
    SUB SP, SP, #0x4C
    LDR R0, [R0,#0x60]
    ADD R4, R2
    CMP R2, R4
    IT 
    ADDHI R3, #1
    MOV R5, R2
    MOV R6, R1
    STR.W R4, [R10,#0x68]
    STR.W R3, [R10,#0x64]
    STR R7, [SP,#0x70+n]
    CMP R0, #0
    BNE loc_2FB6E
loc_2FA7C:
    CMP R2, #0x3F
    IT 
    ADDLE.W R11, R10, #0x20
    BLE loc_2FB50
loc_2FA86:
    ADD.W R11, R10, #0x20
    MOV.W R8, #0
loc_2FA8E:
    RSB.W R2, R0, #0x40
    MOV R1, R6
    ADD R0, R11
    BLX memcpy
    LDR.W R7, [R10,#0x2C]
    LDR.W R3, [R10,#0x60]
    MOV R0, R10
    REV.W R12, R7
    LDR.W R4, [R10,#0x20]
    LDR.W R7, [R10,#0x38]
    RSB.W LR, R3, #0x40
    LDR.W R2, [R10,#0x24]
    SUB.W R5, R5, LR
    LDR.W R3, [R10,#0x28]
    REV R4, R4
    REV R2, R2
    STR R4, [SP,#0x70+var_6C]
    STR R2, [SP,#0x70+var_68]
    ADD R6, LR
    LDR.W R4, [R10,#0x30]
    REV.W LR, R7
    LDR.W R2, [R10,#0x34]
    REV R3, R3
    LDR.W R7, [R10,#0x40]
    REV R4, R4
    STR R3, [SP,#0x70+var_64]
    REV R2, R2
    LDR.W R3, [R10,#0x3C]
    ADD R1, SP, #0x70+var_6C
    STR.W R12, [SP,#0x70+var_60]
    REV.W R12, R7
    STR R4, [SP,#0x70+var_5C]
    REV R3, R3
    LDR.W R7, [R10,#0x4C]
    LDR.W R4, [R10,#0x44]
    STR R2, [SP,#0x70+var_58]
    LDR.W R2, [R10,#0x48]
    REV R4, R4
    STR.W LR, [SP,#0x70+var_54]
    REV.W LR, R7
    REV R2, R2
    STR R3, [SP,#0x70+var_50]
    STR R4, [SP,#0x70+var_48]
    LDR.W R3, [R10,#0x50]
    LDR.W R4, [R10,#0x58]
    LDR.W R7, [R10,#0x54]
    REV R3, R3
    STR R2, [SP,#0x70+var_44]
    REV R4, R4
    LDR.W R2, [R10,#0x5C]
    STR.W R12, [SP,#0x70+var_4C]
    REV.W R12, R7
    STR.W LR, [SP,#0x70+var_40]
    REV R2, R2
    STR R3, [SP,#0x70+var_3C]
    STR.W R12, [SP,#0x70+var_38]
    STR R4, [SP,#0x70+var_34]
    STR R2, [SP,#0x70+var_30]
    BL sub_2F354
    CMP R5, #0x3F
    STR.W R8, [R10,#0x60]
    MOV.W R0, #0
    BGT loc_2FA8E
loc_2FB50:
    MOV R1, R6
    MOV R0, R11
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0x60]
loc_2FB5E:
    LDR R2, [SP,#0x70+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_2FB8A
loc_2FB68:
    ADD SP, SP, #0x4C
    POP.W {R4-R11,PC}
loc_2FB6E:
    ADDS R3, R2, R0
    CMP R3, #0x3F
    BGT loc_2FA86
loc_2FB74:
    ADD.W R3, R10, #0x20
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0x60]
    ADD R3, R5
    STR.W R3, [R10,#0x60]
    B loc_2FB5E
loc_2FB8A:
    BLX __stack_chk_fail
```
Output:[
    "The abort function is responsible for handling errors and interrupts."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
puts:
loc_1132C:
    ADR R12, 0x11334
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(puts_ptr - 0x55334)]!
```
Output:[
    "Extracts RSA public blob from sender's LR",
    "Stores back chain and sender LR",
    "Stores sender LR and var 4",
    "Stores sender LR and var 10",
    "Stores sender LR and var 8",
    "Loads 8 bytes from sender LR",
    "Calls sub_10012630",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Calls sub_10012630",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from sender LR",
    "Adds 4 bytes to sender LR",
    "Loads 8 bytes from
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp_clock_gettime:
loc_568A8:
    IMPORT 
```
Output:[
    "Reads data from memory",
    "Uses assembly instructions for reading data",
    "Includes the `__imp` prefix to indicate it's an external function"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
bignum_from_bytes:
loc_1EDA8:
    MOV R3, #0xFFFFFFE
    CMP R1, R3
    PUSH.W {R4-R8,LR}
    BHI loc_1EE42
loc_1EDB8:
    ADDS R6, R1, #3
    MOV R3, #0x3FFFFFE
    MOV R7, R1
    ASRS R6, R6, #2
    CMP R6, R3
    BGT loc_1EE5C
loc_1EDCA:
    MOV R5, R0
    ADDS R0, R6, #1
    MOVS R1, #4
    MOV.W R8, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R8
    MOV R4, R0
    BLX memset
    STR R6, [R4]
    CBZ R6, loc_1EDF2
loc_1EDE6:
    SUB.W R2, R8, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1EDF2:
    SUBS R0, R7, #1
    CBZ R7, loc_1EE1A
loc_1EDF6:
    LSLS R7, R0, #3
loc_1EDF8:
    ASRS R1, R0, #2
    LDRB.W R2, [R5],#1
    ADDS R1, #1
    AND.W R3, R7, #0x1F
    SUBS R0, #1
    SUBS R7, #8
    LDR.W R6, [R4,R1,LSL#2]
    LSL.W R3, R2, R3
    ORRS R3, R6
    STR.W R3, [R4,R1,LSL#2]
    ADDS R3, R0, #1
    BNE loc_1EDF8
loc_1EE1A:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1EE3C
loc_1EE20:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBNZ R1, loc_1EE3C
loc_1EE2A:
    SUBS R3, #1
    B loc_1EE36
loc_1EE2E:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1EE3C
loc_1EE36:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_1EE2E
loc_1EE3C:
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_1EE42:
    MOVW R1, #0xE76C
    MOVW R0, #0xE800
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumFromByte
    MOVW R2, #0x583
    BLX __assert_fail
loc_1EE5C:
    BL sub_115CC
```
Output:[
    "SHA-256 Initialization"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
x_get_default:
loc_12F48:
    MOVS R0, #0
    BX LR
```
Output:```json
[
    "Opens a file and returns a handle to it",
    "Uses Windows API functions to open files",
    "Handles file operations like reading, writing, and seeking"
]
```<|im_end|>
dss_public_blob:
loc_1FAB4:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x14
    MOV R4, R0
    LDR R0, [R0]
    STR R1, [SP,#0x38+var_2C]
    BL sub_1C53C
    MOV R3, R0
    ADD.W R5, R3, #0xF
    ADDS R3, #8
    LDR R0, [R4,#4]
    IT 
    MOVPL R5, R3
    BL sub_1C53C
    ADDS.W R9, R0, #8
    ADD.W R3, R0, #0xF
    LDR R0, [R4,#8]
    IT 
    MOVMI R9, R3
    ASRS R3, R5, #3
    ADD.W R11, R3, #0xFFFFFFFF
    MOV.W R9, R9,ASR#3
    MOV R6, R3
    BL sub_1C53C
    ADD.W R10, R6, #0x1B
    ADD R10, R9
    ADD.W R2, R0, #0xF
    ADDS.W R8, R0, #8
    LDR R0, [R4,#0xC]
    IT 
    MOVMI R8, R2
    BL sub_1C53C
    MOV.W R8, R8,ASR#3
    MOVS R1, #1
    ADD R10, R8
    STR R6, [SP,#0x38+var_30]
    ADD.W R7, R0, #0xF
    ADDS R0, #8
    IT 
    MOVMI R0, R7
    ASRS R7, R0, #3
    ADD.W R3, R10, R7
    STR R3, [SP,#0x38+var_34]
    MOV R0, R3
    BL sub_17928
    MOV R2, #0x301D0
    LDR R1, [SP,#0x38+var_30]
    MOV.W LR, #7
    ASRS R3, R5, #0x1B
    LDRH.W R12, [R2,#(word_301D4 - 0x301D0)]
    MOV R6, R0
    LDR R0, [R2]
    LDRB R2, [R2,#(byte_301D6 - 0x301D0)]
    STRB.W LR, [R6,#3]
    MOV.W LR, R5,ASR#11
    STR R0, [R6,#4]
    MOVS R0, #0
    STRH.W R12, [R6,#8]
    STRB R0, [R6]
    STRB R0, [R6,#1]
    STRB R0, [R6,#2]
    ASRS R0, R5, #0x13
    STRB R2, [R6,#0xA]
    ADD.W R5, R6, #0xF
    STRB R3, [R6,#0xB]
    STRB R1, [R6,#0xE]
    STRB R0, [R6,#0xC]
    STRB.W LR, [R6,#0xD]
    CBZ R1, loc_1FB8E
loc_1FB72:
    MOV R10, R5
loc_1FB74:
    MOV R1, R11
    LDR R0, [R4]
    BL sub_1C5F0
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_1FB74
loc_1FB8A:
    LDR R3, [SP,#0x38+var_30]
    ADD R5, R3
loc_1FB8E:
    MOV.W R3, R9,ASR#24
    STRB.W R9, [R5,#3]
    STRB R3, [R5]
    ADD.W R11, R9, #0xFFFFFFFF
    MOV.W R3, R9,ASR#16
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    MOV.W R3, R9,ASR#8
    STRB.W R3, [R5,#-2]
    CMP.W R9, #0
    BEQ loc_1FBCE
loc_1FBB4:
    MOV R10, R5
loc_1FBB6:
    MOV R1, R11
    LDR R0, [R4,#4]
    BL sub_1C5F0
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_1FBB6
loc_1FBCC:
    ADD R5, R9
loc_1FBCE:
    MOV.W R3, R8,ASR#24
    STRB.W R8, [R5,#3]
    STRB R3, [R5]
    ADD.W R9, R8, #0xFFFFFFFF
    MOV.W R3, R8,ASR#16
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    MOV.W R3, R8,ASR#8
    STRB.W R3, [R5,#-2]
    CMP.W R8, #0
    BEQ loc_1FC0E
loc_1FBF4:
    MOV R11, R5
loc_1FBF6:
    MOV R1, R9
    LDR R0, [R4,#8]
    BL sub_1C5F0
    ADD.W R9, R9, #0xFFFFFFFF
    CMP.W R9, #0xFFFFFFFF
    STRB.W R0, [R11],#1
    BNE loc_1FBF6
loc_1FC0C:
    ADD R5, R8
loc_1FC0E:
    ASRS R3, R7, #0x18
    STRB R7, [R5,#3]
    STRB R3, [R5]
    ADD.W R8, R7, #0xFFFFFFFF
    ASRS R3, R7, #0x10
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    ASRS R3, R7, #8
    STRB.W R3, [R5,#-2]
    CBZ R7, loc_1FC42
loc_1FC28:
    MOV R9, R5
loc_1FC2A:
    MOV R1, R8
    LDR R0, [R4,#0xC]
    BL sub_1C5F0
    ADD.W R8, R8, #0xFFFFFFFF
    CMP.W R8, #0xFFFFFFFF
    STRB.W R0, [R9],#1
    BNE loc_1FC2A
loc_1FC40:
    ADD R5, R7
loc_1FC42:
    LDR R3, [SP,#0x38+var_34]
    ADDS R3, R6, R3
    CMP R5, R3
    BNE loc_1FC5A
loc_1FC4A:
    LDR R3, [SP,#0x38+var_2C]
    MOV R0, R6
    MOV R2, R3
    LDR R3, [SP,#0x38+var_34]
    STR R3, [R2]
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_1FC5A:
    MOVW R3, #0x4F9C
    MOVW R1, #0x501C
    MOVW R0, #0x5028
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x155
    MOVT.W R0, #3
    BLX __assert_fail
```
Output:```json
[
    {
        "feature": "Saving user key",
        "description": "The function `ssh2_save_userkey` saves the user key using AES-256 encryption and SHA-1 hashing."
    },
    {
        "feature": "SHA-1 hashing",
        "description": "The function uses SHA-1 to hash the user key before saving it."
    },
    {
        "feature": "AES-256 encryption",
        "description": "The function encrypts the user key using AES-256."
    }
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
setpwent:
loc_113D4:
    ADR R12, 0x113DC
    ADD R12, R12, #0x3A000
    LDR PC, [R12,#(setpwent_ptr - 0x4B3DC)]!
```
Output:```json
[
    "Creates a directory named 'dir_456C4C'"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 2
```assembly
bigmul:
loc_1CA80:

loc_1CC1C:
    MOVS R2, #0
    B.W sub_1CA80
```
Output:[
    "Initializes SHA-256 state",
    "Allocates memory for SHA-256 context",
    "Sets up the SHA-256 context",
    "Hashes a message using SHA-256 algorithm",
    "Releases allocated memory"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp___sprintf_chk:
loc_56858:
    IMPORT 
```
Output:```json
[
    "Copies data from one location to another."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
ssh2_bignum_length:
loc_1F1CC:
    LDR R3, [R0]
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1F1FC
loc_1F1D4:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F1EA
loc_1F1E0:
    B loc_1F1FC
loc_1F1E2:
    LDR.W R2, [R0,R2,LSL#2]
    LSRS R2, R1
    BNE loc_1F1FC
loc_1F1EA:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R1, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1F1E2
loc_1F1FC:
    ADD.W R0, R3, #0x10
    ADDS R3, #9
    IT 
    MOVMI R3, R0
    ASRS R0, R3, #3
    ADDS R0, #4
    BX LR
```
Output:[
    "Checks if the console is interactive",
    "Sets up the global variable `gp` to 0x472030",
    "Loads the `isatty` function from the global variable `gp` into register `$t9`",
    "Jumps to the `JR` instruction if the result of `t9` is zero",
    "Moves the value 0 into register `$a0`"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp___memcpy_chk:
loc_56854:
    IMPORT 
```
Output:```json
[
    "Function `fontspec_free` is called",
    "It initializes the stack pointer and local variables",
    "Allocates memory for the font specification structure",
    "Stores the font specification in the stack",
    "Loads the font specification from the stack",
    "Deallocates the memory allocated for the font specification",
    "Calls the `safefree` function"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
ec_p256:
loc_24FDC:
    PUSH {R3-R5,LR}
    MOV R4, #0x561A8
    LDRB.W R5, [R4,#(byte_56250 - 0x561A8)]
    CMP R5, #0
    BNE loc_25064
loc_24FEE:
    MOVS R1, #0x20
    LDR R0, =unk_3F8B0
    MOV.W R3, #0x100
    STR.W R5, [R4,#(dword_56254 - 0x561A8)]
    STR.W R3, [R4,#(dword_56260 - 0x561A8)]
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56264 - 0x561A8)]
    LDR R0, =unk_3F8D0
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56268 - 0x561A8)]
    LDR R0, =unk_3F8F0
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_5626C - 0x561A8)]
    LDR R0, =unk_3F910
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56270 - 0x561A8)]
    LDR R0, =unk_3F930
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56278 - 0x561A8)]
    LDR R0, =unk_3F950
    BL sub_1EDA8
    ADD.W R2, R4, #0xAC
    MOVW R3, #0xFD08
    STR.W R2, [R4,#(dword_56274 - 0x561A8)]
    MOVT.W R3, #3
    MOVS R2, #1
    STRB.W R5, [R4,#(byte_56284 - 0x561A8)]
    STR.W R3, [R4,#(dword_56258 - 0x561A8)]
    STR.W R3, [R4,#(dword_5625C - 0x561A8)]
    STRB.W R2, [R4,#(byte_56250 - 0x561A8)]
    STR.W R0, [R4,#(dword_5627C - 0x561A8)]
loc_25064:
    LDR R0, =dword_56254
    POP {R3-R5,PC}
```
Output:```json
[
    "Allocates memory for a free block",
    "Sets up registers for safe free operations",
    "Calls `safefree` function to free memory"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
des_decipher:
loc_21828:
    PUSH.W {R4-R11,LR}
    EOR.W R4, R2, R1,LSR#4
    AND.W R4, R4, #0xF0F0F0F
    LDR R5, [R3,#0x7C]
    EORS R2, R4
    LDR R6, [R3,#0x3C]
    EOR.W R1, R1, R4,LSL#4
    MOV R4, #0x3E8A4
    EOR.W LR, R2, R1,LSR#16
    UXTH.W LR, LR
    EOR.W R2, R2, LR
    EOR.W R1, R1, LR,LSL#16
    EOR.W R12, R1, R2,LSR#2
    AND.W R12, R12, #0x33333333
    EOR.W LR, R1, R12
    EOR.W R2, R2, R12,LSL#2
    EOR.W R12, LR, R2,LSR#8
    AND.W R12, R12, #0xFF00FF
    EOR.W LR, LR, R12
    EOR.W R2, R2, R12,LSL#8
    EOR.W R12, R2, LR,LSR#1
    AND.W R12, R12, #0x55555555
    EOR.W R2, R2, R12
    EOR.W LR, LR, R12,LSL#1
    MOV.W R2, R2,ROR#31
    EORS R5, R2
    EORS R6, R2
    UBFX.W R8, R5, #0x18, #6
    UBFX.W R12, R5, #0x10, #6
    AND.W R9, R5, #0x3F
    UBFX.W R5, R5, #8, #6
    ADD.W R12, R4, R12,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R9, R4, R9,LSL#2
    MOV.W R6, R6,ROR#4
    LDR.W R1, [R12,#0x520]
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R9,#0x920]
    AND.W R9, R6, #0x3F
    LDR.W R8, [R8,#0x320]
    UBFX.W R10, R6, #0x18, #6
    ADD.W R9, R4, R9,LSL#2
    ORR.W R8, R8, R1
    LDR.W R1, [R5,#0x720]
    ORR.W R5, R8, R7
    ADD.W R10, R4, R10,LSL#2
    ORRS R5, R1
    LDR.W R1, [R9,#0x820]
    UBFX.W R9, R6, #0x10, #6
    UBFX.W R8, R6, #8, #6
    LDR.W R6, [R10,#0x220]
    ORR.W R12, R5, R1
    ADD.W R9, R4, R9,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ORR.W R12, R12, R6
    LDR R1, [R3,#0x78]
    LDR.W R5, [R9,#0x420]
    LDR.W R6, [R8,#0x620]
    ORR.W R12, R12, R5
    ORR.W R6, R12, R6
    EOR.W LR, R6, LR,ROR#31
    EOR.W R7, LR, R1
    LDR R1, [R3,#0x38]
    UBFX.W R6, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    EOR.W R1, LR, R1
    ADD.W R6, R4, R6,LSL#2
    ADD.W R10, R4, R10,LSL#2
    UBFX.W R7, R7, #8, #6
    ADD.W R8, R4, R8,LSL#2
    MOV.W R1, R1,ROR#4
    LDR.W R12, [R6,#0x320]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R6, [R10,#0x520]
    LDR.W R5, [R8,#0x920]
    AND.W R9, R1, #0x3F
    ORR.W R12, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, R12, R5
    UBFX.W R8, R1, #0x18, #6
    ORR.W R12, R12, R6
    UBFX.W R6, R1, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R1, R1, #8, #6
    ADD.W R6, R4, R6,LSL#2
    ORR.W R12, R12, R7
    ADD.W R1, R4, R1,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [R6,#0x420]
    ORR.W R7, R12, R7
    LDR.W R1, [R1,#0x620]
    ORRS R6, R7
    LDR R7, [R3,#0x34]
    ORRS R1, R6
    EORS R2, R1
    LDR R1, [R3,#0x74]
    EORS R7, R2
    EOR.W R5, R2, R1
    UBFX.W R1, R5, #0x18, #6
    UBFX.W R12, R5, #0x10, #6
    AND.W R8, R5, #0x3F
    UBFX.W R5, R5, #8, #6
    ADD.W R1, R4, R1,LSL#2
    ADD.W R12, R4, R12,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R7, R7,ROR#4
    LDR.W R10, [R1,#0x320]
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R12,#0x520]
    AND.W R9, R7, #0x3F
    LDR.W R1, [R8,#0x920]
    UBFX.W R8, R7, #0x18, #6
    ORR.W R12, R10, R6
    LDR.W R5, [R5,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, R12, R1
    ORR.W R12, R12, R5
    UBFX.W R5, R7, #0x10, #6
    LDR.W R1, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R7, R7, #8, #6
    ADD.W R5, R4, R5,LSL#2
    ORR.W R12, R12, R1
    LDR.W R1, [R8,#0x220]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R5, [R5,#0x420]
    ORR.W R12, R12, R1
    LDR.W R1, [R7,#0x620]
    ORR.W R7, R12, R5
    LDR R5, [R3,#0x30]
    ORRS R1, R7
    LDR R6, [R3,#0x70]
    EOR.W R1, R1, LR
    EORS R6, R1
    EORS R5, R1
    UBFX.W R7, R6, #0x18, #6
    UBFX.W R8, R6, #0x10, #6
    AND.W R12, R6, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R7, R4, R7,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R12, R4, R12,LSL#2
    AND.W R9, R5, #0x3F
    LDR.W LR, [R7,#0x320]
    UBFX.W R6, R6, #8, #6
    LDR.W R7, [R8,#0x520]
    LDR.W R8, [R12,#0x920]
    ADD.W R6, R4, R6,LSL#2
    ADD.W R12, R4, R9,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R9, R5, #0x18, #6
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x10, #6
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    UBFX.W R5, R5, #8, #6
    LDR.W R12, [R12,#0x820]
    ADD.W R8, R4, R8,LSL#2
    LDR.W R6, [R9,#0x220]
    ORR.W R7, LR, R7
    ADD.W LR, R4, R5,LSL#2
    ORR.W R7, R7, R12
    LDR.W R5, [R8,#0x420]
    ORRS R6, R7
    LDR.W R7, [LR,#0x620]
    ORRS R5, R6
    LDR R6, [R3,#0x6C]
    ORRS R7, R5
    LDR R5, [R3,#0x2C]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R10, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R7, [R10,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R7
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R7
    UBFX.W LR, R5, #0x10, #6
    LDR.W R6, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R6
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R8,#0x220]
    LDR.W R7, [LR,#0x420]
    ORR.W R12, R12, R6
    LDR.W R6, [R5,#0x620]
    ORR.W LR, R12, R7
    LDR R5, [R3,#0x28]
    ORR.W LR, LR, R6
    LDR R6, [R3,#0x68]
    EOR.W R1, LR, R1
    EOR.W R7, R1, R6
    EORS R5, R1
    UBFX.W LR, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    UBFX.W R7, R7, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R6, [R10,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R6
    UBFX.W LR, R5, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R7
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [LR,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W LR, R12, R6
    LDR R6, [R3,#0x64]
    ORR.W R7, LR, R7
    LDR R5, [R3,#0x24]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W R7, R6, #0x18, #6
    UBFX.W R8, R6, #0x10, #6
    AND.W R12, R6, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R7, R4, R7,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R12, R4, R12,LSL#2
    AND.W R9, R5, #0x3F
    LDR.W LR, [R7,#0x320]
    UBFX.W R6, R6, #8, #6
    LDR.W R7, [R8,#0x520]
    LDR.W R8, [R12,#0x920]
    ADD.W R6, R4, R6,LSL#2
    ADD.W R12, R4, R9,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R9, R5, #0x18, #6
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x10, #6
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    UBFX.W R5, R5, #8, #6
    LDR.W R12, [R12,#0x820]
    ADD.W R8, R4, R8,LSL#2
    LDR.W R6, [R9,#0x220]
    ORR.W R7, LR, R7
    ADD.W LR, R4, R5,LSL#2
    ORR.W R7, R7, R12
    LDR.W R5, [R8,#0x420]
    ORRS R6, R7
    LDR.W R7, [LR,#0x620]
    ORRS R5, R6
    LDR R6, [R3,#0x60]
    ORRS R7, R5
    LDR R5, [R3,#0x20]
    EORS R1, R7
    EORS R6, R1
    EORS R5, R1
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R10, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R7, [R10,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R7
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R7
    UBFX.W LR, R5, #0x10, #6
    LDR.W R6, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R6
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R8,#0x220]
    LDR.W R7, [LR,#0x420]
    ORR.W R12, R12, R6
    LDR.W R6, [R5,#0x620]
    ORR.W LR, R12, R7
    LDR R5, [R3,#0x1C]
    ORR.W LR, LR, R6
    LDR R6, [R3,#0x5C]
    EOR.W R2, LR, R2
    EOR.W R7, R2, R6
    EORS R5, R2
    UBFX.W LR, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    UBFX.W R7, R7, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R6, [R10,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R6
    UBFX.W LR, R5, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R7
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [LR,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W LR, R12, R6
    LDR R6, [R3,#0x58]
    ORR.W R7, LR, R7
    LDR R5, [R3,#0x18]
    EORS R1, R7
    EORS R6, R1
    EORS R5, R1
    UBFX.W R7, R6, #0x18, #6
    UBFX.W R9, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W R9, R4, R9,LSL#2
    ADD.W R7, R4, R7,LSL#2
    MOV.W R5, R5,ROR#4
    ADD.W R8, R4, R8,LSL#2
    ADD.W R11, R4, R6,LSL#2
    LDR.W R7, [R7,#0x320]
    LDR.W R6, [R9,#0x520]
    AND.W R10, R5, #0x3F
    LDR.W R12, [R8,#0x920]
    UBFX.W R9, R5, #0x18, #6
    ORR.W LR, R7, R6
    ADD.W R10, R4, R10,LSL#2
    UBFX.W R8, R5, #0x10, #6
    LDR.W R7, [R11,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, LR, R12
    UBFX.W LR, R5, #8, #6
    ADD.W R8, R4, R8,LSL#2
    LDR.W R5, [R10,#0x820]
    ORR.W R7, R12, R7
    LDR.W R6, [R9,#0x220]
    ADD.W LR, R4, LR,LSL#2
    ORRS R7, R5
    LDR.W R5, [R8,#0x420]
    ORRS R6, R7
    LDR.W R7, [LR,#0x620]
    ORRS R5, R6
    LDR R6, [R3,#0x54]
    ORRS R7, R5
    LDR R5, [R3,#0x14]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R10, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R7, [R10,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R7
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R7
    UBFX.W LR, R5, #0x10, #6
    LDR.W R6, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R6
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R8,#0x220]
    LDR.W R7, [LR,#0x420]
    ORR.W R12, R12, R6
    LDR.W R6, [R5,#0x620]
    ORR.W LR, R12, R7
    LDR R5, [R3,#0x10]
    ORR.W LR, LR, R6
    LDR R6, [R3,#0x50]
    EOR.W R1, LR, R1
    EOR.W R7, R1, R6
    EORS R5, R1
    UBFX.W LR, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    UBFX.W R7, R7, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R6, [R10,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R6
    UBFX.W LR, R5, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R7
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [LR,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W LR, R12, R6
    LDR R6, [R3,#0x4C]
    ORR.W R7, LR, R7
    LDR R5, [R3,#0xC]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R7, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W LR, R4, LR,LSL#2
    ADD.W R7, R4, R7,LSL#2
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R6, R6, #8, #6
    LDR.W LR, [LR,#0x320]
    AND.W R10, R5, #0x3F
    LDR.W R7, [R7,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [R8,#0x920]
    UBFX.W R9, R5, #0x18, #6
    ADD.W R10, R4, R10,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R8, R5, #0x10, #6
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, LR, R12
    LDR.W R6, [R6,#0x720]
    UBFX.W LR, R5, #8, #6
    ADD.W R8, R4, R8,LSL#2
    LDR.W R5, [R10,#0x820]
    ORR.W R6, R12, R6
    LDR.W R7, [R9,#0x220]
    ADD.W LR, R4, LR,LSL#2
    ORRS R6, R5
    LDR.W R5, [R8,#0x420]
    ORRS R7, R6
    LDR.W R6, [LR,#0x620]
    ORRS R5, R7
    LDR R7, [R3,#0x48]
    ORRS R6, R5
    LDR R5, [R3,#8]
    EORS R6, R1
    LDR.W LR, [R3,#0x44]
    EORS R7, R6
    EORS R5, R6
    UBFX.W R1, R7, #0x18, #6
    UBFX.W R12, R7, #0x10, #6
    AND.W R9, R7, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R1, R4, R1,LSL#2
    ADD.W R12, R4, R12,LSL#2
    UBFX.W R7, R7, #8, #6
    ADD.W R9, R4, R9,LSL#2
    AND.W R8, R5, #0x3F
    LDR.W R10, [R1,#0x320]
    LDR.W R12, [R12,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R1, [R9,#0x920]
    ADD.W R8, R4, R8,LSL#2
    LDR.W R7, [R7,#0x720]
    ORR.W R12, R10, R12
    UBFX.W R9, R5, #0x18, #6
    ORR.W R12, R12, R1
    LDR.W R1, [R8,#0x820]
    UBFX.W R8, R5, #0x10, #6
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, R12, R7
    UBFX.W R5, R5, #8, #6
    ORR.W R12, R12, R1
    ADD.W R1, R4, R8,LSL#2
    LDR.W R7, [R9,#0x220]
    ADD.W R5, R4, R5,LSL#2
    LDR.W R1, [R1,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W R1, R12, R1
    LDR R5, [R3,#4]
    ORRS R7, R1
    LDR R1, [R3,#0x40]
    EORS R2, R7
    LDR R7, [R3]
    EOR.W LR, R2, LR
    EORS R5, R2
    UBFX.W R3, LR, #0x18, #6
    UBFX.W R8, LR, #0x10, #6
    AND.W R9, LR, #0x3F
    UBFX.W LR, LR, #8, #6
    ADD.W R3, R4, R3,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R9, R4, R9,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R12, [R3,#0x320]
    AND.W R10, R5, #0x3F
    LDR.W R3, [R8,#0x520]
    ADD.W R8, R4, LR,LSL#2
    LDR.W R9, [R9,#0x920]
    ADD.W R10, R4, R10,LSL#2
    ORR.W R3, R12, R3
    LDR.W R12, [R8,#0x720]
    ORR.W LR, R3, R9
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R12
    UBFX.W LR, R5, #0x10, #6
    LDR.W R3, [R10,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R3
    LDR.W R3, [R8,#0x220]
    ADD.W R5, R4, R5,LSL#2
    LDR.W LR, [LR,#0x420]
    ORR.W R12, R12, R3
    LDR.W R3, [R5,#0x620]
    ORR.W R5, R12, LR
    ORRS R3, R5
    EORS R3, R6
    EORS R1, R3
    EOR.W R5, R3, R7
    UBFX.W R6, R1, #0x18, #6
    UBFX.W R7, R1, #0x10, #6
    AND.W R12, R1, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R6, R4, R6,LSL#2
    ADD.W R7, R4, R7,LSL#2
    ADD.W R12, R4, R12,LSL#2
    UBFX.W R1, R1, #8, #6
    LDR.W LR, [R6,#0x320]
    AND.W R8, R5, #0x3F
    LDR.W R7, [R7,#0x520]
    ADD.W R1, R4, R1,LSL#2
    LDR.W R6, [R12,#0x920]
    UBFX.W R12, R5, #0x18, #6
    ADD.W R8, R4, R8,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R7, R5, #0x10, #6
    LDR.W R1, [R1,#0x720]
    ADD.W R12, R4, R12,LSL#2
    UBFX.W R5, R5, #8, #6
    ORR.W LR, LR, R6
    ADD.W R7, R4, R7,LSL#2
    LDR.W R6, [R8,#0x820]
    ORR.W LR, LR, R1
    ADD.W R4, R4, R5,LSL#2
    LDR.W R1, [R12,#0x220]
    LDR.W R5, [R7,#0x420]
    ORR.W R6, LR, R6
    LDR.W R4, [R4,#0x620]
    ORRS R1, R6
    ORRS R5, R1
    MOV.W R1, R3,ROR#1
    ORR.W R3, R5, R4
    EORS R2, R3
    MOV.W R2, R2,ROR#1
    EOR.W R3, R1, R2,LSR#1
    AND.W R3, R3, #0x55555555
    EORS R1, R3
    EOR.W R3, R2, R3,LSL#1
    EOR.W R2, R3, R1,LSR#8
    AND.W R2, R2, #0xFF00FF
    EORS R3, R2
    EOR.W R2, R1, R2,LSL#8
    EOR.W R1, R3, R2,LSR#2
    AND.W R1, R1, #0x33333333
    EORS R3, R1
    EOR.W R2, R2, R1,LSL#2
    EOR.W R1, R2, R3,LSR#16
    UXTH R1, R1
    EORS R2, R1
    EOR.W R3, R3, R1,LSL#16
    EOR.W R1, R2, R3,LSR#4
    AND.W R1, R1, #0xF0F0F0F
    EORS R2, R1
    STR R2, [R0,#4]
    EOR.W R3, R3, R1,LSL#4
    STR R3, [R0]
    POP.W {R4-R11,PC}[
    "Hashes sender and receiver addresses",
    "Stores sender's address in `back_chain`",
    "Stores receiver's address in `var_4`",
    "Updates `lr` with the sender's address",
    "Updates `lr` with the receiver's address",
    "Copies sender's address to `r9`",
    "Copies receiver's address to `r9`",
    "Adds 0x20 to `r9` for padding",
    "Copies 0x1C to `r9` for padding",
    "Adds 0x1C to `r9` for padding",
    "Adds 0x8C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Subtracts 0x7008 from `r2` to get the sender's address",
    "Copies the sender's address to `r9`",
    "Subtracts 0x7008 from `r2` to get the receiver's address",
    "Copies the receiver's address to `r9`",
    "Adds 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Adds 0x20 to `r9` for padding",
    "Adds 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Adds 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x8C to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x20 to `r9` for padding",
    "Copies 0x6C to `r9` for padding",
    "Copies 0x6C
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
bigmul:
loc_1E548:

```
Output:[
    "Reads the sender's LR and stores it in `back_chain`.",
    "Loads the sender's LR and stores it in `lr`.",
    "Stores the sender's LR and stores it in `var_4`.",
    "Stores the sender's LR and stores it in `c`.",
    "Loads the sender's LR and stores it in `r31`.",
    "Loads the sender's LR and stores it in `r4`.",
    "Loads the sender's LR and stores it in `r3`.",
    "Loads the sender's LR and stores it in `r9`.",
    "Subtracts the 7008 bytes from the sender's LR and stores it in `r9`.",
    "Moves the 14 bytes from the sender's LR to the sender's LR.",
    "Adds 1 to the sender's LR.",
    "Checks if the sender's LR is less than 0.",
    "If true, jumps to `loc_10028928`.",
    "Loads the sender's LR from `r31`.",
    "Loads the sender's LR from `r9`.",
    "Extracts the lower byte of the sender's LR.",
    "Compares the extracted lower byte with 0.",
    "Jumps to `loc_10028944` if true.",
    "Loads the sender's LR from `r31`.",
    "Loads the sender's LR from `r14`.",
    "Moves the sender's LR from `r11` to `r14`.",
    "Blacks the stack check fail.",
    "Adds 30 to the sender's LR.",
    "Loads the sender's LR from `r31`.",
    "Loads the sender's LR from `r9`.",
    "Subtracts the 7008 bytes from the sender's LR and stores it in `r9`.",
    "Moves the 14 bytes from the sender's LR to the sender's LR.",
    "Adds 1 to the sender's LR.",
    "Checks if the sender's LR is greater than or equal to 0.",
    "If true, jumps to `loc_1002897C`.",
    "Blacks the stack check fail.",
    "Adds 30 to the sender's LR.",
    "Loads the sender's LR from `r31`.",
    "Loads the sender's LR from `r9`.",
    "Subtracts the 7008 bytes from the sender's LR and stores it in `r9`.",
    "Moves the 14 bytes from the sender's LR to the sender's LR.",
    "Adds 1 to the sender's LR.",
    "Checks if the sender's LR is less than 0.",
    "If true, jumps to `loc_10028980`."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
random_ref:
loc_2D134:
    PUSH {R4,LR}
    MOV R4, #dword_562CC
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    CBZ R1, loc_2D14C
loc_2D144:
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    POP {R4,PC}
loc_2D14C:
    MOV.W R2, #0x510
    MOV R0, R4
    BLX memset
    MOV R0, #0x2CCE9
    BL sub_36BA8
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2D19A
loc_2D168:
    MOVW R2, #0x62CC
    MOVW R1, #0xCF8D
    MOVT.W R2, #5
    MOVT.W R1, #2
    MOV R0, #0x493E0
    BL sub_19A7C
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    MOV R3, #0x56840
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    STR R0, [R3]
    POP {R4,PC}
loc_2D19A:
    BL sub_2CBB0
    B loc_2D168
```
Output:[
    "Initialize SHA context",
    "Store the chain",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform the loop",
    "Update the loop index",
    "Store the loop index",
    "Load the loop index",
    "Perform
```
Output:[
    "Function to copy a string from memory to a register"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
import_encrypted:
loc_1708C:

loc_17190:
    CMP R1, #5
    PUSH {R4,R5,LR}
    MOV R4, R0
    SUB SP, SP, #0xC
    BEQ loc_171B4
loc_1719A:
    CMP R1, #6
    BEQ loc_171F4
loc_1719E:
    CMP R1, #7
    BEQ loc_171A8
loc_171A2:
    MOVS R0, #0
    ADD SP, SP, #0xC
    POP {R4,R5,PC}
loc_171A8:
    MOV R1, R2
    ADD SP, SP, #0xC
    POP.W {R4,R5,LR}
    B.W sub_1708C
loc_171B4:
    STR R2, [SP,#0x18+var_14]
    BL sub_36688
    BL sub_18A88
    LDR R2, [SP,#0x18+var_14]
    MOVS R1, #0
    STR R0, [R2]
    MOV R0, R4
    BL sub_14428
    MOV R5, R0
    CMP R0, #0
    BEQ loc_171A2
loc_171D0:
    LDR R1, [R0,#0x34]
    LDR R0, [R0,#0x2C]
    LDR R4, [R5,#4]
    BL sub_194E4
    LDR R0, [R5,#0x2C]
    BL sub_19494
    MOVS R1, #0x38
loc_171E2:
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0xC
    POP {R4,R5,PC}
loc_171F4:
    STR R2, [SP,#0x18+var_14]
    BL sub_36688
    BL sub_18A88
    LDR R2, [SP,#0x18+var_14]
    MOVS R1, #0
    STR R0, [R2]
    MOV R0, R4
    BL sub_1492C
    MOV R5, R0
    CMP R0, #0
    BEQ loc_171A2
loc_17210:
    LDR R3, [R0]
    LDR R1, [R0,#0x2C]
    MOVS R4, R3
    LDR R0, [R0,#0x24]
    IT 
    MOVNE R4, #1
    BL sub_194E4
    LDR R0, [R5,#0x24]
    BL sub_19494
    MOVS R1, #0x30
    B loc_171E2
```
Output:```json
[
    "Function `__imp_strspn` is an external function.",
    "It takes a pointer to a null-terminated string and a maximum length as parameters.",
    "The function returns the number of characters in the string up to but not including the specified maximum length.",
    "It does not perform any operations on the string itself."
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
hmacmd5_key:
loc_29946:
    SUBS R6, #1
    ADD R5, SP, #0x68+s
    MOVS R3, #0
    MOV R1, R5
    MOV R0, R6
loc_29950:
    ADDS R3, #1
    LDRB.W LR, [R1]
    CMP R7, R3
    LDRB.W R2, [R0,#1]!
    ITE 
    MOVGT R4, #1
    MOVLE R4, #0
    CMP R3, #0x3F
    EOR.W R2, LR, R2
    STRB.W R2, [R1],#1
    IT 
    MOVGT R4, #0
    CMP R4, #0
    BNE loc_29950
loc_29974:
    ADD R1, SP, #0x68+s
    MOV R0, R9
    STR.W R4, [R9,#0x50]
    MOVW R2, #0x2301
    STR.W R4, [R9,#0x58]
    MOVT.W R2, #0x6745
    STR.W R4, [R9,#0x54]
    MOVW R3, #0xAB89
    STR.W R2, [R9]
    MOVT.W R3, #0xEFCD
    MOVW R2, #0xDCFE
    STR.W R3, [R9,#4]
    MOVT.W R2, #0x98BA
    MOVW R3, #0x5476
    STR.W R2, [R9,#8]
    MOVT.W R3, #0x1032
    MOVS R2, #0x40
    STR.W R3, [R9,#0xC]
    BL sub_29024
    MOVS R2, #0x40
    MOVS R1, #0x5C
    ADD R0, SP, #0x68+s
    BLX memset
    MOV R3, R4
loc_299C6:
    ADDS R3, #1
    LDRB R0, [R5]
    CMP R7, R3
    LDRB.W R2, [R6,#1]!
    ITE 
    MOVGT R1, #1
    MOVLE R1, #0
    CMP R3, #0x3F
    EOR.W R2, R2, R0
    STRB.W R2, [R5],#1
    IT 
    MOVGT R1, #0
    CMP R1, #0
    BNE loc_299C6
loc_299E8:
    ADD.W R0, R9, #0x5C
    ADD R1, SP, #0x68+s
    MOVW R3, #0x2301
    MOVW R2, #0xAB89
    MOVT.W R3, #0x6745
    MOVT.W R2, #0xEFCD
    STR.W R3, [R9,#0x5C]
    MOVW R3, #0xDCFE
    STR.W R2, [R9,#0x60]
    MOVT.W R3, #0x98BA
    MOVW R2, #0x5476
    STR.W R3, [R9,#0x64]
    MOVT.W R2, #0x1032
    MOVS R3, #0
    STR.W R2, [R9,#0x68]
    MOVS R2, #0x40
    STR.W R3, [R9,#0xAC]
    STR.W R3, [R9,#0xB4]
    STR.W R3, [R9,#0xB0]
    BL sub_29024
    ADD R0, SP, #0x68+s
    MOVS R1, #0x40
    BL sub_194E4
    LDR R2, [SP,#0x68+var_24]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE loc_29A9E
loc_29A44:
    ADD SP, SP, #0x4C
    POP.W {R4-R9,PC}
loc_29A4A:
    ADD R1, SP, #0x68+s
    MOV R0, R9
    MOVW R3, #0x2301
    MOVW R2, #0xAB89
    MOVT.W R3, #0x6745
    MOVT.W R2, #0xEFCD
    STR.W R3, [R9]
    MOVW R3, #0xDCFE
    STR.W R2, [R9,#4]
    MOVT.W R3, #0x98BA
    MOVW R2, #0x5476
    STR.W R3, [R9,#8]
    MOVT.W R2, #0x1032
    MOVS R3, #0
    STR.W R2, [R9,#0xC]
    MOVS R2, #0x40
    STR.W R3, [R9,#0x50]
    STR.W R3, [R9,#0x58]
    STR.W R3, [R9,#0x54]
    BL sub_29024
    MOVS R2, #0x40
    MOVS R1, #0x5C
    ADD R0, SP, #0x68+s
    BLX memset
    B loc_299E8
loc_29A9E:
    BLX __stack_chk_fail
```
Output:[
    "Loads the sender's LR and variable values from the back chain.",
    "Stores the sender's LR in the 0x30+sender_lr register.",
    "Stores the sender's LR in the 0x30+var_4 register.",
    "Stores the sender's LR in the 0xC register.",
    "Loads the receiver's LR from the back chain.",
    "Stores the receiver's LR in the 0x18+sender_lr register.",
    "Stores the receiver's LR in the 0x14+var_4 register.",
    "Loads the receiver's LR in the 0xC register.",
    "Loads the receiver's LR from the back chain.",
    "Subtracts the 7008 offset from the receiver's LR.",
    "Stores the receiver's LR in the 14+sender_lr register.",
    "Compares the 9th word of the back chain with the 9th word of the sender's LR.",
    "If not equal, branches to loc_1002EA14.",
    "Loads the 9th word of the back chain into the 14+sender_lr register.",
    "Loads the 14+sender_lr register into the 18+sender_lr register.",
    "Moves the 14+sender_lr register to the 3rd register.",
    "Loads the 14+sender_lr register into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is less than or equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA30.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is greater than or equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA68.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA68.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is less than the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA30.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is greater than or equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA68.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA68.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is less than the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA30.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is greater than or equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA68.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9th word of the sender's LR into the 18+sender_lr register.",
    "Moves the 9th word of the sender's LR to the 3rd register.",
    "Loads the 9th word of the sender's LR into the 3rd register.",
    "Loads the 3rd register into the 4th register.",
    "Loads the 3rd register into the 8th register.",
    "Loads the 3rd register from the back chain.",
    "Adds 0 to the 3rd register.",
    "Subtracts 0 from the 3rd register.",
    "Checks if the 9th word of the back chain is equal to the 9th word of the sender's LR.",
    "If so, branches to loc_1002EA68.",
    "Loads the 9th word of the back chain into the 9th word of the sender's LR.",
    "Loads the 9
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
sha384_final:
loc_31EFC:
    PUSH.W {R4-R8,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x48
    MOV R4, R1
    ADD R1, SP, #0x60+var_5C
    LDR R3, [R7]
    MOV R8, R0
    ADD R6, SP, #0x60+var_5C
    STR R3, [SP,#0x60+var_1C]
    BL sub_31B84
    ADD.W LR, SP, #0x60+var_2C
loc_31F1E:
    MOV R5, R6
    ADDS R4, #0x10
    LDM R5!, {R0-R3}
    ADDS R6, #0x10
    CMP R5, LR
    STR.W R0, [R4,#-0x10]
    STR.W R1, [R4,#-0xC]
    STR.W R2, [R4,#-8]
    STR.W R3, [R4,#-4]
    BNE loc_31F1E
loc_31F3A:
    MOVS R1, #0xD4
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R2, [SP,#0x60+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_31F56
loc_31F50:
    ADD SP, SP, #0x48
    POP.W {R4-R8,PC}
loc_31F56:
    BLX __stack_chk_fail
```
Output:
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp_remove:
loc_5694C:
    IMPORT 
```
Output:[
    "SHA-256 Message Authentication Code (SHA-256M)",  // Contains SHA-256 computations and validation
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable 16 value
    "Var 15",                                 // Contains the sender's variable 15 value
    "CR7",                                    // Contains the current control register value
    "Lr",                                      // Stores the LR value
    "Stack Check Fail",                        // Marks a stack overflow error
    "Sender LR",                               // Stores the sender's LR value
    "Var 10",                                // Contains the sender's variable 10 value
    "Var C",                                  // Contains the sender's variable C value
    "Var 8",                                  // Contains the sender's variable 8 value
    "Var 4",                                  // Contains the sender's variable 4 value
    "Var 16",                                 // Contains the sender's variable [
    "Writes the sender's LR to the back chain register.",
    "Calculates the sender's LR using the sender's LR and the sender's address.",
    "Checks if the sender's LR is equal to a specific value (assumed to be 'ASS_1@ha' and 'ASS_1@l') and increments it if true.",
    "Uses the result of the increment to calculate the sender's LR.",
    "Stores the sender's LR in the back chain register.",
    "Calls the `__fprintf_chk` function to print the sender's LR.",
    "Loads the sender's LR from the back chain register.",
    "Adds 1 to the sender's LR.",
    "Checks if the sender's LR is equal to the specified value (assumed to be 'ASS_1@ha' and 'ASS_1@l') and increments it if true.",
    "Uses the result of the increment to calculate the sender's LR.",
    "Stores the sender's LR in the back chain register.",
    "Calls the `__fprintf_chk` function to print the sender's LR.",
    "Loads the sender's LR from the back chain register.",
    "Adds 1 to the sender's LR.",
    "Checks if the sender's LR is equal to the specified value (assumed to be 'ASS_1@ha' and 'ASS_1@l') and increments it if true.",
    "Uses the result of the increment to calculate the sender's LR.",
    "Stores the sender's LR in the back chain register.",
    "Calls the `__fprintf_chk` function to print the sender's LR."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
readdir:
loc_114D0:
    ADR R12, 0x114D8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(readdir_ptr - 0x554D8)]!
```
Output:- **ssh_ecdhkex_newkey**: Initializes the SSH ECDH key exchange process, including generating a new key and setting up the sender's chain and variable data.
- **sub_1000AAB0**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C0**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000C0C0**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000C0C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH key exchange.
- **sub_1000B4C4**: Subroutine to handle the initialization of the SSH ECDH
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
loadrsakey:
loc_2A5C8:
    PUSH.W {R4-R9,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0x54
    MOVS R4, #0
    MOV R8, R1
    LDR R7, [R5]
    MOV R9, R2
    MOVW R1, #0x32EC
    MOV R2, R4
    MOVT.W R1, #4
    STR R4, [SP,#0x70+var_68]
    MOV R6, R3
    STR R7, [SP,#0x70+var_24]
    BL sub_3694C
    MOV R4, R0
    CBZ R0, loc_2A646
loc_2A5F6:
    MOV R2, R0
    MOVS R1, #0x40
    ADD R0, SP, #0x70+s
    BLX fgets
    CBZ R0, loc_2A614
loc_2A602:
    ADD R0, SP, #0x70+s
    MOV R1, #aSshPrivateKeyF
    BLX strcmp
    MOV R3, R0
    CBZ R0, loc_2A654
loc_2A614:
    MOV R0, R4
    MOV R3, #0x43324
    STR R3, [SP,#0x70+var_68]
    BLX fclose
    MOVS R3, #1
    MOVS R0, #0
loc_2A628:
    CMP R6, #0
    ITE 
    MOVEQ R3, #0
    ANDNE.W R3, R3, #1
    CBZ R3, loc_2A638
loc_2A634:
    LDR R3, [SP,#0x70+var_68]
    STR R3, [R6]
loc_2A638:
    LDR R2, [SP,#0x70+var_24]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_2A670
loc_2A640:
    ADD SP, SP, #0x54
    POP.W {R4-R9,PC}
loc_2A646:
    MOVW R2, #0x32F0
    MOVS R3, #1
    MOVT.W R2, #4
    STR R2, [SP,#0x70+var_68]
    B loc_2A628
loc_2A654:
    ADD R2, SP, #0x70+var_68
    STR.W R9, [SP,#0x70+var_70]
    STR R2, [SP,#0x70+var_6C]
    MOV R1, R8
    MOV R2, R3
    MOV R0, R4
    BL sub_2A188
    ADDS.W R3, R0, #0xFFFFFFFF
    IT 
    MOVNE R3, #1
    B loc_2A628
loc_2A670:
    BLX __stack_chk_fail
```
Output:```json
[
    "Enum Settings",
    "Next Function"
]
```<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
random_byte:
loc_2D1F4:
    PUSH {R4,LR}
    MOV R4, #0x562CC
    LDR.W R3, [R4,#(dword_567DC - 0x562CC)]
    CBZ R3, loc_2D230
loc_2D204:
    LDR.W R3, [R4,#(dword_5677C - 0x562CC)]
    CMP.W R3, #0x4B0
    BLT loc_2D214
loc_2D20E:
    LDR.W R2, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R2, loc_2D21E
loc_2D214:
    ADDS R2, R3, #1
    LDRB R0, [R4,R3]
    STR.W R2, [R4,#(dword_5677C - 0x562CC)]
    POP {R4,PC}
loc_2D21E:
    BL sub_2CBB0
    LDR.W R3, [R4,#(dword_5677C - 0x562CC)]
    ADDS R2, R3, #1
    STR.W R2, [R4,#(dword_5677C - 0x562CC)]
    LDRB R0, [R4,R3]
    POP {R4,PC}
loc_2D230:
    MOVW R1, #0x39E8
    MOVW R0, #0x3A08
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aRandomByte
    MOVW R2, #0x147
    BLX __assert_fail
```
Output:[
    "Initializes back chain and sender LR pointers",
    "Copies sender's LR to back chain pointer",
    "Stores sender's LR in a register",
    "Adds 0x5C to the sender's LR",
    "Sets the sender's LR to the sender's LR",
    "Copies sender's LR to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "Loads the sender's LR pointer into a register",
    "Moves the sender's LR pointer to the sender's LR",
    "Adds 0x10 to the sender's LR",
    "Moves the sender's LR pointer to the back chain pointer",
    "
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
__imp_getpwnam:
loc_568FC:
    IMPORT 
```
Output:[
    "Moves data from one memory location to another."
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
perror:
loc_112A8:
    ADR R12, 0x112B0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(perror_ptr - 0x552B0)]!
```
Output:```json
[
    "Stores sender_lr in r1",
    "Loads sender_lr in r29",
    "Loads sender_lr in r30",
    "Loads sender_lr in r31",
    "Adds 20 to sender_lr in r1",
    "Stores sender_lr in r0",
    "Loads var_8 in r0",
    "Loads var_4 in r0",
    "Loads var_C in r0",
    "Loads var_4 in r0",
    "Subtracts 1 from var_4 in r0",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",
    "Loads var_4 in r1",
    "Adds 20 to var_8 in r1",
    "Subtracts 1 from var_8 in r1",
    "Loads var_8 in r1",


############
Binary: putty
Platform: arm
Optimization: 3
```assembly
isatty:
loc_11504:
    ADR R12, 0x1150C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(isatty_ptr - 0x5550C)]!
```
Output:[
    "Hashing",
    "SHA-1",
    "HMAC",
    "Checksumming"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
ed25519_openssh_fmtkey:
loc_24BA8:
    LDR R3, [R0,#4]
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    LDR R3, [R3]
    CMP R3, #2
    IT 
    MOVNE.W R8, #0
    BEQ loc_24BC4
loc_24BBC:
    MOV R0, R8
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_24BC4:
    MOV R4, R0
    LDR R0, [R0,#0xC]
    MOV R7, R2
    MOV R6, R1
    BL sub_1F158
    MOV R3, R0
    ADD.W R9, R3, #0xE
    ADDS R3, #7
    LDR R0, [R4,#0x18]
    IT 
    MOVPL R9, R3
    BL sub_1F158
    MOV.W R10, R9,ASR#3
    ADD.W R5, R0, #0xE
    ADDS R0, #7
    IT 
    MOVMI R0, R5
    ASRS R5, R0, #3
    ADD.W R8, R5, R10,LSL#1
    ADD.W R8, R8, #8
    CMP R7, R8
    BLT loc_24BBC
loc_24BFE:
    ADD.W R7, R10, #0xFFFFFFFF
    MOV.W R3, R9,ASR#27
    CMP R7, #0
    STRB R3, [R6]
    MOV.W R3, R9,ASR#19
    ADD.W R6, R6, #4
    STRB.W R3, [R6,#-3]
    MOV.W R9, R9,ASR#11
    UXTB.W R3, R10
    STRB.W R9, [R6,#-2]
    STRB.W R3, [R6,#-1]
    STR R3, [SP,#0x30+var_30]
    BLE loc_24CE6
loc_24C2A:
    MOV R11, R6
    MOV.W R9, #0
    STR R7, [SP,#0x30+var_2C]
loc_24C32:
    MOV R1, R9
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    ADD.W R9, R9, #1
    CMP R9, R7
    STRB.W R0, [R11],#1
    BNE loc_24C32
loc_24C46:
    LDR R1, [SP,#0x30+var_2C]
    ADD R6, R7
loc_24C4A:
    LDR R0, [R4,#0xC]
    ADD R10, R5
    BL sub_1F20C
    MOVS R1, #0
    ADD.W R9, R6, #5
    AND.W R0, R0, #0x7F
    STRB R0, [R6]
    LDR R0, [R4,#8]
    BL sub_1F234
    LDRB R3, [R6]
    LDR R2, [SP,#0x30+var_30]
    CMP R5, #0
    ADD R2, R5
    STRB R2, [R6,#4]
    MOV.W R2, R10,ASR#24
    STRB R2, [R6,#1]
    MOV.W R2, R10,ASR#16
    MOV.W R10, R10,ASR#8
    STRB R2, [R6,#2]
    STRB.W R10, [R6,#3]
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R6]
    BLE loc_24CF4
loc_24C8A:
    ADD.W R6, R9, R5
    MOV R5, R9
loc_24C90:
    SUB.W R1, R5, R9
    LDR R0, [R4,#0x18]
    BL sub_1F20C
    STRB.W R0, [R5],#1
    CMP R5, R6
    BNE loc_24C90
loc_24CA2:
    CMP R7, #0
    BLE loc_24CEE
loc_24CA6:
    MOV R10, R7
    MOV R9, R6
    MOVS R5, #0
loc_24CAC:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    ADDS R5, #1
    CMP R7, R5
    STRB.W R0, [R9],#1
    BNE loc_24CAC
loc_24CBE:
    ADD R6, R7
loc_24CC0:
    MOV R1, R10
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB R0, [R6]
    LDR R0, [R4,#8]
    BL sub_1F234
    LDRB R3, [R6]
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R6]
    MOV R0, R8
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_24CE6:
    MOVS R3, #0
    STR R3, [SP,#0x30+var_2C]
    MOV R1, R3
    B loc_24C4A
loc_24CEE:
    MOV.W R10, #0
    B loc_24CC0
loc_24CF4:
    MOV R6, R9
    B loc_24CA2
```
Output:[
    "Free the key from the sender's chain",
    "Load the sender's LR and var_4 into LR",
    "Subtract the sender's LR from the current LR",
    "Compare the result with 0",
    "Beq if true, call sub_10011CE0",
    "Load the sender's LR and var_4 into LR",
    "Add 0x20 to the sender's LR",
    "Multiply the sender's LR by 4",
    "Subtract the sender's LR from the current LR",
    "Compare the result with 0",
    "Beq if true, call sub_10011CE0",
    "Load the sender's LR and var_4 into LR",
    "Add 0x10 to the sender's LR",
    "Multiply the sender's LR by 8",
    "Subtract the sender's LR from the current LR",
    "Compare the result with 0",
    "Beq if true, call sub_10011CE0",
    "Load the sender's LR and var_4 into LR",
    "Add 0x18 to the sender's LR",
    "Multiply the sender's LR by 16",
    "Subtract the sender's LR from the current LR",
    "Compare the result with 0",
    "Beq if true, call sub_10011CE0"
]<|im_end|>
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
strchr:
loc_113E4:
    ADR R12, 0x113EC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strchr_ptr - 0x553EC)]!
```
Output:[
    "findrelpos234: loc_1003C1E0",
    "findrelpos234: loc_1003C1FC",
    "findrelpos234: loc_1003C208",
    "findrelpos234: loc_1003C210",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C238",
    "findrelpos234: loc_1003C240",
    "findrelpos234: loc_1003C244",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234: loc_1003C278",
    "findrelpos234: loc_1003C270",
    "findrelpos234: loc_1003C224",
    "findrelpos234: loc_1003C22C",
    "findrelpos234: loc_1003C254",
    "findrelpos234: loc_1003C258",
    "findrelpos234: loc_1003C264",
    "findrelpos234
############
Binary: putty
Platform: arm
Optimization: 3
```assembly
des_encipher:
loc_20EE4:
    PUSH.W {R4-R11,LR}
    EOR.W R4, R2, R1,LSR#4
    AND.W R4, R4, #0xF0F0F0F
    LDR R5, [R3,#0x40]
    EORS R2, R4
    LDR R6, [R3]
    EOR.W R1, R1, R4,LSL#4
    MOV R4, #0x3E8A4
    EOR.W LR, R2, R1,LSR#16
    UXTH.W LR, LR
    EOR.W R2, R2, LR
    EOR.W R1, R1, LR,LSL#16
    EOR.W R12, R1, R2,LSR#2
    AND.W R12, R12, #0x33333333
    EOR.W LR, R1, R12
    EOR.W R2, R2, R12,LSL#2
    EOR.W R12, LR, R2,LSR#8
    AND.W R12, R12, #0xFF00FF
    EOR.W LR, LR, R12
    EOR.W R2, R2, R12,LSL#8
    EOR.W R12, R2, LR,LSR#1
    AND.W R12, R12, #0x55555555
    EOR.W R2, R2, R12
    EOR.W LR, LR, R12,LSL#1
    MOV.W R2, R2,ROR#31
    EORS R5, R2
    EORS R6, R2
    UBFX.W R8, R5, #0x18, #6
    UBFX.W R12, R5, #0x10, #6
    AND.W R9, R5, #0x3F
    UBFX.W R5, R5, #8, #6
    ADD.W R12, R4, R12,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R9, R4, R9,LSL#2
    MOV.W R6, R6,ROR#4
    LDR.W R1, [R12,#0x520]
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R9,#0x920]
    AND.W R9, R6, #0x3F
    LDR.W R8, [R8,#0x320]
    UBFX.W R10, R6, #0x18, #6
    ADD.W R9, R4, R9,LSL#2
    ORR.W R8, R8, R1
    LDR.W R1, [R5,#0x720]
    ORR.W R5, R8, R7
    ADD.W R10, R4, R10,LSL#2
    ORRS R5, R1
    LDR.W R1, [R9,#0x820]
    UBFX.W R9, R6, #0x10, #6
    UBFX.W R8, R6, #8, #6
    LDR.W R6, [R10,#0x220]
    ORR.W R12, R5, R1
    ADD.W R9, R4, R9,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ORR.W R12, R12, R6
    LDR R1, [R3,#0x44]
    LDR.W R5, [R9,#0x420]
    LDR.W R6, [R8,#0x620]
    ORR.W R12, R12, R5
    ORR.W R6, R12, R6
    EOR.W LR, R6, LR,ROR#31
    EOR.W R7, LR, R1
    LDR R1, [R3,#4]
    UBFX.W R6, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    EOR.W R1, LR, R1
    ADD.W R6, R4, R6,LSL#2
    ADD.W R10, R4, R10,LSL#2
    UBFX.W R7, R7, #8, #6
    ADD.W R8, R4, R8,LSL#2
    MOV.W R1, R1,ROR#4
    LDR.W R12, [R6,#0x320]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R6, [R10,#0x520]
    LDR.W R5, [R8,#0x920]
    AND.W R9, R1, #0x3F
    ORR.W R12, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, R12, R5
    UBFX.W R8, R1, #0x18, #6
    ORR.W R12, R12, R6
    UBFX.W R6, R1, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R1, R1, #8, #6
    ADD.W R6, R4, R6,LSL#2
    ORR.W R12, R12, R7
    ADD.W R1, R4, R1,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [R6,#0x420]
    ORR.W R7, R12, R7
    LDR.W R1, [R1,#0x620]
    ORRS R6, R7
    LDR R7, [R3,#8]
    ORRS R1, R6
    EORS R2, R1
    LDR R1, [R3,#0x48]
    EORS R7, R2
    EOR.W R5, R2, R1
    UBFX.W R1, R5, #0x18, #6
    UBFX.W R12, R5, #0x10, #6
    AND.W R8, R5, #0x3F
    UBFX.W R5, R5, #8, #6
    ADD.W R1, R4, R1,LSL#2
    ADD.W R12, R4, R12,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R7, R7,ROR#4
    LDR.W R10, [R1,#0x320]
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R12,#0x520]
    AND.W R9, R7, #0x3F
    LDR.W R1, [R8,#0x920]
    UBFX.W R8, R7, #0x18, #6
    ORR.W R12, R10, R6
    LDR.W R5, [R5,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, R12, R1
    ORR.W R12, R12, R5
    UBFX.W R5, R7, #0x10, #6
    LDR.W R1, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R7, R7, #8, #6
    ADD.W R5, R4, R5,LSL#2
    ORR.W R12, R12, R1
    LDR.W R1, [R8,#0x220]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R5, [R5,#0x420]
    ORR.W R12, R12, R1
    LDR.W R1, [R7,#0x620]
    ORR.W R7, R12, R5
    LDR R5, [R3,#0xC]
    ORRS R1, R7
    LDR R6, [R3,#0x4C]
    EOR.W R1, R1, LR
    EORS R6, R1
    EORS R5, R1
    UBFX.W R7, R6, #0x18, #6
    UBFX.W R8, R6, #0x10, #6
    AND.W R12, R6, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R7, R4, R7,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R12, R4, R12,LSL#2
    AND.W R9, R5, #0x3F
    LDR.W LR, [R7,#0x320]
    UBFX.W R6, R6, #8, #6
    LDR.W R7, [R8,#0x520]
    LDR.W R8, [R12,#0x920]
    ADD.W R6, R4, R6,LSL#2
    ADD.W R12, R4, R9,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R9, R5, #0x18, #6
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x10, #6
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    UBFX.W R5, R5, #8, #6
    LDR.W R12, [R12,#0x820]
    ADD.W R8, R4, R8,LSL#2
    LDR.W R6, [R9,#0x220]
    ORR.W R7, LR, R7
    ADD.W LR, R4, R5,LSL#2
    ORR.W R7, R7, R12
    LDR.W R5, [R8,#0x420]
    ORRS R6, R7
    LDR.W R7, [LR,#0x620]
    ORRS R5, R6
    LDR R6, [R3,#0x50]
    ORRS R7, R5
    LDR R5, [R3,#0x10]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R10, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R7, [R10,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R7
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R7
    UBFX.W LR, R5, #0x10, #6
    LDR.W R6, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R6
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R8,#0x220]
    LDR.W R7, [LR,#0x420]
    ORR.W R12, R12, R6
    LDR.W R6, [R5,#0x620]
    ORR.W LR, R12, R7
    LDR R5, [R3,#0x14]
    ORR.W LR, LR, R6
    LDR R6, [R3,#0x54]
    EOR.W R1, LR, R1
    EOR.W R7, R1, R6
    EORS R5, R1
    UBFX.W LR, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    UBFX.W R7, R7, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R6, [R10,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R6
    UBFX.W LR, R5, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R7
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [LR,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W LR, R12, R6
    LDR R6, [R3,#0x58]
    ORR.W R7, LR, R7
    LDR R5, [R3,#0x18]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W R7, R6, #0x18, #6
    UBFX.W R8, R6, #0x10, #6
    AND.W R12, R6, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R7, R4, R7,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R12, R4, R12,LSL#2
    AND.W R9, R5, #0x3F
    LDR.W LR, [R7,#0x320]
    UBFX.W R6, R6, #8, #6
    LDR.W R7, [R8,#0x520]
    LDR.W R8, [R12,#0x920]
    ADD.W R6, R4, R6,LSL#2
    ADD.W R12, R4, R9,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R9, R5, #0x18, #6
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x10, #6
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    UBFX.W R5, R5, #8, #6
    LDR.W R12, [R12,#0x820]
    ADD.W R8, R4, R8,LSL#2
    LDR.W R6, [R9,#0x220]
    ORR.W R7, LR, R7
    ADD.W LR, R4, R5,LSL#2
    ORR.W R7, R7, R12
    LDR.W R5, [R8,#0x420]
    ORRS R6, R7
    LDR.W R7, [LR,#0x620]
    ORRS R5, R6
    LDR R6, [R3,#0x5C]
    ORRS R7, R5
    LDR R5, [R3,#0x1C]
    EORS R1, R7
    EORS R6, R1
    EORS R5, R1
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R10, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R7, [R10,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R7
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R7
    UBFX.W LR, R5, #0x10, #6
    LDR.W R6, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R6
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R8,#0x220]
    LDR.W R7, [LR,#0x420]
    ORR.W R12, R12, R6
    LDR.W R6, [R5,#0x620]
    ORR.W LR, R12, R7
    LDR R5, [R3,#0x20]
    ORR.W LR, LR, R6
    LDR R6, [R3,#0x60]
    EOR.W R2, LR, R2
    EOR.W R7, R2, R6
    EORS R5, R2
    UBFX.W LR, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    UBFX.W R7, R7, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R6, [R10,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R6
    UBFX.W LR, R5, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R7
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [LR,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W LR, R12, R6
    LDR R6, [R3,#0x64]
    ORR.W R7, LR, R7
    LDR R5, [R3,#0x24]
    EORS R1, R7
    EORS R6, R1
    EORS R5, R1
    UBFX.W R7, R6, #0x18, #6
    UBFX.W R9, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W R9, R4, R9,LSL#2
    ADD.W R7, R4, R7,LSL#2
    MOV.W R5, R5,ROR#4
    ADD.W R8, R4, R8,LSL#2
    ADD.W R11, R4, R6,LSL#2
    LDR.W R7, [R7,#0x320]
    LDR.W R6, [R9,#0x520]
    AND.W R10, R5, #0x3F
    LDR.W R12, [R8,#0x920]
    UBFX.W R9, R5, #0x18, #6
    ORR.W LR, R7, R6
    ADD.W R10, R4, R10,LSL#2
    UBFX.W R8, R5, #0x10, #6
    LDR.W R7, [R11,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, LR, R12
    UBFX.W LR, R5, #8, #6
    ADD.W R8, R4, R8,LSL#2
    LDR.W R5, [R10,#0x820]
    ORR.W R7, R12, R7
    LDR.W R6, [R9,#0x220]
    ADD.W LR, R4, LR,LSL#2
    ORRS R7, R5
    LDR.W R5, [R8,#0x420]
    ORRS R6, R7
    LDR.W R7, [LR,#0x620]
    ORRS R5, R6
    LDR R6, [R3,#0x68]
    ORRS R7, R5
    LDR R5, [R3,#0x28]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R10, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    UBFX.W R6, R6, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R7, [R10,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R7
    LDR.W R7, [R6,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R7
    UBFX.W LR, R5, #0x10, #6
    LDR.W R6, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R6
    ADD.W R5, R4, R5,LSL#2
    LDR.W R6, [R8,#0x220]
    LDR.W R7, [LR,#0x420]
    ORR.W R12, R12, R6
    LDR.W R6, [R5,#0x620]
    ORR.W LR, R12, R7
    LDR R5, [R3,#0x2C]
    ORR.W LR, LR, R6
    LDR R6, [R3,#0x6C]
    EOR.W R1, LR, R1
    EOR.W R7, R1, R6
    EORS R5, R1
    UBFX.W LR, R7, #0x18, #6
    UBFX.W R10, R7, #0x10, #6
    AND.W R8, R7, #0x3F
    UBFX.W R7, R7, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ADD.W R10, R4, R10,LSL#2
    ADD.W R8, R4, R8,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R6, [R10,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R12, [LR,#0x320]
    AND.W R9, R5, #0x3F
    LDR.W R8, [R8,#0x920]
    ORR.W LR, R12, R6
    LDR.W R6, [R7,#0x720]
    ADD.W R9, R4, R9,LSL#2
    ORR.W LR, LR, R8
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R6
    UBFX.W LR, R5, #0x10, #6
    LDR.W R7, [R9,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R7
    ADD.W R5, R4, R5,LSL#2
    LDR.W R7, [R8,#0x220]
    LDR.W R6, [LR,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W LR, R12, R6
    LDR R6, [R3,#0x70]
    ORR.W R7, LR, R7
    LDR R5, [R3,#0x30]
    EORS R2, R7
    EORS R6, R2
    EORS R5, R2
    UBFX.W LR, R6, #0x18, #6
    UBFX.W R7, R6, #0x10, #6
    AND.W R8, R6, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W LR, R4, LR,LSL#2
    ADD.W R7, R4, R7,LSL#2
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R6, R6, #8, #6
    LDR.W LR, [LR,#0x320]
    AND.W R10, R5, #0x3F
    LDR.W R7, [R7,#0x520]
    ADD.W R6, R4, R6,LSL#2
    LDR.W R12, [R8,#0x920]
    UBFX.W R9, R5, #0x18, #6
    ADD.W R10, R4, R10,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R8, R5, #0x10, #6
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, LR, R12
    LDR.W R6, [R6,#0x720]
    UBFX.W LR, R5, #8, #6
    ADD.W R8, R4, R8,LSL#2
    LDR.W R5, [R10,#0x820]
    ORR.W R6, R12, R6
    LDR.W R7, [R9,#0x220]
    ADD.W LR, R4, LR,LSL#2
    ORRS R6, R5
    LDR.W R5, [R8,#0x420]
    ORRS R7, R6
    LDR.W R6, [LR,#0x620]
    ORRS R5, R7
    LDR R7, [R3,#0x74]
    ORRS R6, R5
    LDR R5, [R3,#0x34]
    EORS R6, R1
    LDR.W LR, [R3,#0x78]
    EORS R7, R6
    EORS R5, R6
    UBFX.W R1, R7, #0x18, #6
    UBFX.W R12, R7, #0x10, #6
    AND.W R9, R7, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R1, R4, R1,LSL#2
    ADD.W R12, R4, R12,LSL#2
    UBFX.W R7, R7, #8, #6
    ADD.W R9, R4, R9,LSL#2
    AND.W R8, R5, #0x3F
    LDR.W R10, [R1,#0x320]
    LDR.W R12, [R12,#0x520]
    ADD.W R7, R4, R7,LSL#2
    LDR.W R1, [R9,#0x920]
    ADD.W R8, R4, R8,LSL#2
    LDR.W R7, [R7,#0x720]
    ORR.W R12, R10, R12
    UBFX.W R9, R5, #0x18, #6
    ORR.W R12, R12, R1
    LDR.W R1, [R8,#0x820]
    UBFX.W R8, R5, #0x10, #6
    ADD.W R9, R4, R9,LSL#2
    ORR.W R12, R12, R7
    UBFX.W R5, R5, #8, #6
    ORR.W R12, R12, R1
    ADD.W R1, R4, R8,LSL#2
    LDR.W R7, [R9,#0x220]
    ADD.W R5, R4, R5,LSL#2
    LDR.W R1, [R1,#0x420]
    ORR.W R12, R12, R7
    LDR.W R7, [R5,#0x620]
    ORR.W R1, R12, R1
    LDR R5, [R3,#0x38]
    ORRS R7, R1
    LDR R1, [R3,#0x7C]
    EORS R2, R7
    LDR R7, [R3,#0x3C]
    EOR.W LR, R2, LR
    EORS R5, R2
    UBFX.W R3, LR, #0x18, #6
    UBFX.W R8, LR, #0x10, #6
    AND.W R9, LR, #0x3F
    UBFX.W LR, LR, #8, #6
    ADD.W R3, R4, R3,LSL#2
    ADD.W R8, R4, R8,LSL#2
    ADD.W R9, R4, R9,LSL#2
    MOV.W R5, R5,ROR#4
    LDR.W R12, [R3,#0x320]
    AND.W R10, R5, #0x3F
    LDR.W R3, [R8,#0x520]
    ADD.W R8, R4, LR,LSL#2
    LDR.W R9, [R9,#0x920]
    ADD.W R10, R4, R10,LSL#2
    ORR.W R3, R12, R3
    LDR.W R12, [R8,#0x720]
    ORR.W LR, R3, R9
    UBFX.W R8, R5, #0x18, #6
    ORR.W R12, LR, R12
    UBFX.W LR, R5, #0x10, #6
    LDR.W R3, [R10,#0x820]
    ADD.W R8, R4, R8,LSL#2
    UBFX.W R5, R5, #8, #6
    ADD.W LR, R4, LR,LSL#2
    ORR.W R12, R12, R3
    LDR.W R3, [R8,#0x220]
    ADD.W R5, R4, R5,LSL#2
    LDR.W LR, [LR,#0x420]
    ORR.W R12, R12, R3
    LDR.W R3, [R5,#0x620]
    ORR.W R5, R12, LR
    ORRS R3, R5
    EORS R3, R6
    EORS R1, R3
    EOR.W R5, R3, R7
    UBFX.W R6, R1, #0x18, #6
    UBFX.W R7, R1, #0x10, #6
    AND.W R12, R1, #0x3F
    MOV.W R5, R5,ROR#4
    ADD.W R6, R4, R6,LSL#2
    ADD.W R7, R4, R7,LSL#2
    ADD.W R12, R4, R12,LSL#2
    UBFX.W R1, R1, #8, #6
    LDR.W LR, [R6,#0x320]
    AND.W R8, R5, #0x3F
    LDR.W R7, [R7,#0x520]
    ADD.W R1, R4, R1,LSL#2
    LDR.W R6, [R12,#0x920]
    UBFX.W R12, R5, #0x18, #6
    ADD.W R8, R4, R8,LSL#2
    ORR.W LR, LR, R7
    UBFX.W R7, R5, #0x10, #6
    LDR.W R1, [R1,#0x720]
    ADD.W R12, R4, R12,LSL#2
    UBFX.W R5, R5, #8, #6
    ORR.W LR, LR, R6
    ADD.W R7, R4, R7,LSL#2
    LDR.W R6, [R8,#0x820]
    ORR.W LR, LR, R1
    ADD.W R4, R4, R5,LSL#2
    LDR.W R1, [R12,#0x220]
    LDR.W R5, [R7,#0x420]
    ORR.W R6, LR, R6
    LDR.W R4, [R4,#0x620]
    ORRS R1, R6
    ORRS R5, R1
    MOV.W R1, R3,ROR#1
    ORR.W R3, R5, R4
    EORS R2, R3
    MOV.W R2, R2,ROR#1
    EOR.W R3, R1, R2,LSR#1
    AND.W R3, R3, #0x55555555
    EORS R1, R3
    EOR.W R3, R2, R3,LSL#1
    EOR.W R2, R3, R1,LSR#8
    AND.W R2, R2, #0xFF00FF
    EORS R3, R2
    EOR.W R2, R1, R2,LSL#8
    EOR.W R1, R3, R2,LSR#2
    AND.W R1, R1, #0x33333333
    EORS R3, R1
    EOR.W R2, R2, R1,LSL#2
    EOR.W R1, R2, R3,LSR#16
    UXTH R1, R1
    EORS R2, R1
    EOR.W R3, R3, R1,LSL#16
    EOR.W R1, R2, R3,LSR#4
    AND.W R1, R1, #0xF0F0F0F
    EORS R2, R1
    STR R2, [R0,#4]
    EOR.W R3, R3, R1,LSL#4
    STR R3, [R0]
    POP.W {R4-R11,PC}
```
Output:- Verify the sender's chain and the sender's variables
- Retrieve the sender's LR and var_4 values
- Retrieve the sender's var_10 and var_14 values
- Retrieve the sender's var_C and var_8 values
- Retrieve the sender's var_14 values
- Retrieve the sender's var_8 values
- Load the sender's LR and var_4 values into the LR register
- Load the sender's var_10 and var_14 values into the LR register
- Add 0x30 to the sender's LR value
- Load the sender's var_10 and var_14 values into the LR register
- Load the sender's var_C and var_8 values into the LR register
- Load the sender's var_14 values into the LR register
- Load the sender's var_8 values into the LR register
- Load the sender's LR value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR register
- Load the sender's var_4 value into the LR
